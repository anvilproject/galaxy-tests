<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="80"
           errors="10"
           failures="9"
           skip="0">
    
    <testcase classname="bamtools (Test #1)" name="0" time="45.37702226638794">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #2)" name="1" time="39.09608197212219">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #3)" name="2" time="39.83186984062195">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #4)" name="3" time="28.276259899139404">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "header",  "input_bams": {   "id": "14d4bc2d48c76bb9",   "src": "hda"  } }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/f/b/4/dataset_fb4ceae6-1896-4b8e-a434-b9d445514ceb.dat\u0027 localbam.bam \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/a/6/f/metadata_a6f6b238-226f-4b97-98f6-8851ffb74f4e.dat\u0027 localbam.bam.bai \u0026\u0026 bamtools header \u003e \u0027/galaxy/server/database/objects/1/0/b/dataset_10b39817-2e45-49bc-9b6c-d308fdd45f68.dat\u0027 -in localbam.bam",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T13:18:08.080966",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-p5zvr",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "bbfc8a11a1feb9e4",  "inputs": {   "input_bams": {    "id": "14d4bc2d48c76bb9",    "src": "hda",    "uuid": "fb4ceae6-1896-4b8e-a434-b9d445514ceb"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out_file1": {    "id": "dd48b9dfe606ccce",    "src": "hda",    "uuid": "10b39817-2e45-49bc-9b6c-d308fdd45f68"   }  },  "params": {   "__input_ext": "\"bam\"",   "analysis_type": "{\"__current_case__\": 3, \"analysis_type_selector\": \"header\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-04-29T13:18:12.845191",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 28.276259899139404, "tool_id": "bamtools", "tool_version": "2.5.2+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_gtcheck (Test #1)" name="0" time="51.07859802246094">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            INFO: skipping 11:2343543, monoallelic site. (This is printed only once.)INFO:Time required to process one record .. 0.000005 secondsINFO: skipping 20:271225, not a biallelic site, run `bcftools norm -m -` first. (This is printed only once.)INFO: skipping Y:8657215, only diploid FORMAT/PL fields supported. (This is printed only once.)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_tag2tag (Test #1)" name="0" time="37.66289305686951">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #1)" name="0" time="37.87239193916321">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #2)" name="1" time="39.84940981864929">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #3)" name="2" time="40.64504384994507">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_multi_bigwig_summary (Test #1)" name="0" time="56.19813275337219">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Number of bins found: 120
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_multi_bigwig_summary (Test #2)" name="1" time="12.449655532836914">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 1, "time_seconds": 12.449655532836914, "tool_id": "deeptools_multi_bigwig_summary", "tool_version": "3.5.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #1)" name="0" time="43.87482738494873">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #2)" name="1" time="37.0714008808136">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #3)" name="2" time="37.4726128578186">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #4)" name="3" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 3, "tool_id": "fasta_compute_length", "tool_version": "1.0.4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "fasta_compute_length", "tool_version": "1.0.4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #1)" name="0" time="166.46577620506287">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "generate_log": true,  "inputs": [   {    "id": "bd8cd28bdbe6b4f9",    "src": "hda"   },   {    "id": "a0021fc851a6e6e3",    "src": "hda"   },   {    "id": "1400d34a0e15d36e",    "src": "hda"   },   {    "id": "95ecf2b33215f534",    "src": "hda"   },   {    "id": "a7b1d5d2d0f31f72",    "src": "hda"   },   {    "id": "9ab93d03374fcab4",    "src": "hda"   },   {    "id": "4e751db4c556b93d",    "src": "hda"   }  ],  "iterations": "0",  "mode_conditional|mode": "--pacbio-raw" }, "job": {  "command_line": "ln -sf \u0027/galaxy/server/database/objects/9/f/d/dataset_9fd7da5d-872f-4d3e-91ec-6b16c3d51453.dat\u0027 ./input_0.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/e/e/1/dataset_ee1dd7f6-e759-4633-8813-85e2356ce131.dat\u0027 ./input_1.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/0/7/5/dataset_075daa7a-0d55-4fcc-92d6-696e1ec86925.dat\u0027 ./input_2.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/8/9/c/dataset_89cd22be-f1ba-414f-b743-5e7e6649fba7.dat\u0027 ./input_3.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/d/2/2/dataset_d22bec0c-fdc1-4b58-be2d-025bd5af7563.dat\u0027 ./input_4.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/4/0/6/dataset_40627c7d-2985-4c66-b07d-6bd8aca8bd66.dat\u0027 ./input_5.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/c/d/a/dataset_cdab7890-cb03-4626-ab73-6861eb08e21e.dat\u0027 ./input_6.fastq.gz \u0026\u0026 flye --pacbio-raw ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 0",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T13:24:42.973760",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-jdxf8",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "b892f4e10aec932e",  "inputs": {   "inputs": {    "id": "bd8cd28bdbe6b4f9",    "src": "hda",    "uuid": "9fd7da5d-872f-4d3e-91ec-6b16c3d51453"   },   "inputs1": {    "id": "bd8cd28bdbe6b4f9",    "src": "hda",    "uuid": "9fd7da5d-872f-4d3e-91ec-6b16c3d51453"   },   "inputs2": {    "id": "a0021fc851a6e6e3",    "src": "hda",    "uuid": "ee1dd7f6-e759-4633-8813-85e2356ce131"   },   "inputs3": {    "id": "1400d34a0e15d36e",    "src": "hda",    "uuid": "075daa7a-0d55-4fcc-92d6-696e1ec86925"   },   "inputs4": {    "id": "95ecf2b33215f534",    "src": "hda",    "uuid": "89cd22be-f1ba-414f-b743-5e7e6649fba7"   },   "inputs5": {    "id": "a7b1d5d2d0f31f72",    "src": "hda",    "uuid": "d22bec0c-fdc1-4b58-be2d-025bd5af7563"   },   "inputs6": {    "id": "9ab93d03374fcab4",    "src": "hda",    "uuid": "40627c7d-2985-4c66-b07d-6bd8aca8bd66"   },   "inputs7": {    "id": "4e751db4c556b93d",    "src": "hda",    "uuid": "cdab7890-cb03-4626-ab73-6861eb08e21e"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "assembly_gfa": {    "id": "c61718163b7221ce",    "src": "hda",    "uuid": "b4b5a9a0-075a-4333-84fb-24cd6e9db9b2"   },   "assembly_graph": {    "id": "3a2173921d4bf832",    "src": "hda",    "uuid": "1178c2e1-4e43-488a-8a6f-4eebf3a60c55"   },   "assembly_info": {    "id": "960710da9b8c5c97",    "src": "hda",    "uuid": "c960dba6-aead-43a3-bff6-367f82ddb512"   },   "consensus": {    "id": "808f9f33fb117254",    "src": "hda",    "uuid": "a1140025-ffd6-42ff-9bb2-af47c1c0969a"   },   "flye_log": {    "id": "ec9b31d7f3bfdbf8",    "src": "hda",    "uuid": "5e6be367-02bc-4519-a464-506f4ffbcfc8"   }  },  "params": {   "__input_ext": "\"input\"",   "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "generate_log": "true",   "iterations": "\"0\"",   "keep_haplotypes": "false",   "meta": "false",   "min_overlap": "\"\"",   "mode_conditional": "{\"__current_case__\": 3, \"mode\": \"--pacbio-raw\"}",   "no_alt_contigs": "false",   "scaffold": "false"  },  "state": "error",  "stderr": "[2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1",  "tool_stderr": "[2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n",  "tool_stdout": "",  "update_time": "2025-04-29T13:26:35.500331",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1, exit_code: None, stderr: [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1, exit_code: None, stderr: [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1, exit_code: None, stderr: [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1, exit_code: None, stderr: [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1, exit_code: None, stderr: [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1, exit_code: None, stderr: [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:24:54] INFO: Configuring run\n[2025-04-29 13:24:54] INFO: Total read length: 7249289\n[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790\n[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000\n[2025-04-29 13:24:54] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:24:54] INFO: Assembling disjointigs\n[2025-04-29 13:24:54] INFO: Reading sequences\n[2025-04-29 13:25:02] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:17] INFO: Extending reads\n[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10\n[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Assembled 2 disjointigs\n[2025-04-29 13:26:20] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:20] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2025-04-29 13:26:21] INFO: Contained seqs: 0\n[2025-04-29 13:26:21] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:26:21] INFO: Running Minimap2\n[2025-04-29 13:26:22] INFO: Computing consensus\n[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km\u0027\n[2025-04-29 13:26:30] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:26:30] INFO: Building and resolving repeat graph\n[2025-04-29 13:26:30] INFO: Parsing disjointigs\n[2025-04-29 13:26:30] INFO: Building repeat graph\n0% 50% 100% \n[2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919\n[2025-04-29 13:26:31] INFO: Parsing reads\n[2025-04-29 13:26:31] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)\n[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431\n[2025-04-29 13:26:32] INFO: Mean edge coverage: 14\n[2025-04-29 13:26:32] INFO: Simplifying the graph\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:26:32] INFO: Generating contigs\n[2025-04-29 13:26:32] INFO: Reading sequences\n[2025-04-29 13:26:32] INFO: Generated 1 contigs\n[2025-04-29 13:26:32] INFO: Added 0 scaffold connections\n[2025-04-29 13:26:32] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:26:32] INFO: Assembly statistics:\n\n\tTotal length:\t419793\n\tFragments:\t1\n\tFragments N50:\t419793\n\tLargest frg:\t419793\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta\n." ], "status": "failure", "test_index": 0, "time_seconds": 166.46577620506287, "tool_id": "flye", "tool_version": "2.9.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-04-29 13:24:54] INFO: Starting Flye 2.9.5-b1801[2025-04-29 13:24:54] INFO: >>>STAGE: configure[2025-04-29 13:24:54] INFO: Configuring run[2025-04-29 13:24:54] INFO: Total read length: 7249289[2025-04-29 13:24:54] INFO: Reads N50/N90: 11150 / 5790[2025-04-29 13:24:54] INFO: Minimum overlap set to 6000[2025-04-29 13:24:54] INFO: >>>STAGE: assembly[2025-04-29 13:24:54] INFO: Assembling disjointigs[2025-04-29 13:24:54] INFO: Reading sequences[2025-04-29 13:25:02] INFO: Counting k-mers:0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:26:15] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:26:15] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:26:17] INFO: Extending reads[2025-04-29 13:26:20] INFO: Overlap-based coverage: 10[2025-04-29 13:26:20] INFO: Median overlap divergence: 0.2355840% 80% 90% 100% [2025-04-29 13:26:20] INFO: Assembled 2 disjointigs[2025-04-29 13:26:20] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:26:20] INFO: Filtering contained disjointigs0% 50% 100% [2025-04-29 13:26:21] INFO: Contained seqs: 0[2025-04-29 13:26:21] INFO: >>>STAGE: consensus[2025-04-29 13:26:21] INFO: Running Minimap2[2025-04-29 13:26:22] INFO: Computing consensus[2025-04-29 13:26:30] INFO: Alignment error rate: 0.196790Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/81/tmp/pymp-e54xq6km'[2025-04-29 13:26:30] INFO: >>>STAGE: repeat[2025-04-29 13:26:30] INFO: Building and resolving repeat graph[2025-04-29 13:26:30] INFO: Parsing disjointigs[2025-04-29 13:26:30] INFO: Building repeat graph0% 50% 100% [2025-04-29 13:26:31] INFO: Median overlap divergence: 0.0761919[2025-04-29 13:26:31] INFO: Parsing reads[2025-04-29 13:26:31] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:26:32] INFO: Aligned read sequence: 6325338 / 6471580 (0.977402)[2025-04-29 13:26:32] INFO: Median overlap divergence: 0.130431[2025-04-29 13:26:32] INFO: Mean edge coverage: 14[2025-04-29 13:26:32] INFO: Simplifying the graph[2025-04-29 13:26:32] INFO: >>>STAGE: contigger[2025-04-29 13:26:32] INFO: Generating contigs[2025-04-29 13:26:32] INFO: Reading sequences[2025-04-29 13:26:32] INFO: Generated 1 contigs[2025-04-29 13:26:32] INFO: Added 0 scaffold connections[2025-04-29 13:26:32] INFO: >>>STAGE: finalize[2025-04-29 13:26:32] INFO: Assembly statistics:Total length:419793Fragments:1Fragments N50:419793Largest frg:419793Scaffolds:0Mean coverage:14[2025-04-29 13:26:32] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/81/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #2)" name="1" time="133.42681550979614">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-04-29 13:27:03] INFO: Starting Flye 2.9.5-b1801[2025-04-29 13:27:03] INFO: >>>STAGE: configure[2025-04-29 13:27:03] INFO: Configuring run[2025-04-29 13:27:03] INFO: Total read length: 1466260[2025-04-29 13:27:03] INFO: Reads N50/N90: 9054 / 4697[2025-04-29 13:27:03] INFO: Minimum overlap set to 5000[2025-04-29 13:27:03] INFO: >>>STAGE: assembly[2025-04-29 13:27:03] INFO: Assembling disjointigs[2025-04-29 13:27:03] INFO: Reading sequences[2025-04-29 13:27:10] INFO: Counting k-mers:0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:28:22] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:28:22] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:28:27] INFO: Extending reads[2025-04-29 13:28:32] INFO: Overlap-based coverage: 42[2025-04-29 13:28:32] INFO: Median overlap divergence: 0.1056170% 90% 100% [2025-04-29 13:28:32] INFO: Assembled 1 disjointigs[2025-04-29 13:28:32] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:28:32] INFO: Filtering contained disjointigs0% 100% [2025-04-29 13:28:32] INFO: Contained seqs: 0[2025-04-29 13:28:32] INFO: >>>STAGE: consensus[2025-04-29 13:28:32] INFO: Running Minimap2[2025-04-29 13:28:33] INFO: Computing consensus[2025-04-29 13:28:34] INFO: Alignment error rate: 0.175120Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/83/tmp/pymp-eixdckz_'[2025-04-29 13:28:34] INFO: >>>STAGE: repeat[2025-04-29 13:28:34] INFO: Building and resolving repeat graph[2025-04-29 13:28:34] INFO: Parsing disjointigs[2025-04-29 13:28:34] INFO: Building repeat graph0% 100% [2025-04-29 13:28:34] INFO: Median overlap divergence: 0.0151003[2025-04-29 13:28:34] INFO: Parsing reads[2025-04-29 13:28:34] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:28:34] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)[2025-04-29 13:28:34] INFO: Median overlap divergence: 0.0550349[2025-04-29 13:28:34] INFO: Mean edge coverage: 33[2025-04-29 13:28:34] INFO: Simplifying the graph[2025-04-29 13:28:34] INFO: >>>STAGE: contigger[2025-04-29 13:28:34] INFO: Generating contigs[2025-04-29 13:28:34] INFO: Reading sequences[2025-04-29 13:28:34] INFO: Generated 3 contigs[2025-04-29 13:28:34] INFO: Added 0 scaffold connections[2025-04-29 13:28:35] INFO: >>>STAGE: finalize[2025-04-29 13:28:35] INFO: Assembly statistics:Total length:34929Fragments:3Fragments N50:21816Largest frg:21816Scaffolds:0Mean coverage:34[2025-04-29 13:28:35] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/83/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #3)" name="2" time="40.24869251251221">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 2, "time_seconds": 40.24869251251221, "tool_id": "flye", "tool_version": "2.9.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #4)" name="3" time="49.65845489501953">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 3, "time_seconds": 49.65845489501953, "tool_id": "flye", "tool_version": "2.9.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #5)" name="4" time="104.80725836753845">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "inputs": [   {    "id": "543ebd5ea2e44924",    "src": "hda"   },   {    "id": "f27f10274b7038c6",    "src": "hda"   },   {    "id": "d1cd7b0db551d22f",    "src": "hda"   },   {    "id": "5f94ef2c728352a1",    "src": "hda"   },   {    "id": "64a3b0c6f01c9f56",    "src": "hda"   },   {    "id": "32875d4f93647203",    "src": "hda"   },   {    "id": "723583168a5d0240",    "src": "hda"   },   {    "id": "eb35c35fd41aa362",    "src": "hda"   },   {    "id": "1d06dfe8c3587a4b",    "src": "hda"   }  ],  "min_overlap": "1000",  "mode_conditional|mode": "--nano-hq" }, "job": {  "command_line": "ln -sf \u0027/galaxy/server/database/objects/6/3/0/dataset_63084b3c-9dca-4976-98b4-2e636e68efb4.dat\u0027 ./input_0.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/8/5/4/dataset_854b3ddd-57a2-4fb8-a743-cd537be9fcd4.dat\u0027 ./input_1.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/0/0/0/dataset_00052c87-85e2-4c9e-8b5b-d12444c9a7d0.dat\u0027 ./input_2.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/6/3/c/dataset_63cfe536-51a5-4e33-964c-5bd5a6c065a1.dat\u0027 ./input_3.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/c/f/b/dataset_cfbfbbf4-d523-4da6-ac5d-066eb4d22352.dat\u0027 ./input_4.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/1/f/7/dataset_1f7691cc-361d-4d92-8c1b-d0e0cbf1433c.dat\u0027 ./input_5.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/6/d/7/dataset_6d70a4ea-000b-445e-96ce-cf6f25c20666.dat\u0027 ./input_6.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/e/2/9/dataset_e29dd1e0-6bf1-436b-9be5-29b6d02c3e0a.dat\u0027 ./input_7.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/c/8/6/dataset_c86ef78f-b876-47c5-811a-7b0820c5197e.dat\u0027 ./input_8.fastq.gz \u0026\u0026 flye --nano-hq ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz ./input_7.fastq.gz ./input_8.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 1 -m 1000",  "command_version": "2.9.5-b1801",  "copied_from_job_id": null,  "create_time": "2025-04-29T13:31:30.238619",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-nq6ln",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "3ba6da685856ac2a",  "inputs": {   "inputs": {    "id": "543ebd5ea2e44924",    "src": "hda",    "uuid": "63084b3c-9dca-4976-98b4-2e636e68efb4"   },   "inputs1": {    "id": "543ebd5ea2e44924",    "src": "hda",    "uuid": "63084b3c-9dca-4976-98b4-2e636e68efb4"   },   "inputs2": {    "id": "f27f10274b7038c6",    "src": "hda",    "uuid": "854b3ddd-57a2-4fb8-a743-cd537be9fcd4"   },   "inputs3": {    "id": "d1cd7b0db551d22f",    "src": "hda",    "uuid": "00052c87-85e2-4c9e-8b5b-d12444c9a7d0"   },   "inputs4": {    "id": "5f94ef2c728352a1",    "src": "hda",    "uuid": "63cfe536-51a5-4e33-964c-5bd5a6c065a1"   },   "inputs5": {    "id": "64a3b0c6f01c9f56",    "src": "hda",    "uuid": "cfbfbbf4-d523-4da6-ac5d-066eb4d22352"   },   "inputs6": {    "id": "32875d4f93647203",    "src": "hda",    "uuid": "1f7691cc-361d-4d92-8c1b-d0e0cbf1433c"   },   "inputs7": {    "id": "723583168a5d0240",    "src": "hda",    "uuid": "6d70a4ea-000b-445e-96ce-cf6f25c20666"   },   "inputs8": {    "id": "eb35c35fd41aa362",    "src": "hda",    "uuid": "e29dd1e0-6bf1-436b-9be5-29b6d02c3e0a"   },   "inputs9": {    "id": "1d06dfe8c3587a4b",    "src": "hda",    "uuid": "c86ef78f-b876-47c5-811a-7b0820c5197e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "18.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "18 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1745933510.0000000",    "title": "Job End Time",    "value": "2025-04-29 13:31:50"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1745933492.0000000",    "title": "Job Start Time",    "value": "2025-04-29 13:31:32"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "51539.0000000",    "title": "Memory Allocated (MB)",    "value": "51539"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "assembly_gfa": {    "id": "99b3b86a25ab65b9",    "src": "hda",    "uuid": "813a39eb-26bb-4ba5-b935-5c6cd68347f5"   },   "assembly_graph": {    "id": "5923417548d15ecd",    "src": "hda",    "uuid": "ec1aa7c6-e570-4a0b-9a4c-57b696d2e34f"   },   "assembly_info": {    "id": "d5a26272fcbd0276",    "src": "hda",    "uuid": "4bb1b147-d02f-43c3-9653-68f71c9844d0"   },   "consensus": {    "id": "799de1f3d3ace777",    "src": "hda",    "uuid": "83ed81a9-3e01-4b46-9a04-9de87fead11c"   }  },  "params": {   "__input_ext": "\"input\"",   "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "generate_log": "false",   "iterations": "\"1\"",   "keep_haplotypes": "false",   "meta": "false",   "min_overlap": "\"1000\"",   "mode_conditional": "{\"__current_case__\": 2, \"mode\": \"--nano-hq\"}",   "no_alt_contigs": "false",   "scaffold": "false"  },  "state": "ok",  "stderr": "[2025-04-29 13:31:33] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:31:33] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:31:33] INFO: Configuring run\n[2025-04-29 13:31:33] INFO: Total read length: 6522170\n[2025-04-29 13:31:33] INFO: Reads N50/N90: 2706 / 1386\n[2025-04-29 13:31:33] INFO: Selected minimum overlap: 1000\n[2025-04-29 13:31:33] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:31:33] INFO: Assembling disjointigs\n[2025-04-29 13:31:33] INFO: Reading sequences\n[2025-04-29 13:31:33] INFO: Building minimizer index\n[2025-04-29 13:31:33] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:33] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:34] INFO: Extending reads\n[2025-04-29 13:31:37] INFO: Overlap-based coverage: 12\n[2025-04-29 13:31:37] INFO: Median overlap divergence: 0.0135674\n0% 20% 30% 40% 60% 90% 100% \n[2025-04-29 13:31:38] INFO: Assembled 9 disjointigs\n[2025-04-29 13:31:38] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:38] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-04-29 13:31:38] INFO: Contained seqs: 0\n[2025-04-29 13:31:38] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:31:38] INFO: Running Minimap2\n[2025-04-29 13:31:39] INFO: Computing consensus\n[2025-04-29 13:31:40] INFO: Alignment error rate: 0.018042\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/109/tmp/pymp-8jfoh84k\u0027\n[2025-04-29 13:31:40] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:31:40] INFO: Building and resolving repeat graph\n[2025-04-29 13:31:40] INFO: Parsing disjointigs\n[2025-04-29 13:31:40] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-04-29 13:31:40] INFO: Median overlap divergence: 0.00102407\n[2025-04-29 13:31:41] INFO: Parsing reads\n[2025-04-29 13:31:41] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:41] INFO: Aligned read sequence: 6392932 / 6522170 (0.980185)\n[2025-04-29 13:31:41] INFO: Median overlap divergence: 0.00691444\n[2025-04-29 13:31:41] INFO: Mean edge coverage: 14\n[2025-04-29 13:31:41] INFO: Simplifying the graph\n[2025-04-29 13:31:41] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:31:41] INFO: Generating contigs\n[2025-04-29 13:31:41] INFO: Reading sequences\n[2025-04-29 13:31:41] INFO: Generated 7 contigs\n[2025-04-29 13:31:41] INFO: Added 0 scaffold connections\n[2025-04-29 13:31:42] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-04-29 13:31:42] INFO: Polishing genome (1/1)\n[2025-04-29 13:31:42] INFO: Running minimap2\n[2025-04-29 13:31:42] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/109/tmp/pymp-038emefs\u0027\n[2025-04-29 13:31:44] INFO: Alignment error rate: 0.009997\n[2025-04-29 13:31:44] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/109/tmp/pymp-jf24bfmp\u0027\n[2025-04-29 13:31:50] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:31:50] INFO: Assembly statistics:\n\n\tTotal length:\t421567\n\tFragments:\t7\n\tFragments N50:\t78934\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t15\n\n[2025-04-29 13:31:50] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/109/working/out_dir/assembly.fasta\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy1",  "tool_stderr": "[2025-04-29 13:31:33] INFO: Starting Flye 2.9.5-b1801\n[2025-04-29 13:31:33] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-04-29 13:31:33] INFO: Configuring run\n[2025-04-29 13:31:33] INFO: Total read length: 6522170\n[2025-04-29 13:31:33] INFO: Reads N50/N90: 2706 / 1386\n[2025-04-29 13:31:33] INFO: Selected minimum overlap: 1000\n[2025-04-29 13:31:33] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-04-29 13:31:33] INFO: Assembling disjointigs\n[2025-04-29 13:31:33] INFO: Reading sequences\n[2025-04-29 13:31:33] INFO: Building minimizer index\n[2025-04-29 13:31:33] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:33] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:34] INFO: Extending reads\n[2025-04-29 13:31:37] INFO: Overlap-based coverage: 12\n[2025-04-29 13:31:37] INFO: Median overlap divergence: 0.0135674\n0% 20% 30% 40% 60% 90% 100% \n[2025-04-29 13:31:38] INFO: Assembled 9 disjointigs\n[2025-04-29 13:31:38] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:38] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-04-29 13:31:38] INFO: Contained seqs: 0\n[2025-04-29 13:31:38] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-04-29 13:31:38] INFO: Running Minimap2\n[2025-04-29 13:31:39] INFO: Computing consensus\n[2025-04-29 13:31:40] INFO: Alignment error rate: 0.018042\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/109/tmp/pymp-8jfoh84k\u0027\n[2025-04-29 13:31:40] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-04-29 13:31:40] INFO: Building and resolving repeat graph\n[2025-04-29 13:31:40] INFO: Parsing disjointigs\n[2025-04-29 13:31:40] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-04-29 13:31:40] INFO: Median overlap divergence: 0.00102407\n[2025-04-29 13:31:41] INFO: Parsing reads\n[2025-04-29 13:31:41] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-04-29 13:31:41] INFO: Aligned read sequence: 6392932 / 6522170 (0.980185)\n[2025-04-29 13:31:41] INFO: Median overlap divergence: 0.00691444\n[2025-04-29 13:31:41] INFO: Mean edge coverage: 14\n[2025-04-29 13:31:41] INFO: Simplifying the graph\n[2025-04-29 13:31:41] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-04-29 13:31:41] INFO: Generating contigs\n[2025-04-29 13:31:41] INFO: Reading sequences\n[2025-04-29 13:31:41] INFO: Generated 7 contigs\n[2025-04-29 13:31:41] INFO: Added 0 scaffold connections\n[2025-04-29 13:31:42] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-04-29 13:31:42] INFO: Polishing genome (1/1)\n[2025-04-29 13:31:42] INFO: Running minimap2\n[2025-04-29 13:31:42] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/109/tmp/pymp-038emefs\u0027\n[2025-04-29 13:31:44] INFO: Alignment error rate: 0.009997\n[2025-04-29 13:31:44] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/109/tmp/pymp-jf24bfmp\u0027\n[2025-04-29 13:31:50] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-04-29 13:31:50] INFO: Assembly statistics:\n\n\tTotal length:\t421567\n\tFragments:\t7\n\tFragments N50:\t78934\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t15\n\n[2025-04-29 13:31:50] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/109/working/out_dir/assembly.fasta\n",  "tool_stdout": "",  "update_time": "2025-04-29T13:32:03.505444",  "user_email": "tests@fake.org" }, "output_problems": [  "Output assembly_graph:  different than expected\nExpected file size of 1248+-100 found 1891",  "Output assembly_gfa:  different than expected\nExpected file size of 419414+-1000 found 418228",  "Output consensus:  different than expected\nExpected file size of 426277+-1000 found 428667" ], "status": "failure", "test_index": 4, "time_seconds": 104.80725836753845, "tool_id": "flye", "tool_version": "2.9.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-04-29 13:31:33] INFO: Starting Flye 2.9.5-b1801[2025-04-29 13:31:33] INFO: >>>STAGE: configure[2025-04-29 13:31:33] INFO: Configuring run[2025-04-29 13:31:33] INFO: Total read length: 6522170[2025-04-29 13:31:33] INFO: Reads N50/N90: 2706 / 1386[2025-04-29 13:31:33] INFO: Selected minimum overlap: 1000[2025-04-29 13:31:33] INFO: >>>STAGE: assembly[2025-04-29 13:31:33] INFO: Assembling disjointigs[2025-04-29 13:31:33] INFO: Reading sequences[2025-04-29 13:31:33] INFO: Building minimizer index[2025-04-29 13:31:33] INFO: Pre-calculating index storage0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:31:33] INFO: Filling index0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:31:34] INFO: Extending reads[2025-04-29 13:31:37] INFO: Overlap-based coverage: 12[2025-04-29 13:31:37] INFO: Median overlap divergence: 0.01356740% 20% 30% 40% 60% 90% 100% [2025-04-29 13:31:38] INFO: Assembled 9 disjointigs[2025-04-29 13:31:38] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:31:38] INFO: Filtering contained disjointigs0% 10% 20% 30% 40% 50% 60% 70% 80% 100% [2025-04-29 13:31:38] INFO: Contained seqs: 0[2025-04-29 13:31:38] INFO: >>>STAGE: consensus[2025-04-29 13:31:38] INFO: Running Minimap2[2025-04-29 13:31:39] INFO: Computing consensus[2025-04-29 13:31:40] INFO: Alignment error rate: 0.018042Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/109/tmp/pymp-8jfoh84k'[2025-04-29 13:31:40] INFO: >>>STAGE: repeat[2025-04-29 13:31:40] INFO: Building and resolving repeat graph[2025-04-29 13:31:40] INFO: Parsing disjointigs[2025-04-29 13:31:40] INFO: Building repeat graph0% 10% 20% 30% 40% 50% 60% 70% 80% 100% [2025-04-29 13:31:40] INFO: Median overlap divergence: 0.00102407[2025-04-29 13:31:41] INFO: Parsing reads[2025-04-29 13:31:41] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:31:41] INFO: Aligned read sequence: 6392932 / 6522170 (0.980185)[2025-04-29 13:31:41] INFO: Median overlap divergence: 0.00691444[2025-04-29 13:31:41] INFO: Mean edge coverage: 14[2025-04-29 13:31:41] INFO: Simplifying the graph[2025-04-29 13:31:41] INFO: >>>STAGE: contigger[2025-04-29 13:31:41] INFO: Generating contigs[2025-04-29 13:31:41] INFO: Reading sequences[2025-04-29 13:31:41] INFO: Generated 7 contigs[2025-04-29 13:31:41] INFO: Added 0 scaffold connections[2025-04-29 13:31:42] INFO: >>>STAGE: polishing[2025-04-29 13:31:42] INFO: Polishing genome (1/1)[2025-04-29 13:31:42] INFO: Running minimap2[2025-04-29 13:31:42] INFO: Separating alignment into bubblesTraceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/109/tmp/pymp-038emefs'[2025-04-29 13:31:44] INFO: Alignment error rate: 0.009997[2025-04-29 13:31:44] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/109/tmp/pymp-jf24bfmp'[2025-04-29 13:31:50] INFO: >>>STAGE: finalize[2025-04-29 13:31:50] INFO: Assembly statistics:Total length:421567Fragments:7Fragments N50:78934Largest frg:147964Scaffolds:0Mean coverage:15[2025-04-29 13:31:50] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/109/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #6)" name="5" time="100.96179103851318">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-04-29 13:33:16] INFO: Starting Flye 2.9.5-b1801[2025-04-29 13:33:16] INFO: >>>STAGE: configure[2025-04-29 13:33:16] INFO: Configuring run[2025-04-29 13:33:16] INFO: Total read length: 6522170[2025-04-29 13:33:16] INFO: Reads N50/N90: 2706 / 1386[2025-04-29 13:33:16] INFO: Selected minimum overlap: 1000[2025-04-29 13:33:16] INFO: >>>STAGE: assembly[2025-04-29 13:33:16] INFO: Assembling disjointigs[2025-04-29 13:33:16] INFO: Reading sequences[2025-04-29 13:33:17] INFO: Building minimizer index[2025-04-29 13:33:17] INFO: Pre-calculating index storage0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:33:17] INFO: Filling index0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:33:17] INFO: Extending reads[2025-04-29 13:33:21] INFO: Overlap-based coverage: 12[2025-04-29 13:33:21] INFO: Median overlap divergence: 0.01356740% 20% 30% 40% 70% 80% 90% 100% [2025-04-29 13:33:21] INFO: Assembled 12 disjointigs[2025-04-29 13:33:21] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:33:21] INFO: Filtering contained disjointigs0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:33:21] INFO: Contained seqs: 0[2025-04-29 13:33:22] INFO: >>>STAGE: consensus[2025-04-29 13:33:22] INFO: Running Minimap2[2025-04-29 13:33:22] INFO: Computing consensus[2025-04-29 13:33:24] INFO: Alignment error rate: 0.018218Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/119/tmp/pymp-sg37al5v'[2025-04-29 13:33:24] INFO: >>>STAGE: repeat[2025-04-29 13:33:24] INFO: Building and resolving repeat graph[2025-04-29 13:33:24] INFO: Parsing disjointigs[2025-04-29 13:33:24] INFO: Building repeat graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:33:24] INFO: Median overlap divergence: 0.00328407[2025-04-29 13:33:24] INFO: Parsing reads[2025-04-29 13:33:24] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:33:25] INFO: Aligned read sequence: 6399278 / 6522170 (0.981158)[2025-04-29 13:33:25] INFO: Median overlap divergence: 0.00694442[2025-04-29 13:33:25] INFO: Mean edge coverage: 14[2025-04-29 13:33:25] INFO: Simplifying the graph[2025-04-29 13:33:25] INFO: >>>STAGE: contigger[2025-04-29 13:33:25] INFO: Generating contigs[2025-04-29 13:33:25] INFO: Reading sequences[2025-04-29 13:33:25] INFO: Generated 5 contigs[2025-04-29 13:33:25] INFO: Added 0 scaffold connections[2025-04-29 13:33:25] INFO: >>>STAGE: polishing[2025-04-29 13:33:25] INFO: Polishing genome (1/1)[2025-04-29 13:33:25] INFO: Running minimap2[2025-04-29 13:33:26] INFO: Separating alignment into bubblesTraceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/119/tmp/pymp-v4b8lx99'[2025-04-29 13:33:28] INFO: Alignment error rate: 0.009889[2025-04-29 13:33:28] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/119/tmp/pymp-gmod99wy'[2025-04-29 13:33:29] INFO: >>>STAGE: finalize[2025-04-29 13:33:29] INFO: Assembly statistics:Total length:418251Fragments:5Fragments N50:90297Largest frg:147964Scaffolds:0Mean coverage:16[2025-04-29 13:33:29] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/119/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #7)" name="6" time="58.61419630050659">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 6, "time_seconds": 58.61419630050659, "tool_id": "flye", "tool_version": "2.9.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #8)" name="7" time="39.71663951873779">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 7, "time_seconds": 39.71663951873779, "tool_id": "flye", "tool_version": "2.9.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #9)" name="8" time="150.5419807434082">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-04-29 13:36:08] INFO: Starting Flye 2.9.5-b1801[2025-04-29 13:36:08] INFO: >>>STAGE: configure[2025-04-29 13:36:08] INFO: Configuring run[2025-04-29 13:36:08] INFO: Total read length: 1466260[2025-04-29 13:36:08] INFO: Reads N50/N90: 9054 / 4697[2025-04-29 13:36:08] INFO: Minimum overlap set to 5000[2025-04-29 13:36:08] INFO: >>>STAGE: assembly[2025-04-29 13:36:08] INFO: Assembling disjointigs[2025-04-29 13:36:08] INFO: Reading sequences[2025-04-29 13:36:15] INFO: Counting k-mers:0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:37:27] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:37:27] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:37:32] INFO: Extending reads[2025-04-29 13:37:37] INFO: Overlap-based coverage: 42[2025-04-29 13:37:37] INFO: Median overlap divergence: 0.1056170% 90% 100% [2025-04-29 13:37:37] INFO: Assembled 1 disjointigs[2025-04-29 13:37:37] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:37:38] INFO: Filtering contained disjointigs0% 100% [2025-04-29 13:37:38] INFO: Contained seqs: 0[2025-04-29 13:37:38] INFO: >>>STAGE: consensus[2025-04-29 13:37:38] INFO: Running Minimap2[2025-04-29 13:37:38] INFO: Computing consensus[2025-04-29 13:37:39] INFO: Alignment error rate: 0.175120Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/139/tmp/pymp-aurk7wgx'[2025-04-29 13:37:39] INFO: >>>STAGE: repeat[2025-04-29 13:37:39] INFO: Building and resolving repeat graph[2025-04-29 13:37:39] INFO: Parsing disjointigs[2025-04-29 13:37:39] INFO: Building repeat graph0% 100% [2025-04-29 13:37:39] INFO: Median overlap divergence: 0.0151003[2025-04-29 13:37:39] INFO: Parsing reads[2025-04-29 13:37:39] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-04-29 13:37:40] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)[2025-04-29 13:37:40] INFO: Median overlap divergence: 0.0550349[2025-04-29 13:37:40] INFO: Mean edge coverage: 33[2025-04-29 13:37:40] INFO: Simplifying the graph[2025-04-29 13:37:40] INFO: >>>STAGE: contigger[2025-04-29 13:37:40] INFO: Generating contigs[2025-04-29 13:37:40] INFO: Reading sequences[2025-04-29 13:37:40] INFO: Generated 1 contigs[2025-04-29 13:37:40] INFO: Added 0 scaffold connections[2025-04-29 13:37:40] INFO: >>>STAGE: finalize[2025-04-29 13:37:40] INFO: Assembly statistics:Total length:5027Fragments:1Fragments N50:5027Largest frg:5027Scaffolds:0Mean coverage:95[2025-04-29 13:37:40] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/139/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #1)" name="0" time="56.842007875442505">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Calculating Z arrays for bucket 2  bucket 1: 10%  Reserving size (126) for bucket 3Getting block 4 of 60  bucket 1: 20%  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 4  bucket 1: 30%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 40%  Entering block accumulator loop for bucket 3:Getting block 5 of 60  bucket 3: 10%  bucket 2: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 1: 50%Getting block 6 of 60  bucket 2: 20%  Reserving size (126) for bucket 5  Reserving size (126) for bucket 6  Calculating Z arrays for bucket 6  bucket 1: 60%  bucket 4: 10%  Calculating Z arrays for bucket 5  bucket 2: 30%  bucket 1: 70%  bucket 3: 30%  Entering block accumulator loop for bucket 6:  bucket 2: 40%  bucket 4: 20%Getting block 7 of 60  bucket 2: 50%  bucket 6: 10%  Reserving size (126) for bucket 7  bucket 1: 80%  bucket 4: 30%Getting block 8 of 60  Calculating Z arrays for bucket 7  bucket 6: 20%  Reserving size (126) for bucket 8  bucket 3: 40%  bucket 4: 40%  Entering block accumulator loop for bucket 5:  bucket 3: 50%  bucket 1: 90%  bucket 6: 30%  bucket 2: 60%  bucket 1: 100%  bucket 3: 60%  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  bucket 5: 10%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 6: 40%  Entering block accumulator loop for bucket 8:  bucket 5: 20%  bucket 3: 70%  bucket 4: 50%  bucket 2: 80%  bucket 3: 80%  bucket 6: 50%  bucket 5: 30%  bucket 3: 90%  bucket 2: 90%  bucket 4: 60%  bucket 3: 100%  bucket 6: 60%  bucket 8: 10%  bucket 5: 40%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 10%  bucket 8: 20%  bucket 5: 50%  bucket 4: 70%  bucket 2: 100%  bucket 7: 20%  bucket 8: 30%  bucket 5: 60%  bucket 6: 70%  Sorting block of length 84 for bucket 2  bucket 5: 70%  (Using difference cover)  bucket 8: 40%  bucket 4: 80%  bucket 7: 30%  bucket 5: 80%  bucket 6: 80%  bucket 4: 90%  bucket 8: 50%  bucket 5: 90%  bucket 7: 40%  bucket 8: 60%  Sorting block time: 00:00:00  bucket 6: 90%  bucket 5: 100%  bucket 4: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)Returning block of 43 for bucket 1  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 50%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 70%  bucket 7: 60%  bucket 8: 80%  bucket 8: 90%  bucket 7: 70%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  bucket 9: 20%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 10: 10%  bucket 9: 50%  Entering block accumulator loop for bucket 11:  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 11: 10%  bucket 9: 70%  bucket 10: 40%  bucket 11: 20%  bucket 9: 80%  bucket 10: 50%  bucket 11: 30%  bucket 9: 90%  bucket 10: 60%  bucket 11: 40%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 124 for bucket 9  bucket 11: 50%  (Using difference cover)  bucket 10: 80%  bucket 11: 60%  bucket 10: 90%  bucket 11: 70%  bucket 11: 80%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  bucket 12: 10%  Entering block accumulator loop for bucket 13:  bucket 12: 20%  bucket 12: 30%  bucket 13: 10%  bucket 12: 40%  bucket 12: 50%  bucket 13: 20%  bucket 12: 60%  bucket 13: 30%  bucket 12: 70%  bucket 12: 80%  bucket 13: 40%  bucket 12: 90%  bucket 12: 100%  bucket 13: 50%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 15: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 17: 20%  bucket 16: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 16: 30%  bucket 17: 60%  bucket 16: 40%  bucket 17: 70%  bucket 16: 50%  bucket 17: 80%  bucket 16: 60%  bucket 17: 90%  bucket 16: 70%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%Getting block 19 of 60  Reserving size (126) for bucket 19  bucket 18: 20%  Calculating Z arrays for bucket 19  bucket 18: 30%  Entering block accumulator loop for bucket 19:  bucket 18: 40%  bucket 19: 10%  bucket 18: 50%  bucket 19: 20%  bucket 18: 60%  bucket 19: 30%  bucket 18: 70%  bucket 19: 40%  bucket 18: 80%  bucket 19: 50%  bucket 18: 90%  bucket 19: 60%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 24: 30%  bucket 23: 40%  bucket 24: 40%  bucket 23: 50%  bucket 24: 50%  bucket 23: 60%  bucket 24: 60%  bucket 23: 70%  bucket 24: 70%  bucket 23: 80%  bucket 24: 80%  bucket 23: 90%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 25: 30%  bucket 26: 20%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 25: 70%  bucket 26: 50%  bucket 25: 80%  bucket 26: 60%  bucket 25: 90%  bucket 26: 70%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 27:  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 27: 10%  bucket 28: 20%  bucket 29: 10%  bucket 27: 20%  bucket 29: 20%  bucket 27: 30%  bucket 28: 30%  bucket 29: 30%  bucket 27: 40%  bucket 28: 40%  bucket 29: 40%  bucket 27: 50%  bucket 28: 50%  bucket 29: 50%  bucket 27: 60%  bucket 28: 60%  bucket 29: 60%  bucket 28: 70%  bucket 27: 70%  bucket 29: 70%  bucket 28: 80%  bucket 27: 80%  bucket 28: 90%  bucket 29: 80%  bucket 27: 90%  bucket 28: 100%  bucket 29: 90%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Entering block accumulator loop for bucket 31:  Calculating Z arrays for bucket 32  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 31: 20%  bucket 32: 10%  bucket 31: 30%  bucket 31: 40%  bucket 32: 20%  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 32: 40%  bucket 31: 70%  bucket 32: 50%  bucket 31: 80%  bucket 32: 60%  bucket 32: 70%  bucket 31: 90%  bucket 32: 80%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 20%  bucket 35: 30%  Entering block accumulator loop for bucket 36:  bucket 35: 40%  bucket 36: 10%  bucket 35: 50%  bucket 35: 60%  bucket 36: 20%  bucket 35: 70%  bucket 36: 30%  bucket 35: 80%  bucket 36: 40%  bucket 35: 90%  bucket 36: 50%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 38:  bucket 37: 10%  bucket 38: 10%  bucket 37: 20%  bucket 37: 30%  bucket 38: 20%  bucket 37: 40%  bucket 38: 30%  bucket 37: 50%  bucket 38: 40%  bucket 37: 60%  bucket 38: 50%  bucket 37: 70%  bucket 38: 60%  bucket 37: 80%  bucket 38: 70%  bucket 37: 90%  bucket 38: 80%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 40: 30%  bucket 39: 60%  bucket 40: 40%  bucket 39: 70%  bucket 40: 50%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 40: 70%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 41: 50%  bucket 42: 30%  bucket 41: 60%  bucket 42: 40%  bucket 41: 70%  bucket 42: 50%  bucket 41: 80%  bucket 42: 60%  bucket 41: 90%  bucket 42: 70%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  Entering block accumulator loop for bucket 44:  bucket 43: 10%  bucket 44: 10%  bucket 43: 20%  bucket 44: 20%  bucket 43: 30%  bucket 44: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 44: 40%  bucket 43: 70%  bucket 44: 50%  bucket 43: 80%  bucket 44: 60%  bucket 43: 90%  bucket 44: 70%  bucket 44: 80%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 10%  bucket 45: 20%  Entering block accumulator loop for bucket 46:  bucket 45: 30%  bucket 46: 10%  bucket 45: 40%  bucket 46: 20%  bucket 46: 30%  bucket 45: 50%  bucket 46: 40%  bucket 45: 60%  bucket 46: 50%  bucket 46: 60%  bucket 45: 70%  bucket 46: 70%  bucket 45: 80%  bucket 46: 80%  bucket 46: 90%  bucket 45: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%Getting block 48 of 60  Reserving size (126) for bucket 48  bucket 47: 20%  Calculating Z arrays for bucket 48  bucket 47: 30%  bucket 47: 40%  Entering block accumulator loop for bucket 48:  bucket 47: 50%  bucket 47: 60%  bucket 48: 10%  bucket 47: 70%  bucket 48: 20%  bucket 47: 80%  bucket 48: 30%  bucket 47: 90%  bucket 48: 40%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block time: 00:00:00  Sorting block of length 113 for bucket 48  (Using difference cover)Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 50:  bucket 49: 10%  bucket 50: 10%  bucket 49: 20%  bucket 50: 20%  bucket 49: 30%  bucket 50: 30%  bucket 49: 40%  bucket 50: 40%  bucket 49: 50%  bucket 50: 50%  bucket 50: 60%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 50: 70%  bucket 49: 90%  bucket 50: 80%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:Getting block 53 of 60  bucket 52: 10%  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 20%  bucket 52: 30%  Entering block accumulator loop for bucket 53:  bucket 52: 40%  bucket 53: 10%  bucket 52: 50%  bucket 53: 20%  bucket 52: 60%  bucket 52: 70%  bucket 53: 30%  bucket 52: 80%  bucket 53: 40%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 54: 10%  bucket 55: 20%  bucket 54: 20%  bucket 55: 30%  bucket 55: 40%  bucket 54: 30%  bucket 55: 50%  bucket 55: 60%  bucket 54: 40%  bucket 55: 70%  bucket 54: 50%  bucket 55: 80%  bucket 55: 90%  bucket 54: 60%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 20%  bucket 57: 30%  Entering block accumulator loop for bucket 58:  bucket 57: 40%  bucket 58: 10%  bucket 57: 50%  bucket 58: 20%  bucket 57: 60%  bucket 58: 30%  bucket 57: 70%  bucket 58: 40%  bucket 57: 80%  bucket 58: 50%  bucket 57: 90%  bucket 58: 60%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 40%  Entering block accumulator loop for bucket 60:  bucket 59: 50%  bucket 60: 10%  bucket 59: 60%  bucket 60: 20%  bucket 59: 70%  bucket 60: 30%  bucket 60: 40%  bucket 59: 80%  bucket 60: 50%  bucket 59: 90%  bucket 60: 60%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #2)" name="1" time="13.547008037567139">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 1, "time_seconds": 13.547008037567139, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #11)" name="10" time="40.813353300094604">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 10%  Calculating Z arrays for bucket 4Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 3:  bucket 1: 20%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 4:  bucket 1: 30%  Entering block accumulator loop for bucket 2:  bucket 1: 40%  bucket 3: 10%  bucket 4: 10%  bucket 1: 50%Getting block 6 of 60  Entering block accumulator loop for bucket 5:  Reserving size (126) for bucket 6  bucket 1: 60%Getting block 7 of 60  bucket 1: 70%  Reserving size (126) for bucket 7  bucket 4: 20%  bucket 5: 10%  Calculating Z arrays for bucket 6  bucket 3: 20%  bucket 1: 80%Getting block 8 of 60  bucket 4: 30%  bucket 3: 30%  bucket 2: 10%  Entering block accumulator loop for bucket 6:  bucket 3: 40%  bucket 1: 90%  bucket 5: 20%  bucket 4: 40%  bucket 3: 50%  bucket 1: 100%  bucket 2: 20%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 5: 30%  bucket 6: 10%  bucket 2: 30%  bucket 3: 60%  Calculating Z arrays for bucket 7  bucket 4: 50%  bucket 5: 40%  Reserving size (126) for bucket 8  bucket 2: 40%  bucket 6: 20%  Calculating Z arrays for bucket 8  bucket 4: 60%  bucket 5: 50%  bucket 2: 50%  bucket 3: 70%  bucket 6: 30%  Entering block accumulator loop for bucket 7:  bucket 3: 80%  bucket 4: 70%  bucket 2: 60%  bucket 5: 60%  bucket 3: 90%  bucket 7: 10%  bucket 4: 80%  bucket 2: 70%  bucket 6: 40%  bucket 3: 100%  bucket 5: 70%  bucket 4: 90%  bucket 6: 50%  bucket 7: 20%  bucket 4: 100%  bucket 6: 60%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 2: 80%  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 8:Returning block of 43 for bucket 1  bucket 7: 30%  bucket 5: 80%  bucket 6: 70%  bucket 8: 10%  bucket 2: 90%  bucket 7: 40%  bucket 5: 90%  bucket 8: 20%  bucket 7: 50%  bucket 6: 80%  bucket 5: 100%  bucket 2: 100%  bucket 8: 30%  bucket 7: 60%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 63 for bucket 5  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 6: 90%  (Using difference cover)  bucket 7: 80%  bucket 8: 60%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  bucket 10: 90%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  Entering block accumulator loop for bucket 12:  bucket 11: 60%  bucket 11: 70%  bucket 12: 10%  bucket 11: 80%  bucket 12: 20%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  Entering block accumulator loop for bucket 14:  bucket 13: 70%  bucket 13: 80%  bucket 14: 10%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  Sorting block time: 00:00:00  bucket 14: 100%Returning block of 86 for bucket 13  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 15: 10%  bucket 16: 20%  bucket 15: 20%  bucket 16: 30%  bucket 15: 30%  bucket 16: 40%  bucket 15: 40%  bucket 16: 50%  bucket 15: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 15: 60%  bucket 16: 90%  bucket 15: 70%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 17  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  bucket 19: 30%  Entering block accumulator loop for bucket 20:  bucket 19: 40%  bucket 19: 50%  bucket 20: 10%  bucket 19: 60%  bucket 19: 70%  bucket 20: 20%  bucket 19: 80%  bucket 20: 30%  bucket 19: 90%  bucket 20: 40%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  Sorting block time: 00:00:00Returning block of 108 for bucket 19  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%Getting block 23 of 60  bucket 22: 20%  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 30%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 22: 40%  Entering block accumulator loop for bucket 23:  bucket 22: 50%  Entering block accumulator loop for bucket 24:  bucket 22: 60%  bucket 23: 10%  bucket 24: 10%  bucket 22: 70%  bucket 22: 80%  bucket 24: 20%  bucket 23: 20%  bucket 22: 90%  bucket 24: 30%  bucket 23: 30%  bucket 22: 100%  bucket 24: 40%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 40%  bucket 24: 50%  bucket 24: 60%  bucket 23: 50%  bucket 24: 70%  bucket 23: 60%  bucket 24: 80%  bucket 24: 90%  bucket 23: 70%  bucket 24: 100%  bucket 23: 80%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 23: 90%  Sorting block time: 00:00:00Returning block of 81 for bucket 22  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 26: 20%  bucket 25: 30%  bucket 26: 30%  bucket 25: 40%  bucket 26: 40%  bucket 25: 50%  bucket 26: 50%  bucket 25: 60%  bucket 26: 60%  bucket 26: 70%  bucket 25: 70%  bucket 26: 80%  bucket 25: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 27: 10%  bucket 28: 20%  bucket 27: 20%  bucket 28: 30%  bucket 28: 40%  bucket 27: 30%  bucket 28: 50%  bucket 27: 40%  bucket 28: 60%  bucket 27: 50%  bucket 28: 70%  bucket 27: 60%  bucket 28: 80%  bucket 28: 90%  bucket 27: 70%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 29: 80%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%Getting block 33 of 60  Reserving size (126) for bucket 33  bucket 32: 30%  Calculating Z arrays for bucket 33  bucket 32: 40%  bucket 32: 50%  Entering block accumulator loop for bucket 33:  bucket 32: 60%  bucket 33: 10%  bucket 32: 70%  bucket 33: 20%  bucket 32: 80%  bucket 33: 30%  bucket 32: 90%  bucket 33: 40%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 10%  bucket 34: 20%  Entering block accumulator loop for bucket 35:  bucket 34: 30%  bucket 35: 10%  bucket 34: 40%  bucket 35: 20%  bucket 34: 50%  bucket 35: 30%  bucket 34: 60%  bucket 35: 40%  bucket 34: 70%  bucket 35: 50%  bucket 34: 80%  bucket 35: 60%  bucket 34: 90%  bucket 35: 70%  bucket 34: 100%  bucket 35: 80%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 38:  bucket 37: 10%  bucket 38: 10%  bucket 37: 20%  bucket 38: 20%  bucket 37: 30%  bucket 38: 30%  bucket 37: 40%  bucket 37: 50%  bucket 38: 40%  bucket 37: 60%  bucket 38: 50%  bucket 37: 70%  bucket 38: 60%  bucket 37: 80%  bucket 38: 70%  bucket 37: 90%  bucket 38: 80%  bucket 37: 100%  bucket 38: 90%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 40: 50%  bucket 39: 70%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 39: 100%  bucket 40: 70%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 30%  bucket 42: 40%  Entering block accumulator loop for bucket 43:  bucket 42: 50%  bucket 43: 10%  bucket 42: 60%  bucket 43: 20%  bucket 42: 70%  bucket 43: 30%  bucket 42: 80%  bucket 43: 40%  bucket 42: 90%  bucket 43: 50%  bucket 42: 100%  bucket 43: 60%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  bucket 44: 10%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  bucket 44: 30%  bucket 45: 10%  bucket 44: 40%  bucket 45: 20%  bucket 44: 50%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 45: 40%  bucket 44: 80%  bucket 45: 50%  bucket 45: 60%  bucket 44: 90%  bucket 44: 100%  bucket 45: 70%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  Entering block accumulator loop for bucket 48:  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  Sorting block time: 00:00:00Returning block of 84 for bucket 47  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 10%  bucket 49: 20%  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 49: 30%  bucket 50: 20%  bucket 49: 40%  bucket 50: 30%  bucket 49: 50%  bucket 50: 40%  bucket 49: 60%  bucket 50: 50%  bucket 50: 60%  bucket 49: 70%  bucket 50: 70%  bucket 49: 80%  bucket 50: 80%  bucket 50: 90%  bucket 49: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 53: 10%  bucket 52: 30%  bucket 53: 20%  bucket 52: 40%  bucket 53: 30%  bucket 52: 50%  bucket 52: 60%  bucket 53: 40%  bucket 52: 70%  bucket 53: 50%  bucket 52: 80%  bucket 52: 90%  bucket 53: 60%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 20%  bucket 54: 30%  Entering block accumulator loop for bucket 55:  bucket 54: 40%  bucket 55: 10%  bucket 54: 50%  bucket 55: 20%  bucket 54: 60%  bucket 55: 30%  bucket 54: 70%  bucket 55: 40%  bucket 54: 80%  bucket 55: 50%  bucket 54: 90%  bucket 55: 60%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 57  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 57: 40%  bucket 58: 30%  bucket 57: 50%  bucket 58: 40%  bucket 57: 60%  bucket 58: 50%  bucket 57: 70%  bucket 58: 60%  bucket 57: 80%  bucket 57: 90%  bucket 58: 70%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 59: 20%  bucket 59: 30%  bucket 60: 30%  bucket 60: 40%  bucket 59: 40%  bucket 60: 50%  bucket 60: 60%  bucket 59: 50%  bucket 60: 70%  bucket 60: 80%  bucket 59: 60%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00HISAT2 summary stats:Total reads: 10Aligned 0 time: 0 (0.00%)Aligned 1 time: 10 (100.00%)Aligned >1 times: 0 (0.00%)Overall alignment rate: 100.00%
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #12)" name="11" time="40.66913151741028">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2Getting block 4 of 60  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 3:Getting block 5 of 60  bucket 1: 10%  Reserving size (126) for bucket 4Getting block 6 of 60  Calculating Z arrays for bucket 4  bucket 1: 20%  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 6  bucket 3: 10%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 5  bucket 1: 30%  Entering block accumulator loop for bucket 4:Getting block 7 of 60  bucket 4: 10%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 3: 20%  bucket 4: 20%  Reserving size (126) for bucket 7  bucket 2: 10%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 5:  bucket 3: 30%  bucket 1: 40%  Entering block accumulator loop for bucket 6:  bucket 4: 30%  bucket 5: 10%  bucket 3: 40%  Calculating Z arrays for bucket 8  bucket 6: 10%  bucket 5: 20%  bucket 4: 40%  bucket 6: 20%  Entering block accumulator loop for bucket 7:  bucket 1: 50%  bucket 4: 50%  Entering block accumulator loop for bucket 8:  bucket 2: 20%  bucket 4: 60%  bucket 5: 30%  bucket 6: 30%  bucket 8: 10%  bucket 3: 50%  bucket 6: 40%  bucket 5: 40%  bucket 4: 70%  bucket 7: 10%  bucket 6: 50%  bucket 8: 20%  bucket 4: 80%  bucket 3: 60%  bucket 2: 30%  bucket 5: 50%  bucket 6: 60%  bucket 4: 90%  bucket 3: 70%  bucket 8: 30%  bucket 7: 20%  bucket 4: 100%  bucket 1: 60%  bucket 6: 70%  bucket 2: 40%  bucket 7: 30%  bucket 5: 60%  bucket 6: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 2: 50%  bucket 5: 70%  bucket 1: 70%  bucket 6: 90%  bucket 8: 40%  bucket 2: 60%  bucket 5: 80%  bucket 7: 40%  bucket 1: 80%  bucket 5: 90%  bucket 2: 70%  bucket 8: 50%  bucket 3: 80%  bucket 1: 90%  bucket 7: 50%  bucket 5: 100%  bucket 8: 60%  bucket 2: 80%  bucket 7: 60%  bucket 3: 90%  bucket 1: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 2: 90%  Sorting block of length 42 for bucket 1  bucket 6: 100%  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 3: 100%  bucket 7: 70%  bucket 2: 100%  bucket 8: 70%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 80%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  bucket 8: 100%  Sorting block time: 00:00:00  Sorting block of length 75 for bucket 7  (Using difference cover)Returning block of 69 for bucket 4  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  Entering block accumulator loop for bucket 11:  bucket 10: 50%  bucket 11: 10%  bucket 10: 60%  bucket 11: 20%  bucket 10: 70%  bucket 11: 30%  bucket 10: 80%  bucket 11: 40%  bucket 10: 90%  bucket 11: 50%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12Getting block 13 of 60  Calculating Z arrays for bucket 12  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 13: 10%  bucket 12: 20%  bucket 13: 20%  bucket 12: 30%  bucket 13: 30%  bucket 12: 40%  bucket 13: 40%  bucket 12: 50%  bucket 13: 50%  bucket 12: 60%  bucket 13: 60%  bucket 13: 70%  bucket 12: 70%  bucket 13: 80%  bucket 12: 80%  bucket 13: 90%  bucket 13: 100%  bucket 12: 90%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15Getting block 16 of 60  Calculating Z arrays for bucket 15  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 15:  bucket 16: 10%  bucket 15: 10%  bucket 16: 20%  bucket 15: 20%  bucket 16: 30%  bucket 15: 30%  bucket 16: 40%  bucket 15: 40%  bucket 16: 50%  bucket 15: 50%  bucket 16: 60%  bucket 15: 60%  bucket 16: 70%  bucket 15: 70%  bucket 16: 80%  bucket 15: 80%  bucket 16: 90%  bucket 15: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 17: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 10%  bucket 20: 20%  Entering block accumulator loop for bucket 21:  bucket 20: 30%  bucket 20: 40%  bucket 21: 10%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 21: 20%  bucket 20: 80%  bucket 20: 90%  bucket 21: 30%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  Sorting block time: 00:00:00Returning block of 98 for bucket 20  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 23: 60%  bucket 22: 60%  bucket 23: 70%  bucket 22: 70%  bucket 23: 80%  bucket 22: 80%  bucket 23: 90%  bucket 22: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 25: 30%  bucket 26: 20%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 26: 50%  bucket 25: 70%  bucket 26: 60%  bucket 25: 80%  bucket 26: 70%  bucket 25: 90%  bucket 26: 80%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 27: 70%  bucket 28: 50%  bucket 27: 80%  bucket 28: 60%  bucket 27: 90%  bucket 28: 70%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  bucket 30: 10%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 30: 30%  bucket 31: 10%  bucket 30: 40%  bucket 30: 50%  bucket 31: 20%  bucket 30: 60%  bucket 31: 30%  bucket 30: 70%  bucket 30: 80%  bucket 31: 40%  bucket 30: 90%  bucket 31: 50%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  Sorting block time: 00:00:00Returning block of 125 for bucket 30  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 33:  bucket 32: 10%  bucket 33: 10%  bucket 32: 20%  bucket 33: 20%  bucket 33: 30%  bucket 32: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 32: 40%  bucket 33: 70%  bucket 32: 50%  bucket 33: 80%  bucket 33: 90%  bucket 32: 60%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  bucket 35: 10%  Entering block accumulator loop for bucket 36:  bucket 35: 20%  bucket 36: 10%  bucket 35: 30%  bucket 35: 40%  bucket 36: 20%  bucket 35: 50%  bucket 36: 30%  bucket 35: 60%  bucket 35: 70%  bucket 36: 40%  bucket 35: 80%  bucket 36: 50%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  Sorting block time: 00:00:00  (Using difference cover)Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 38: 10%  bucket 37: 30%  bucket 38: 20%  bucket 38: 30%  bucket 37: 40%  bucket 38: 40%  bucket 37: 50%  bucket 38: 50%  bucket 37: 60%  bucket 38: 60%  bucket 38: 70%  bucket 37: 70%  bucket 38: 80%  bucket 37: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 10%  bucket 40: 20%  Entering block accumulator loop for bucket 41:Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 40: 50%Getting block 43 of 60  bucket 40: 60%  bucket 41: 30%  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 40: 70%  bucket 42: 10%  bucket 41: 40%  bucket 40: 80%  bucket 40: 90%  Entering block accumulator loop for bucket 43:  bucket 41: 50%  bucket 40: 100%  bucket 42: 20%Getting block 44 of 60  bucket 43: 10%  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 41: 60%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 42: 30%  bucket 43: 20%  bucket 41: 70%  bucket 42: 40%  bucket 43: 30%  Entering block accumulator loop for bucket 44:  bucket 41: 80%  bucket 43: 40%  bucket 42: 50%  bucket 44: 10%  bucket 41: 90%  bucket 44: 20%  bucket 42: 60%  bucket 43: 50%  bucket 41: 100%  Sorting block time: 00:00:00  bucket 42: 70%Returning block of 42 for bucket 40  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 44: 30%  bucket 43: 60%  bucket 42: 80%  bucket 44: 40%  bucket 43: 70%  bucket 42: 90%  bucket 44: 50%  bucket 43: 80%  bucket 42: 100%  bucket 44: 60%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 90%  bucket 44: 70%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 80%  Sorting block time: 00:00:00  bucket 44: 90%Returning block of 89 for bucket 41  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 46: 20%  bucket 47: 10%  bucket 46: 30%  bucket 47: 20%  bucket 46: 40%  bucket 47: 30%  bucket 47: 40%  bucket 46: 50%  bucket 47: 50%  bucket 46: 60%  bucket 47: 60%  bucket 46: 70%  bucket 47: 70%  bucket 46: 80%  bucket 47: 80%  bucket 46: 90%  bucket 47: 90%  bucket 46: 100%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  bucket 49: 10%  Entering block accumulator loop for bucket 50:  bucket 49: 20%  bucket 50: 10%  bucket 49: 30%  bucket 50: 20%  bucket 49: 40%  bucket 50: 30%  bucket 49: 50%  bucket 50: 40%  bucket 49: 60%  bucket 50: 50%  bucket 49: 70%  bucket 50: 60%  bucket 49: 80%  bucket 50: 70%  bucket 49: 90%  bucket 50: 80%  bucket 49: 100%  bucket 50: 90%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 10%  bucket 51: 20%  Entering block accumulator loop for bucket 52:  bucket 51: 30%  bucket 51: 40%  bucket 52: 10%  bucket 51: 50%  bucket 52: 20%  bucket 51: 60%  bucket 52: 30%  bucket 51: 70%  bucket 52: 40%  bucket 51: 80%  bucket 52: 50%  bucket 51: 90%  bucket 51: 100%  bucket 52: 60%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 55: 10%  bucket 54: 50%  bucket 55: 20%  bucket 54: 60%  bucket 54: 70%  bucket 55: 30%  bucket 54: 80%  bucket 55: 40%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  Sorting block time: 00:00:00Returning block of 65 for bucket 54  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 57: 10%  bucket 56: 30%  bucket 57: 20%  bucket 56: 40%  bucket 56: 50%  bucket 57: 30%  bucket 56: 60%  bucket 57: 40%  bucket 56: 70%  bucket 56: 80%  bucket 57: 50%  bucket 56: 90%  bucket 57: 60%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  Sorting block time: 00:00:00Returning block of 56 for bucket 56  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 59: 20%  bucket 60: 30%  bucket 59: 30%  bucket 60: 40%  bucket 60: 50%  bucket 59: 40%  bucket 60: 60%  bucket 59: 50%  bucket 60: 70%  bucket 60: 80%  bucket 59: 60%  bucket 60: 90%  bucket 59: 70%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #13)" name="12" time="30.643537998199463">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "1fd1cfae228302c7",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "ee0140392c5e933e",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o pipefail;  ln -s \u0027/galaxy/server/database/objects/f/9/d/dataset_f9d80871-d803-44e1-9db4-b3e52c5c2285.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        bzcat \u0027/galaxy/server/database/objects/0/7/7/dataset_07742eb0-b915-4f7b-8545-bdf2d260edac.dat\u0027 | seqtk seq -1 /dev/stdin \u003e input_f.fastq \u0026\u0026 bzcat \u0027/galaxy/server/database/objects/0/7/7/dataset_07742eb0-b915-4f7b-8545-bdf2d260edac.dat\u0027 | seqtk seq -2 /dev/stdin \u003e input_r.fastq \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/e/1/f/dataset_e1f4485d-9e95-479f-a2b5-f487bf024c41.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T14:14:00.772722",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-rrnj2",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "40e4074bd411feb7",  "inputs": {   "library|input_1": {    "id": "1fd1cfae228302c7",    "src": "hda",    "uuid": "07742eb0-b915-4f7b-8545-bdf2d260edac"   },   "reference_genome|history_item": {    "id": "ee0140392c5e933e",    "src": "hda",    "uuid": "f9d80871-d803-44e1-9db4-b3e52c5c2285"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "435806e0944c89ea",    "src": "hda",    "uuid": "e1f4485d-9e95-479f-a2b5-f487bf024c41"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 322, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 321, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "error",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\nGetting block 2 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 60\n  bucket 2: 10%\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 3: 10%\n  Calculating Z arrays for bucket 5\n  bucket 1: 60%\n  Calculating Z arrays for bucket 4\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 70%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\nGetting block 7 of 60\n  bucket 3: 40%\n  Reserving size (126) for bucket 7\n  bucket 5: 10%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 5: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 50%\nGetting block 8 of 60\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 8\n  bucket 5: 40%\n  bucket 4: 10%\n  bucket 3: 60%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 1: 100%\n  bucket 3: 70%\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 5: 60%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  bucket 6: 30%\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 3: 100%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 80%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 2: 80%\n  bucket 5: 80%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 8: 30%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 4: 100%\n  bucket 8: 40%\n  bucket 6: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 6: 90%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 5: 100%\n  bucket 7: 100%\nReturning block of 43 for bucket 1\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 60%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  bucket 11: 40%\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 20%\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  bucket 15: 40%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 16: 30%\n  bucket 15: 80%\n  bucket 16: 40%\n  bucket 15: 90%\n  bucket 16: 50%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\nGetting block 18 of 60\n  bucket 17: 50%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  bucket 19: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  bucket 22: 60%\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 24: 40%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\n  bucket 31: 80%\n  bucket 32: 60%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 70%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 10%\nGetting block 35 of 60\n  bucket 34: 20%\n  bucket 33: 10%\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\n  bucket 33: 20%\n  bucket 34: 40%\n  bucket 33: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 50%\n  bucket 33: 40%\n  bucket 34: 60%\n  bucket 35: 10%\n  bucket 33: 50%\n  bucket 34: 70%\n  bucket 33: 60%\n  bucket 35: 20%\n  bucket 34: 80%\n  bucket 33: 70%\n  bucket 34: 90%\n  bucket 35: 30%\n  bucket 33: 80%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  bucket 40: 80%\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 42: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 42: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 43: 70%\n  bucket 42: 70%\n  bucket 43: 80%\n  bucket 42: 80%\n  bucket 43: 90%\n  bucket 42: 90%\n  bucket 43: 100%\n  bucket 42: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 20%\n  bucket 45: 10%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 45: 70%\n  bucket 44: 90%\n  bucket 45: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 80%\n  bucket 47: 90%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 53: 50%\n  bucket 52: 70%\n  bucket 53: 60%\n  bucket 52: 80%\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 53: 80%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 54: 30%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 54: 40%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 50%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 60%\n  bucket 54: 70%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 20%\n  bucket 57: 30%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 58: 10%\n  bucket 57: 60%\n  bucket 58: 20%\n  bucket 57: 70%\n  bucket 58: 30%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 58: 40%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 50%\n  bucket 58: 60%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 59: 60%\n  bucket 60: 70%\n  bucket 59: 70%\n  bucket 60: 80%\n  bucket 59: 80%\n  bucket 60: 90%\n  bucket 59: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  bucket 59: 100%\n  (Using difference cover)\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\nGetting block 2 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 60\n  bucket 2: 10%\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 3: 10%\n  Calculating Z arrays for bucket 5\n  bucket 1: 60%\n  Calculating Z arrays for bucket 4\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 70%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\nGetting block 7 of 60\n  bucket 3: 40%\n  Reserving size (126) for bucket 7\n  bucket 5: 10%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 5: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 50%\nGetting block 8 of 60\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 8\n  bucket 5: 40%\n  bucket 4: 10%\n  bucket 3: 60%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 1: 100%\n  bucket 3: 70%\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 5: 60%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  bucket 6: 30%\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 3: 100%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 80%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 2: 80%\n  bucket 5: 80%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 8: 30%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 4: 100%\n  bucket 8: 40%\n  bucket 6: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 6: 90%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 5: 100%\n  bucket 7: 100%\nReturning block of 43 for bucket 1\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 60%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  bucket 11: 40%\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 20%\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  bucket 15: 40%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 16: 30%\n  bucket 15: 80%\n  bucket 16: 40%\n  bucket 15: 90%\n  bucket 16: 50%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\nGetting block 18 of 60\n  bucket 17: 50%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  bucket 19: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  bucket 22: 60%\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 24: 40%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\n  bucket 31: 80%\n  bucket 32: 60%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 70%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 10%\nGetting block 35 of 60\n  bucket 34: 20%\n  bucket 33: 10%\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\n  bucket 33: 20%\n  bucket 34: 40%\n  bucket 33: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 50%\n  bucket 33: 40%\n  bucket 34: 60%\n  bucket 35: 10%\n  bucket 33: 50%\n  bucket 34: 70%\n  bucket 33: 60%\n  bucket 35: 20%\n  bucket 34: 80%\n  bucket 33: 70%\n  bucket 34: 90%\n  bucket 35: 30%\n  bucket 33: 80%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  bucket 40: 80%\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 42: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 42: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 43: 70%\n  bucket 42: 70%\n  bucket 43: 80%\n  bucket 42: 80%\n  bucket 43: 90%\n  bucket 42: 90%\n  bucket 43: 100%\n  bucket 42: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 20%\n  bucket 45: 10%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 45: 70%\n  bucket 44: 90%\n  bucket 45: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 80%\n  bucket 47: 90%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 53: 50%\n  bucket 52: 70%\n  bucket 53: 60%\n  bucket 52: 80%\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 53: 80%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 54: 30%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 54: 40%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 50%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 60%\n  bucket 54: 70%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 20%\n  bucket 57: 30%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 58: 10%\n  bucket 57: 60%\n  bucket 58: 20%\n  bucket 57: 70%\n  bucket 58: 30%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 58: 40%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 50%\n  bucket 58: 60%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 59: 60%\n  bucket 60: 70%\n  bucket 59: 70%\n  bucket 60: 80%\n  bucket 59: 80%\n  bucket 60: 90%\n  bucket 59: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  bucket 59: 100%\n  (Using difference cover)\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n",  "update_time": "2025-04-29T14:14:06.669920",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n." ], "status": "failure", "test_index": 12, "time_seconds": 30.643537998199463, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%Getting block 2 of 60  bucket 1: 20%  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 30%Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  bucket 1: 40%  Entering block accumulator loop for bucket 2:Getting block 4 of 60  bucket 2: 10%  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 50%Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 3: 10%  Calculating Z arrays for bucket 5  bucket 1: 60%  Calculating Z arrays for bucket 4  bucket 2: 20%  bucket 3: 20%  bucket 1: 70%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 2: 30%  bucket 1: 80%  bucket 3: 30%  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 4:Getting block 7 of 60  bucket 3: 40%  Reserving size (126) for bucket 7  bucket 5: 10%  bucket 2: 40%  bucket 1: 90%  bucket 3: 50%  bucket 5: 20%  Calculating Z arrays for bucket 7  bucket 2: 50%Getting block 8 of 60  bucket 5: 30%  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 6  Reserving size (126) for bucket 8  bucket 5: 40%  bucket 4: 10%  bucket 3: 60%  bucket 7: 10%  Entering block accumulator loop for bucket 6:  bucket 4: 20%  Calculating Z arrays for bucket 8  bucket 1: 100%  bucket 3: 70%  bucket 5: 50%  bucket 6: 10%  bucket 4: 30%  bucket 7: 20%  bucket 2: 60%  bucket 5: 60%  bucket 4: 40%  Entering block accumulator loop for bucket 8:  bucket 3: 80%  bucket 4: 50%  bucket 6: 20%  bucket 2: 70%  bucket 4: 60%  Sorting block of length 42 for bucket 1  bucket 6: 30%  (Using difference cover)  bucket 3: 90%  bucket 4: 70%  bucket 6: 40%  bucket 8: 10%  bucket 7: 30%  bucket 3: 100%  bucket 6: 50%  bucket 5: 70%  bucket 7: 40%  Sorting block of length 106 for bucket 3  bucket 4: 80%  bucket 8: 20%  bucket 7: 50%  bucket 2: 80%  bucket 5: 80%  (Using difference cover)  bucket 7: 60%  bucket 6: 60%  bucket 8: 30%  bucket 2: 90%  bucket 4: 90%  bucket 5: 90%  bucket 6: 70%  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 70%  bucket 4: 100%  bucket 8: 40%  bucket 6: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 80%  bucket 8: 50%  bucket 6: 90%  bucket 7: 90%  Sorting block time: 00:00:00  bucket 5: 100%  bucket 7: 100%Returning block of 43 for bucket 1  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 60%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%Getting block 12 of 60  Reserving size (126) for bucket 12  bucket 11: 40%  Calculating Z arrays for bucket 12  bucket 11: 50%  Entering block accumulator loop for bucket 12:  bucket 11: 60%  bucket 12: 10%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 12: 40%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%Getting block 16 of 60  Reserving size (126) for bucket 16  bucket 15: 20%  Calculating Z arrays for bucket 16  bucket 15: 30%  bucket 15: 40%  Entering block accumulator loop for bucket 16:  bucket 15: 50%  bucket 16: 10%  bucket 15: 60%  bucket 16: 20%  bucket 15: 70%  bucket 16: 30%  bucket 15: 80%  bucket 16: 40%  bucket 15: 90%  bucket 16: 50%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 60  bucket 17: 50%  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  Entering block accumulator loop for bucket 18:  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  Sorting block time: 00:00:00Returning block of 40 for bucket 17  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  bucket 19: 30%  Entering block accumulator loop for bucket 20:  bucket 19: 40%  bucket 20: 10%  bucket 19: 50%  bucket 20: 20%  bucket 19: 60%  bucket 20: 30%  bucket 19: 70%  bucket 19: 80%  bucket 20: 40%  bucket 19: 90%  bucket 20: 50%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 22: 50%  bucket 21: 100%  Sorting block of length 54 for bucket 21  bucket 22: 60%  (Using difference cover)  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 23: 30%  bucket 24: 10%  bucket 23: 40%  bucket 24: 20%  bucket 23: 50%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 24: 40%  bucket 23: 80%  bucket 23: 90%  bucket 24: 50%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 10%  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 27: 20%  bucket 26: 60%  bucket 27: 30%  bucket 26: 70%  bucket 26: 80%  bucket 27: 40%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 28: 50%  bucket 29: 30%  bucket 28: 60%  bucket 29: 40%  bucket 28: 70%  bucket 29: 50%  bucket 28: 80%  bucket 29: 60%  bucket 28: 90%  bucket 29: 70%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 31: 20%  bucket 32: 10%  bucket 31: 30%  bucket 31: 40%  bucket 32: 20%  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 32: 40%  bucket 31: 70%  bucket 32: 50%  bucket 31: 80%  bucket 32: 60%  bucket 31: 90%  bucket 31: 100%  bucket 32: 70%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 33:  bucket 34: 10%Getting block 35 of 60  bucket 34: 20%  bucket 33: 10%  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 30%  bucket 33: 20%  bucket 34: 40%  bucket 33: 30%  Entering block accumulator loop for bucket 35:  bucket 34: 50%  bucket 33: 40%  bucket 34: 60%  bucket 35: 10%  bucket 33: 50%  bucket 34: 70%  bucket 33: 60%  bucket 35: 20%  bucket 34: 80%  bucket 33: 70%  bucket 34: 90%  bucket 35: 30%  bucket 33: 80%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 40%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  Sorting block time: 00:00:00Returning block of 123 for bucket 34  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 37: 20%  bucket 36: 40%  bucket 37: 30%  bucket 36: 50%  bucket 37: 40%  bucket 36: 60%  bucket 37: 50%  bucket 36: 70%  bucket 37: 60%  bucket 36: 80%  bucket 37: 70%  bucket 36: 90%  bucket 37: 80%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 40: 30%  bucket 39: 60%  bucket 40: 40%  bucket 39: 70%  bucket 40: 50%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 40: 70%  bucket 39: 100%  Sorting block of length 125 for bucket 39  bucket 40: 80%  (Using difference cover)  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 42: 10%  bucket 43: 20%  bucket 42: 20%  bucket 43: 30%  bucket 42: 30%  bucket 43: 40%  bucket 42: 40%  bucket 43: 50%  bucket 42: 50%  bucket 43: 60%  bucket 42: 60%  bucket 43: 70%  bucket 42: 70%  bucket 43: 80%  bucket 42: 80%  bucket 43: 90%  bucket 42: 90%  bucket 43: 100%  bucket 42: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  bucket 44: 10%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  bucket 45: 10%  bucket 44: 30%  bucket 45: 20%  bucket 44: 40%  bucket 44: 50%  bucket 45: 30%  bucket 45: 40%  bucket 44: 60%  bucket 45: 50%  bucket 44: 70%  bucket 45: 60%  bucket 44: 80%  bucket 45: 70%  bucket 44: 90%  bucket 45: 80%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 80%  bucket 47: 90%  Entering block accumulator loop for bucket 48:  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  Sorting block time: 00:00:00Returning block of 84 for bucket 47  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  bucket 49: 10%  Entering block accumulator loop for bucket 50:  bucket 49: 20%  bucket 50: 10%  bucket 49: 30%  bucket 50: 20%  bucket 49: 40%  bucket 50: 30%  bucket 49: 50%  bucket 50: 40%  bucket 49: 60%  bucket 50: 50%  bucket 49: 70%  bucket 50: 60%  bucket 49: 80%  bucket 50: 70%  bucket 49: 90%  bucket 50: 80%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 53: 10%  bucket 52: 30%  bucket 53: 20%  bucket 52: 40%  bucket 53: 30%  bucket 52: 50%  bucket 53: 40%  bucket 52: 60%  bucket 53: 50%  bucket 52: 70%  bucket 53: 60%  bucket 52: 80%  bucket 53: 70%  bucket 52: 90%  bucket 53: 80%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 54: 10%  bucket 55: 10%  bucket 55: 20%  bucket 54: 20%  bucket 55: 30%  bucket 55: 40%  bucket 54: 30%  bucket 55: 50%  bucket 55: 60%  bucket 54: 40%  bucket 55: 70%  bucket 55: 80%  bucket 54: 50%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 60%  bucket 54: 70%  Sorting block time: 00:00:00Returning block of 80 for bucket 55  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 20%  bucket 57: 30%  Entering block accumulator loop for bucket 58:  bucket 57: 40%  bucket 57: 50%  bucket 58: 10%  bucket 57: 60%  bucket 58: 20%  bucket 57: 70%  bucket 58: 30%  bucket 57: 80%  bucket 57: 90%  bucket 58: 40%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 50%  bucket 58: 60%  Sorting block time: 00:00:00Returning block of 86 for bucket 57  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 59: 10%  bucket 60: 10%  bucket 59: 20%  bucket 60: 20%  bucket 60: 30%  bucket 59: 30%  bucket 60: 40%  bucket 59: 40%  bucket 60: 50%  bucket 59: 50%  bucket 60: 60%  bucket 59: 60%  bucket 60: 70%  bucket 59: 70%  bucket 60: 80%  bucket 59: 80%  bucket 60: 90%  bucket 59: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  bucket 59: 100%  (Using difference cover)  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #14)" name="13" time="40.66486859321594">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 5 of 60  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 20%  Calculating Z arrays for bucket 5  bucket 3: 20%  bucket 1: 30%Getting block 6 of 60  Reserving size (126) for bucket 6Getting block 7 of 60  bucket 2: 10%  bucket 1: 40%  bucket 3: 30%  Calculating Z arrays for bucket 6  Reserving size (126) for bucket 7  bucket 3: 40%  bucket 4: 10%Getting block 8 of 60  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 5:  bucket 3: 50%  bucket 4: 20%  Calculating Z arrays for bucket 8  bucket 5: 10%  bucket 6: 10%  bucket 1: 50%  bucket 4: 30%  Entering block accumulator loop for bucket 7:  bucket 5: 20%  bucket 6: 20%  bucket 1: 60%  bucket 3: 60%  bucket 5: 30%  bucket 7: 10%  bucket 6: 30%  bucket 2: 20%  bucket 1: 70%  bucket 5: 40%  bucket 6: 40%  bucket 3: 70%  bucket 2: 30%  bucket 5: 50%  Entering block accumulator loop for bucket 8:  bucket 2: 40%  bucket 4: 40%  bucket 1: 80%  bucket 7: 20%  bucket 2: 50%  bucket 8: 10%  bucket 5: 60%  bucket 1: 90%  bucket 7: 30%  bucket 2: 60%  bucket 6: 50%  bucket 8: 20%  bucket 4: 50%  bucket 3: 80%  bucket 2: 70%  bucket 7: 40%  bucket 3: 90%  bucket 4: 60%  bucket 5: 70%  bucket 6: 60%  bucket 8: 30%  bucket 3: 100%  bucket 4: 70%  bucket 5: 80%  bucket 1: 100%  bucket 2: 80%  bucket 6: 70%  Sorting block of length 106 for bucket 3  bucket 5: 90%  (Using difference cover)  bucket 8: 40%  bucket 7: 50%  bucket 6: 80%  bucket 4: 80%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 50%  bucket 2: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 4: 90%  bucket 8: 60%  bucket 6: 90%  bucket 2: 100%  bucket 7: 60%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 100%  bucket 6: 100%  bucket 8: 70%  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block of length 90 for bucket 6  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  (Using difference cover)  bucket 8: 90%  bucket 7: 90%  bucket 7: 100%  bucket 8: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 10%  Calculating Z arrays for bucket 10  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  Entering block accumulator loop for bucket 10:  bucket 9: 50%  bucket 9: 60%  bucket 10: 10%  bucket 9: 70%  bucket 9: 80%  bucket 10: 20%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  Sorting block time: 00:00:00Returning block of 125 for bucket 9  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 13: 10%  bucket 11: 40%  bucket 12: 30%  bucket 13: 20%  bucket 11: 50%  bucket 13: 30%  bucket 12: 40%  bucket 11: 60%  bucket 13: 40%  bucket 12: 50%  bucket 11: 70%  bucket 13: 50%  bucket 11: 80%  bucket 12: 60%  bucket 13: 60%  bucket 11: 90%  bucket 12: 70%  bucket 13: 70%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 13: 80%  bucket 12: 90%  bucket 13: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Entering block accumulator loop for bucket 14:  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 14: 10%  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 14: 20%  bucket 15: 20%  bucket 14: 30%  bucket 15: 30%  bucket 16: 10%  bucket 14: 40%  bucket 15: 40%  bucket 14: 50%  bucket 15: 50%  bucket 16: 20%  bucket 14: 60%  bucket 15: 60%  bucket 14: 70%  bucket 16: 30%  bucket 15: 70%  bucket 14: 80%  bucket 16: 40%  bucket 15: 80%  bucket 14: 90%  bucket 16: 50%  bucket 15: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 16: 60%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 17: 60%  bucket 18: 40%  bucket 17: 70%  bucket 18: 50%  bucket 17: 80%  bucket 18: 60%  bucket 17: 90%  bucket 18: 70%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 20: 40%  bucket 19: 50%  bucket 20: 50%  bucket 19: 60%  bucket 20: 60%  bucket 20: 70%  bucket 19: 70%  bucket 20: 80%  bucket 19: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 21: 20%  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 21: 30%  bucket 22: 10%  bucket 23: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 23: 20%  bucket 21: 60%  bucket 23: 30%  bucket 22: 40%  bucket 21: 70%  bucket 23: 40%  bucket 22: 50%  bucket 21: 80%  bucket 23: 50%  bucket 22: 60%  bucket 23: 60%  bucket 21: 90%  bucket 22: 70%  bucket 23: 70%  bucket 21: 100%  bucket 23: 80%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 23: 90%  bucket 23: 100%  bucket 22: 90%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 50%  bucket 24: 60%  Entering block accumulator loop for bucket 25:  bucket 24: 70%  bucket 24: 80%  bucket 25: 10%  bucket 25: 20%  bucket 24: 90%  bucket 24: 100%  bucket 25: 30%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  Sorting block time: 00:00:00Returning block of 69 for bucket 24  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 20%  bucket 26: 30%  Entering block accumulator loop for bucket 27:  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 26: 60%  bucket 27: 20%  bucket 26: 70%  bucket 27: 30%  bucket 26: 80%  bucket 27: 40%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 29: 10%  bucket 28: 50%  bucket 28: 60%  bucket 29: 20%  bucket 28: 70%  bucket 29: 30%  bucket 28: 80%  bucket 28: 90%  bucket 29: 40%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  Sorting block time: 00:00:00Returning block of 107 for bucket 28  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 31: 10%  bucket 30: 20%  bucket 31: 20%  bucket 30: 30%  bucket 30: 40%  bucket 31: 30%  bucket 30: 50%  bucket 31: 40%  bucket 30: 60%  bucket 31: 50%  bucket 30: 70%  bucket 31: 60%  bucket 30: 80%  bucket 31: 70%  bucket 30: 90%  bucket 31: 80%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 33: 40%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 10%  bucket 35: 20%  Entering block accumulator loop for bucket 36:  bucket 35: 30%  bucket 36: 10%  bucket 35: 40%  bucket 35: 50%  bucket 36: 20%  bucket 35: 60%  bucket 36: 30%  bucket 35: 70%  bucket 36: 40%  bucket 35: 80%  bucket 36: 50%  bucket 35: 90%  bucket 36: 60%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 38:  bucket 39: 10%  bucket 38: 10%  bucket 38: 20%  bucket 39: 20%  bucket 38: 30%  bucket 39: 30%  bucket 38: 40%  bucket 38: 50%  bucket 39: 40%  bucket 38: 60%  bucket 39: 50%  bucket 38: 70%  bucket 39: 60%  bucket 38: 80%  bucket 39: 70%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%Getting block 41 of 60  Reserving size (126) for bucket 41  bucket 40: 40%  Calculating Z arrays for bucket 41  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 40: 60%  bucket 41: 10%  bucket 40: 70%  bucket 41: 20%  bucket 40: 80%  bucket 41: 30%  bucket 40: 90%  bucket 40: 100%  bucket 41: 40%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 50%  bucket 41: 60%  Sorting block time: 00:00:00Returning block of 42 for bucket 40  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  Entering block accumulator loop for bucket 44:  bucket 43: 10%  bucket 44: 10%  bucket 43: 20%  bucket 44: 20%  bucket 43: 30%  bucket 44: 30%  bucket 43: 40%  bucket 44: 40%  bucket 43: 50%  bucket 44: 50%  bucket 43: 60%  bucket 44: 60%  bucket 43: 70%  bucket 44: 70%  bucket 43: 80%  bucket 44: 80%  bucket 43: 90%  bucket 44: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  Sorting block time: 00:00:00Returning block of 80 for bucket 45  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%Getting block 49 of 60  bucket 48: 40%  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  Entering block accumulator loop for bucket 49:  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  bucket 50: 10%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 51: 10%  bucket 50: 30%  bucket 51: 20%  bucket 50: 40%  bucket 51: 30%  bucket 50: 50%  bucket 51: 40%  bucket 50: 60%  bucket 51: 50%  bucket 50: 70%  bucket 51: 60%  bucket 50: 80%  bucket 51: 70%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 20%  bucket 53: 30%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 53: 40%  Entering block accumulator loop for bucket 54:  bucket 53: 50%  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 53: 60%  bucket 53: 70%  bucket 54: 20%  bucket 55: 10%  bucket 53: 80%  bucket 54: 30%  bucket 55: 20%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 55: 30%  bucket 54: 40%  bucket 55: 40%  bucket 54: 50%  bucket 55: 50%  bucket 54: 60%  bucket 55: 60%  bucket 54: 70%  bucket 55: 70%  bucket 54: 80%  bucket 55: 80%  bucket 54: 90%  bucket 55: 90%  bucket 54: 100%  Sorting block time: 00:00:00  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 100%Returning block of 79 for bucket 53  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 57: 10%  bucket 56: 30%  bucket 57: 20%  bucket 56: 40%  bucket 56: 50%  bucket 57: 30%  bucket 56: 60%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 56: 90%  bucket 57: 50%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 40%  bucket 58: 50%  Entering block accumulator loop for bucket 59:  bucket 58: 60%  bucket 58: 70%  bucket 59: 10%  bucket 58: 80%  bucket 59: 20%  bucket 58: 90%  bucket 59: 30%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #15)" name="14" time="41.057196855545044">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 3:Getting block 6 of 60  Entering block accumulator loop for bucket 4:Getting block 7 of 60  bucket 4: 10%  bucket 3: 10%Getting block 8 of 60  bucket 3: 20%  Reserving size (126) for bucket 7  Reserving size (126) for bucket 6  bucket 1: 10%  bucket 2: 10%Getting block 5 of 60  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 7  bucket 2: 20%  Calculating Z arrays for bucket 6  bucket 3: 30%  bucket 2: 30%  bucket 1: 20%  bucket 4: 20%  bucket 2: 40%  bucket 1: 30%  Calculating Z arrays for bucket 5  bucket 3: 40%  Entering block accumulator loop for bucket 6:  bucket 2: 50%  Reserving size (126) for bucket 8  bucket 6: 10%  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 8  bucket 3: 50%  bucket 4: 30%  bucket 6: 20%  Entering block accumulator loop for bucket 5:  bucket 1: 40%  bucket 2: 60%  bucket 7: 10%  bucket 1: 50%  bucket 4: 40%  Entering block accumulator loop for bucket 8:  bucket 6: 30%  bucket 3: 60%  bucket 5: 10%  bucket 2: 70%  bucket 6: 40%  bucket 4: 50%  bucket 7: 20%  bucket 1: 60%  bucket 8: 10%  bucket 4: 60%  bucket 2: 80%  bucket 5: 20%  bucket 3: 70%  bucket 7: 30%  bucket 6: 50%  bucket 4: 70%  bucket 5: 30%  bucket 7: 40%  bucket 8: 20%  bucket 4: 80%  bucket 3: 80%  bucket 5: 40%  bucket 6: 60%  bucket 7: 50%  bucket 4: 90%  bucket 2: 90%  bucket 6: 70%  bucket 3: 90%  bucket 4: 100%  bucket 1: 70%  bucket 2: 100%  bucket 3: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 1: 80%  bucket 7: 60%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 50%  bucket 6: 80%  bucket 1: 90%  bucket 7: 70%  bucket 5: 60%  bucket 1: 100%  bucket 6: 90%  bucket 7: 80%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 30%  bucket 6: 100%  bucket 7: 90%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 70%  bucket 8: 40%  bucket 7: 100%  bucket 5: 80%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 50%  bucket 5: 90%  bucket 8: 60%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 9: 20%  bucket 10: 10%  Entering block accumulator loop for bucket 11:  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 11: 10%  bucket 10: 30%  bucket 11: 20%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 11: 30%  bucket 10: 50%  bucket 9: 70%  bucket 11: 40%  bucket 10: 60%  bucket 11: 50%  bucket 9: 80%  bucket 11: 60%  bucket 10: 70%  bucket 9: 90%  bucket 11: 70%  bucket 10: 80%  bucket 9: 100%  bucket 11: 80%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 10%  bucket 12: 20%  Entering block accumulator loop for bucket 13:  bucket 12: 30%  bucket 12: 40%  bucket 13: 10%  bucket 12: 50%  bucket 13: 20%  bucket 12: 60%  bucket 13: 30%  bucket 12: 70%  bucket 13: 40%  bucket 12: 80%  bucket 12: 90%  bucket 13: 50%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Entering block accumulator loop for bucket 15:  Calculating Z arrays for bucket 16  bucket 15: 10%  bucket 15: 20%  Entering block accumulator loop for bucket 16:  bucket 15: 30%  bucket 16: 10%  bucket 15: 40%  bucket 16: 20%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 15: 70%  bucket 16: 40%  bucket 15: 80%  bucket 16: 50%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 18: 50%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 21: 10%  bucket 20: 20%  bucket 21: 20%  bucket 20: 30%  bucket 21: 30%  bucket 20: 40%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 20: 70%  bucket 21: 60%  bucket 20: 80%  bucket 21: 70%  bucket 20: 90%  bucket 21: 80%  bucket 20: 100%  bucket 21: 90%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 60  Reserving size (126) for bucket 23  bucket 22: 10%  Calculating Z arrays for bucket 23  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 22: 40%  bucket 23: 10%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 23: 30%  bucket 22: 70%  bucket 23: 40%  bucket 22: 80%  bucket 23: 50%  bucket 22: 90%  bucket 23: 60%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 25:  bucket 26: 10%  bucket 25: 10%  bucket 26: 20%  bucket 25: 20%  bucket 26: 30%  bucket 25: 30%  bucket 26: 40%  bucket 25: 40%  bucket 26: 50%  bucket 25: 50%  bucket 26: 60%  bucket 25: 60%  bucket 26: 70%  bucket 25: 70%  bucket 26: 80%  bucket 25: 80%  bucket 25: 90%  bucket 26: 90%  bucket 25: 100%  bucket 26: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 27: 40%  bucket 28: 20%  bucket 27: 50%  bucket 28: 30%  bucket 27: 60%  bucket 28: 40%  bucket 27: 70%  bucket 28: 50%  bucket 27: 80%  bucket 28: 60%  bucket 27: 90%  bucket 28: 70%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 10%  bucket 29: 20%  Entering block accumulator loop for bucket 30:  bucket 29: 30%  bucket 30: 10%  bucket 29: 40%  bucket 30: 20%  bucket 29: 50%  bucket 29: 60%  bucket 30: 30%  bucket 29: 70%  bucket 30: 40%  bucket 29: 80%  bucket 30: 50%  bucket 29: 90%  bucket 30: 60%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 31: 20%  bucket 32: 10%  bucket 31: 30%  bucket 32: 20%  bucket 31: 40%  bucket 32: 30%  bucket 31: 50%  bucket 32: 40%  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 32: 50%  bucket 33: 20%  bucket 32: 60%  bucket 33: 30%  bucket 32: 70%  bucket 33: 40%  bucket 32: 80%  bucket 33: 50%  bucket 32: 90%  bucket 33: 60%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 31: 60%  bucket 33: 70%  bucket 31: 70%  bucket 33: 80%  bucket 33: 90%  bucket 31: 80%  bucket 33: 100%  bucket 31: 90%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 31: 100%  Sorting block time: 00:00:00  Sorting block of length 110 for bucket 31  (Using difference cover)Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 35:  bucket 34: 10%  bucket 35: 10%  bucket 34: 20%  bucket 35: 20%  bucket 34: 30%  bucket 35: 30%  bucket 34: 40%  bucket 35: 40%  bucket 34: 50%  bucket 35: 50%  bucket 34: 60%  bucket 35: 60%  bucket 34: 70%  bucket 35: 70%  bucket 34: 80%  bucket 35: 80%  bucket 34: 90%  bucket 35: 90%  bucket 34: 100%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 37:  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 39:  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 39: 10%  bucket 37: 20%  bucket 38: 10%  bucket 39: 20%  bucket 37: 30%  bucket 39: 30%  bucket 38: 20%  bucket 37: 40%  bucket 39: 40%  bucket 38: 30%  bucket 37: 50%  bucket 39: 50%  bucket 38: 40%  bucket 37: 60%  bucket 39: 60%  bucket 38: 50%  bucket 39: 70%  bucket 38: 60%  bucket 37: 70%  bucket 39: 80%  bucket 38: 70%  bucket 37: 80%  bucket 39: 90%  bucket 38: 80%  bucket 37: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 38: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:Getting block 41 of 60  bucket 40: 10%  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 20%  Entering block accumulator loop for bucket 41:  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 40: 50%  bucket 41: 20%  bucket 40: 60%  bucket 41: 30%  bucket 40: 70%  bucket 41: 40%  bucket 40: 80%  bucket 41: 50%  bucket 40: 90%  bucket 41: 60%  bucket 40: 100%  bucket 41: 70%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  Entering block accumulator loop for bucket 43:  bucket 42: 10%  bucket 43: 10%  bucket 42: 20%  bucket 43: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 43: 30%  bucket 42: 80%  bucket 43: 40%  bucket 42: 90%  bucket 43: 50%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 10%  bucket 44: 20%  Entering block accumulator loop for bucket 45:  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 45: 10%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 47: 10%  bucket 46: 20%  bucket 47: 20%  bucket 46: 30%  bucket 47: 30%  bucket 46: 40%  bucket 47: 40%  bucket 46: 50%  bucket 47: 50%  bucket 46: 60%  bucket 47: 60%  bucket 47: 70%  bucket 46: 70%  bucket 47: 80%  bucket 46: 80%  bucket 47: 90%  bucket 47: 100%  bucket 46: 90%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  bucket 48: 10%  Entering block accumulator loop for bucket 49:  bucket 48: 20%  bucket 48: 30%  bucket 49: 10%  bucket 48: 40%  bucket 48: 50%  bucket 49: 20%  bucket 48: 60%  bucket 48: 70%  bucket 49: 30%  bucket 48: 80%  bucket 48: 90%  bucket 49: 40%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  Entering block accumulator loop for bucket 51:  bucket 50: 80%  bucket 50: 90%  bucket 51: 10%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  Sorting block time: 00:00:00Returning block of 109 for bucket 50  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%Getting block 53 of 60  Reserving size (126) for bucket 53  bucket 52: 20%  Calculating Z arrays for bucket 53  bucket 52: 30%  bucket 52: 40%  Entering block accumulator loop for bucket 53:  bucket 52: 50%  bucket 52: 60%  bucket 53: 10%  bucket 52: 70%  bucket 53: 20%  bucket 52: 80%  bucket 53: 30%  bucket 52: 90%  bucket 53: 40%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  Sorting block time: 00:00:00Returning block of 107 for bucket 52  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%Getting block 56 of 60  bucket 55: 20%  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 30%  bucket 55: 40%  Entering block accumulator loop for bucket 56:  bucket 55: 50%  bucket 55: 60%  bucket 56: 10%  bucket 55: 70%  bucket 56: 20%  bucket 55: 80%  bucket 55: 90%  bucket 56: 30%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  Sorting block time: 00:00:00Returning block of 80 for bucket 55  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 10%  bucket 57: 20%  Entering block accumulator loop for bucket 58:  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 58: 10%  bucket 57: 80%  bucket 57: 90%  bucket 58: 20%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  Sorting block time: 00:00:00Returning block of 86 for bucket 57  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 60:  bucket 60: 10%  Entering block accumulator loop for bucket 59:  bucket 60: 20%  bucket 60: 30%  bucket 59: 10%  bucket 60: 40%  bucket 59: 20%  bucket 60: 50%  bucket 60: 60%  bucket 59: 30%  bucket 60: 70%  bucket 59: 40%  bucket 60: 80%  bucket 60: 90%  bucket 59: 50%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #16)" name="15" time="41.766472816467285">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 3  bucket 1: 10%  Calculating Z arrays for bucket 3  bucket 2: 10%Getting block 4 of 60  bucket 2: 20%  bucket 1: 20%  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 4  bucket 2: 30%  bucket 3: 10%  bucket 2: 40%Getting block 5 of 60  bucket 3: 20%  Reserving size (126) for bucket 5  bucket 1: 30%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 2: 50%  bucket 1: 40%  bucket 2: 60%  bucket 4: 10%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 3: 40%  Calculating Z arrays for bucket 6Getting block 8 of 60  bucket 2: 70%  bucket 3: 50%  bucket 1: 50%  Reserving size (126) for bucket 8  bucket 2: 80%  bucket 3: 60%  Calculating Z arrays for bucket 5  bucket 4: 20%  bucket 2: 90%  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 8  bucket 3: 70%  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 6: 10%  bucket 4: 30%  Entering block accumulator loop for bucket 5:Getting block 7 of 60  Entering block accumulator loop for bucket 8:  bucket 6: 20%  bucket 3: 80%  bucket 1: 60%  bucket 6: 30%  bucket 5: 10%  bucket 4: 40%  bucket 1: 70%  Reserving size (126) for bucket 7  bucket 5: 20%  bucket 3: 90%  bucket 8: 10%  bucket 4: 50%  bucket 5: 30%  bucket 1: 80%  bucket 6: 40%  bucket 3: 100%  bucket 4: 60%  bucket 1: 90%  bucket 5: 40%  Calculating Z arrays for bucket 7  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 50%  Sorting block time: 00:00:00Returning block of 85 for bucket 2  bucket 1: 100%  bucket 4: 70%  bucket 5: 60%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 20%  bucket 4: 80%  bucket 5: 70%  Entering block accumulator loop for bucket 7:  bucket 6: 50%  bucket 4: 90%  bucket 5: 80%  bucket 6: 60%  bucket 7: 10%  bucket 4: 100%  bucket 8: 30%  bucket 6: 70%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 20%  bucket 5: 90%  bucket 8: 40%  bucket 6: 80%  bucket 7: 30%  bucket 5: 100%  Sorting block of length 63 for bucket 5  bucket 8: 50%  bucket 6: 90%  bucket 8: 60%  (Using difference cover)  bucket 7: 40%  bucket 8: 70%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 80%  bucket 7: 50%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  bucket 10: 90%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  bucket 12: 10%  Entering block accumulator loop for bucket 11:  bucket 12: 20%  bucket 11: 10%  bucket 12: 30%  bucket 11: 20%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 12: 90%  bucket 11: 70%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  Entering block accumulator loop for bucket 14:  bucket 13: 50%  bucket 14: 10%  bucket 13: 60%  bucket 14: 20%  bucket 13: 70%  bucket 14: 30%  bucket 13: 80%  bucket 14: 40%  bucket 13: 90%  bucket 14: 50%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  Entering block accumulator loop for bucket 16:  bucket 15: 90%  bucket 15: 100%  bucket 16: 10%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  Sorting block time: 00:00:00Returning block of 69 for bucket 15  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Entering block accumulator loop for bucket 17:  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  bucket 18: 30%  bucket 17: 60%  bucket 18: 40%  bucket 17: 70%  bucket 18: 50%  bucket 17: 80%  bucket 18: 60%  bucket 17: 90%  bucket 17: 100%  bucket 18: 70%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 20: 70%  bucket 19: 80%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 22: 60%  bucket 21: 70%  bucket 22: 70%  bucket 21: 80%  bucket 22: 80%  bucket 21: 90%  bucket 22: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Entering block accumulator loop for bucket 23:  Calculating Z arrays for bucket 24  bucket 23: 10%  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 23: 40%  bucket 24: 10%  bucket 23: 50%  bucket 23: 60%  bucket 24: 20%  bucket 23: 70%  bucket 23: 80%  bucket 24: 30%  bucket 23: 90%  bucket 24: 40%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  Sorting block time: 00:00:00Returning block of 65 for bucket 23  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Entering block accumulator loop for bucket 25:  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 25: 30%  bucket 26: 20%  bucket 25: 40%  bucket 25: 50%  bucket 26: 30%  bucket 25: 60%  bucket 26: 40%  bucket 25: 70%  bucket 26: 50%  bucket 25: 80%  bucket 26: 60%  bucket 25: 90%  bucket 26: 70%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 60%  bucket 27: 70%  Entering block accumulator loop for bucket 28:  bucket 27: 80%  bucket 28: 10%  bucket 27: 90%  bucket 28: 20%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  Sorting block time: 00:00:00  bucket 28: 60%Returning block of 120 for bucket 27  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 29: 60%  bucket 30: 60%  bucket 29: 70%  bucket 30: 70%  bucket 29: 80%  bucket 30: 80%  bucket 29: 90%  bucket 30: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 30%  bucket 31: 40%  Entering block accumulator loop for bucket 32:  bucket 31: 50%  bucket 32: 10%  bucket 31: 60%  bucket 32: 20%  bucket 31: 70%  bucket 31: 80%  bucket 32: 30%  bucket 31: 90%  bucket 32: 40%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 34: 10%  bucket 33: 20%  bucket 34: 20%  bucket 33: 30%  bucket 34: 30%  bucket 33: 40%  bucket 34: 40%  bucket 33: 50%  bucket 34: 50%  bucket 33: 60%  bucket 34: 60%  bucket 33: 70%  bucket 34: 70%  bucket 33: 80%  bucket 34: 80%  bucket 33: 90%  bucket 34: 90%  bucket 33: 100%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 35: 20%  bucket 36: 20%  bucket 35: 30%  bucket 36: 30%  bucket 35: 40%  bucket 36: 40%  bucket 35: 50%  bucket 35: 60%  bucket 36: 50%  bucket 35: 70%  bucket 36: 60%  bucket 35: 80%  bucket 36: 70%  bucket 35: 90%  bucket 36: 80%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 20%  bucket 37: 30%  Entering block accumulator loop for bucket 38:  bucket 37: 40%  bucket 38: 10%  bucket 37: 50%  bucket 38: 20%  bucket 37: 60%  bucket 38: 30%  bucket 37: 70%  bucket 38: 40%  bucket 37: 80%  bucket 38: 50%  bucket 37: 90%  bucket 37: 100%  bucket 38: 60%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%Getting block 41 of 60  bucket 40: 20%  bucket 39: 20%  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 30%  bucket 39: 30%  bucket 40: 40%  bucket 39: 40%  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 39: 50%  bucket 40: 60%  bucket 39: 60%  bucket 40: 70%  bucket 41: 10%  bucket 39: 70%  bucket 40: 80%  bucket 39: 80%  bucket 40: 90%  bucket 41: 20%  bucket 39: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 100%  bucket 41: 30%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  bucket 42: 10%  Entering block accumulator loop for bucket 43:  bucket 42: 20%  bucket 43: 10%  bucket 42: 30%  bucket 43: 20%  bucket 42: 40%  bucket 43: 30%  bucket 42: 50%  bucket 43: 40%  bucket 42: 60%  bucket 43: 50%  bucket 42: 70%  bucket 42: 80%  bucket 43: 60%  bucket 42: 90%  bucket 43: 70%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44Getting block 45 of 60  Calculating Z arrays for bucket 44  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  Entering block accumulator loop for bucket 45:  bucket 44: 10%  bucket 45: 10%  bucket 44: 20%  bucket 44: 30%  bucket 45: 20%  bucket 44: 40%  bucket 45: 30%  bucket 44: 50%  bucket 44: 60%  bucket 45: 40%  bucket 44: 70%  bucket 45: 50%  bucket 44: 80%  bucket 44: 90%  bucket 45: 60%  bucket 44: 100%  bucket 45: 70%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 47: 10%  bucket 46: 20%  bucket 47: 20%  bucket 46: 30%  bucket 47: 30%  bucket 46: 40%  bucket 47: 40%  bucket 46: 50%  bucket 47: 50%  bucket 46: 60%  bucket 47: 60%  bucket 46: 70%  bucket 47: 70%  bucket 46: 80%  bucket 47: 80%  bucket 46: 90%  bucket 47: 90%  bucket 46: 100%  bucket 47: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 49: 10%  bucket 48: 20%  bucket 49: 20%  bucket 49: 30%  bucket 48: 30%  bucket 49: 40%  bucket 48: 40%  bucket 49: 50%  bucket 49: 60%  bucket 48: 50%  bucket 49: 70%  bucket 48: 60%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 51: 10%  bucket 52: 10%  bucket 51: 20%  bucket 52: 20%  bucket 51: 30%  bucket 52: 30%  bucket 51: 40%  bucket 52: 40%  bucket 51: 50%  bucket 52: 50%  bucket 51: 60%  bucket 52: 60%  bucket 51: 70%  bucket 52: 70%  bucket 51: 80%  bucket 52: 80%  bucket 51: 90%  bucket 52: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 53:  bucket 54: 10%  bucket 54: 20%  bucket 53: 10%  bucket 54: 30%  bucket 53: 20%  bucket 54: 40%  bucket 53: 30%  bucket 54: 50%  bucket 53: 40%  bucket 54: 60%  bucket 53: 50%  bucket 54: 70%  bucket 53: 60%  bucket 54: 80%  bucket 53: 70%  bucket 54: 90%  bucket 53: 80%  bucket 54: 100%  bucket 53: 90%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 56:  bucket 57: 10%  bucket 57: 20%  bucket 56: 10%  bucket 57: 30%  bucket 56: 20%  bucket 57: 40%  bucket 57: 50%  bucket 56: 30%  bucket 57: 60%  bucket 57: 70%  bucket 56: 40%  bucket 57: 80%  bucket 57: 90%  bucket 56: 50%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  Sorting block time: 00:00:00Returning block of 86 for bucket 57  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 59: 10%  bucket 58: 30%  bucket 59: 20%  bucket 59: 30%  bucket 58: 40%  bucket 59: 40%  bucket 59: 50%  bucket 58: 50%  bucket 59: 60%  bucket 58: 60%  bucket 59: 70%  bucket 58: 70%  bucket 59: 80%  bucket 59: 90%  bucket 58: 80%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #17)" name="16" time="41.589176177978516">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 10%Getting block 5 of 60  bucket 1: 20%  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  bucket 1: 30%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 5  bucket 1: 40%  bucket 2: 10%Getting block 6 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 6  bucket 2: 20%  bucket 1: 50%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6  bucket 3: 10%  bucket 2: 30%  bucket 5: 10%  bucket 1: 60%  bucket 2: 40%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  Entering block accumulator loop for bucket 4:  bucket 2: 50%  bucket 3: 20%  bucket 6: 10%  bucket 5: 30%Getting block 8 of 60  bucket 3: 30%  Reserving size (126) for bucket 8  bucket 6: 20%  bucket 5: 40%Getting block 7 of 60  bucket 2: 60%  bucket 5: 50%  bucket 4: 10%  bucket 1: 70%  bucket 2: 70%  bucket 3: 40%  bucket 5: 60%  bucket 6: 30%  bucket 2: 80%  Reserving size (126) for bucket 7  bucket 1: 80%  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 7  bucket 4: 20%  bucket 6: 40%  bucket 3: 50%  bucket 5: 70%  bucket 2: 90%  bucket 6: 50%  bucket 1: 90%  Entering block accumulator loop for bucket 7:  bucket 5: 80%  bucket 6: 60%  Entering block accumulator loop for bucket 8:  bucket 1: 100%  bucket 2: 100%  bucket 7: 10%  bucket 6: 70%  bucket 4: 30%  bucket 3: 60%  bucket 5: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 40%  bucket 3: 70%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 10%  bucket 3: 80%  bucket 7: 20%  bucket 6: 90%  bucket 4: 50%  bucket 8: 20%  bucket 3: 90%  bucket 6: 100%  bucket 7: 30%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 4: 60%  bucket 7: 40%  bucket 3: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 8: 30%  bucket 7: 50%  bucket 4: 70%  bucket 7: 60%  bucket 8: 40%  bucket 4: 80%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 4: 90%  bucket 7: 90%  bucket 8: 60%  bucket 4: 100%  bucket 7: 100%  Sorting block of length 68 for bucket 4  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 70%  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%Getting block 11 of 60  bucket 9: 20%  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  Entering block accumulator loop for bucket 11:  bucket 9: 40%  bucket 10: 20%  bucket 11: 10%  bucket 9: 50%  bucket 10: 30%  bucket 11: 20%  bucket 9: 60%  bucket 10: 40%  bucket 11: 30%  bucket 9: 70%  bucket 10: 50%  bucket 11: 40%  bucket 9: 80%  bucket 10: 60%  bucket 11: 50%  bucket 9: 90%  bucket 11: 60%  bucket 10: 70%  bucket 9: 100%  bucket 11: 70%  bucket 10: 80%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 11: 80%  bucket 10: 90%  bucket 11: 90%  bucket 10: 100%  bucket 11: 100%  Sorting block of length 89 for bucket 10  Sorting block of length 95 for bucket 11  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Entering block accumulator loop for bucket 12:  Calculating Z arrays for bucket 13  bucket 12: 10%Getting block 14 of 60  Entering block accumulator loop for bucket 13:  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 12: 20%  bucket 13: 10%  bucket 13: 20%  bucket 12: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 12: 40%  bucket 13: 40%  bucket 12: 50%  bucket 13: 50%  bucket 13: 60%  bucket 12: 60%  bucket 13: 70%  bucket 12: 70%  bucket 14: 10%  bucket 13: 80%  bucket 14: 20%  bucket 13: 90%  bucket 12: 80%  bucket 13: 100%  bucket 14: 30%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 90%  bucket 14: 40%  bucket 12: 100%  bucket 14: 50%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 16: 40%  bucket 15: 70%  bucket 15: 80%  bucket 16: 50%  bucket 15: 90%  bucket 16: 60%  bucket 15: 100%  bucket 16: 70%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 18: 40%  bucket 19: 20%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 18: 90%  bucket 19: 70%  bucket 19: 80%  bucket 18: 100%  bucket 19: 90%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  Entering block accumulator loop for bucket 21:  bucket 20: 10%  bucket 21: 10%  bucket 20: 20%  bucket 21: 20%  bucket 20: 30%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 20: 70%  bucket 21: 60%  bucket 20: 80%  bucket 21: 70%  bucket 21: 80%  bucket 20: 90%  bucket 21: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 24: 40%  bucket 23: 60%  bucket 24: 50%  bucket 23: 70%  bucket 24: 60%  bucket 23: 80%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 10%  bucket 25: 20%  Entering block accumulator loop for bucket 26:  bucket 25: 30%  bucket 26: 10%  bucket 25: 40%  bucket 26: 20%  bucket 25: 50%  bucket 26: 30%  bucket 25: 60%  bucket 26: 40%  bucket 25: 70%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 25: 80%  bucket 26: 80%  bucket 26: 90%  bucket 25: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%Getting block 29 of 60  bucket 28: 20%  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 30%  bucket 28: 40%  Entering block accumulator loop for bucket 29:  bucket 28: 50%  bucket 28: 60%  bucket 29: 10%  bucket 28: 70%  bucket 29: 20%  bucket 28: 80%  bucket 29: 30%  bucket 28: 90%  bucket 29: 40%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  Sorting block time: 00:00:00Returning block of 107 for bucket 28  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 30:  bucket 31: 10%  bucket 30: 10%  bucket 31: 20%  bucket 30: 20%  bucket 31: 30%  bucket 30: 30%  bucket 31: 40%  bucket 30: 40%  bucket 31: 50%  bucket 30: 50%  bucket 31: 60%  bucket 30: 60%  bucket 31: 70%  bucket 30: 70%  bucket 31: 80%  bucket 30: 80%  bucket 31: 90%  bucket 30: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 40%  bucket 33: 50%  Entering block accumulator loop for bucket 34:  bucket 33: 60%  bucket 34: 10%  bucket 33: 70%  bucket 34: 20%  bucket 33: 80%  bucket 34: 30%  bucket 34: 40%  bucket 33: 90%  bucket 34: 50%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 35: 20%  bucket 35: 30%  bucket 36: 20%  bucket 35: 40%  bucket 36: 30%  bucket 35: 50%  bucket 36: 40%  bucket 35: 60%  bucket 36: 50%  bucket 35: 70%  bucket 36: 60%  bucket 35: 80%  bucket 36: 70%  bucket 35: 90%  bucket 36: 80%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 10%  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 39: 10%  bucket 38: 30%  bucket 39: 20%  bucket 38: 40%  bucket 39: 30%  bucket 38: 50%  bucket 39: 40%  bucket 39: 50%  bucket 38: 60%  bucket 39: 60%  bucket 38: 70%  bucket 39: 70%  bucket 39: 80%  bucket 38: 80%  bucket 39: 90%  bucket 38: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 40%  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 40: 60%  bucket 41: 10%  bucket 40: 70%  bucket 41: 20%  bucket 40: 80%  bucket 41: 30%  bucket 40: 90%  bucket 41: 40%  bucket 40: 100%  Sorting block of length 41 for bucket 40  bucket 41: 50%  (Using difference cover)  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%Getting block 44 of 60  Reserving size (126) for bucket 44  bucket 43: 20%  Calculating Z arrays for bucket 44  bucket 43: 30%  bucket 43: 40%  Entering block accumulator loop for bucket 44:  bucket 43: 50%  bucket 43: 60%  bucket 44: 10%  bucket 43: 70%  bucket 44: 20%  bucket 43: 80%  bucket 44: 30%  bucket 43: 90%  bucket 44: 40%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  Sorting block time: 00:00:00Returning block of 122 for bucket 43  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 45:  Entering block accumulator loop for bucket 46:  bucket 45: 10%  bucket 46: 10%  bucket 45: 20%  bucket 46: 20%  bucket 45: 30%  bucket 46: 30%  bucket 45: 40%  bucket 46: 40%  bucket 45: 50%  bucket 46: 50%  bucket 45: 60%  bucket 46: 60%  bucket 45: 70%  bucket 46: 70%  bucket 45: 80%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  bucket 45: 90%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:Getting block 49 of 60  Reserving size (126) for bucket 49  bucket 48: 10%  Calculating Z arrays for bucket 49  bucket 48: 20%  bucket 48: 30%  Entering block accumulator loop for bucket 49:  bucket 48: 40%  bucket 48: 50%  bucket 49: 10%  bucket 48: 60%  bucket 49: 20%  bucket 48: 70%  bucket 49: 30%  bucket 48: 80%  bucket 49: 40%  bucket 48: 90%  bucket 49: 50%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  bucket 50: 10%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 51: 10%  bucket 50: 30%  bucket 51: 20%  bucket 50: 40%  bucket 51: 30%  bucket 50: 50%  bucket 51: 40%  bucket 50: 60%  bucket 51: 50%  bucket 50: 70%  bucket 51: 60%  bucket 50: 80%  bucket 50: 90%  bucket 51: 70%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 56:  bucket 55: 10%Getting block 57 of 60  bucket 56: 10%  bucket 55: 20%  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 20%  bucket 55: 30%  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 57: 10%  bucket 56: 50%  bucket 55: 40%  bucket 57: 20%  bucket 56: 60%  bucket 55: 50%  bucket 56: 70%  bucket 57: 30%  bucket 56: 80%  bucket 55: 60%  bucket 57: 40%  bucket 56: 90%  bucket 55: 70%  bucket 57: 50%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 60%  bucket 55: 80%  bucket 57: 70%  bucket 55: 90%  bucket 57: 80%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%Getting block 59 of 60  bucket 58: 40%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 50%  bucket 58: 60%  Entering block accumulator loop for bucket 59:  bucket 58: 70%  bucket 59: 10%  bucket 58: 80%  bucket 59: 20%  bucket 58: 90%  bucket 59: 30%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #3)" name="2" time="67.84553289413452">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "fa7e77dce48d0d75",   "src": "hda"  },  "library|input_2": {   "id": "980a3323ed634707",   "src": "hda"  },  "library|type": "paired",  "reference_genome|source": "indexed" }, "job": {  "command_line": "set -o pipefail;         ln -f -s \u0027/galaxy/server/database/objects/e/1/5/dataset_e15bc4b1-3db4-4002-8f3f-af8292db57a0.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/d/1/4/dataset_d1486534-25d0-4da4-b880-c7306d404ba6.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/6/4/3/dataset_643b75ce-7320-47d9-b806-0e1618cc7068.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "copied_from_job_id": null,  "create_time": "2025-04-29T14:06:38.346032",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-zkccb",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "9463fa4fb78fffe0",  "inputs": {   "library|input_1": {    "id": "fa7e77dce48d0d75",    "src": "hda",    "uuid": "e15bc4b1-3db4-4002-8f3f-af8292db57a0"   },   "library|input_2": {    "id": "980a3323ed634707",    "src": "hda",    "uuid": "d1486534-25d0-4da4-b880-c7306d404ba6"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "27.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "27 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1745935627.0000000",    "title": "Job End Time",    "value": "2025-04-29 14:07:07"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1745935600.0000000",    "title": "Job Start Time",    "value": "2025-04-29 14:06:40"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "ec18793e7303e35a",    "src": "hda",    "uuid": "643b75ce-7320-47d9-b806-0e1618cc7068"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"",   "dbkey": "\"phiX\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 281, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 282, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "tool_stdout": "",  "update_time": "2025-04-29T14:07:20.487251",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7fvyiujj.sam v. /tmp/history_bam_converted_to_sam_v38oghne.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 2, "time_seconds": 67.84553289413452, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            10 reads; of these:  10 (100.00%) were paired; of these:    10 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    10 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    10 pairs aligned 0 times concordantly or discordantly; of these:      20 mates make up the pairs; of these:        20 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #4)" name="3" time="47.0300190448761">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 1  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 3 of 60  Reserving size (126) for bucket 3  bucket 2: 10%  Calculating Z arrays for bucket 3Getting block 5 of 60  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 4  bucket 1: 20%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 3:  bucket 1: 30%  bucket 2: 20%Getting block 6 of 60  bucket 3: 10%  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 4:  bucket 1: 40%  bucket 3: 20%  Calculating Z arrays for bucket 6  bucket 2: 30%  bucket 1: 50%  bucket 4: 10%  bucket 3: 30%  bucket 1: 60%  Entering block accumulator loop for bucket 5:  bucket 3: 40%  bucket 2: 40%  Entering block accumulator loop for bucket 6:  bucket 1: 70%  bucket 4: 20%  bucket 5: 10%  bucket 6: 10%  bucket 2: 50%  bucket 1: 80%Getting block 8 of 60  bucket 3: 50%  Reserving size (126) for bucket 8  bucket 6: 20%Getting block 7 of 60  bucket 4: 30%  bucket 5: 20%  Calculating Z arrays for bucket 8  bucket 1: 90%  bucket 4: 40%  bucket 6: 30%  Reserving size (126) for bucket 7  bucket 5: 30%  bucket 6: 40%  bucket 4: 50%  bucket 1: 100%  bucket 3: 60%  bucket 5: 40%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 50%  bucket 2: 60%  bucket 6: 60%  bucket 3: 70%  Entering block accumulator loop for bucket 8:  bucket 3: 80%  bucket 2: 70%  bucket 8: 10%  Calculating Z arrays for bucket 7  bucket 4: 60%  bucket 8: 20%  bucket 2: 80%  bucket 5: 50%  bucket 3: 90%  Entering block accumulator loop for bucket 7:  bucket 8: 30%  bucket 3: 100%  bucket 2: 90%  bucket 6: 70%  bucket 7: 10%  bucket 4: 70%  bucket 5: 60%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 20%  bucket 4: 80%  bucket 6: 80%  bucket 5: 70%  bucket 8: 40%  bucket 4: 90%  bucket 7: 30%  Sorting block time: 00:00:00  bucket 2: 100%  bucket 5: 80%Returning block of 43 for bucket 1  bucket 6: 90%  Sorting block of length 84 for bucket 2  bucket 7: 40%  (Using difference cover)  bucket 8: 50%  bucket 7: 50%  bucket 6: 100%  bucket 8: 60%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 60%  bucket 8: 70%  bucket 4: 100%  bucket 7: 70%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 90%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 90%  (Using difference cover)  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  Sorting block time: 00:00:00  bucket 10: 80%Returning block of 125 for bucket 9  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 30%  bucket 11: 40%  Entering block accumulator loop for bucket 12:  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 40%  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%Getting block 16 of 60  bucket 15: 40%  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  Entering block accumulator loop for bucket 16:  bucket 15: 80%  bucket 16: 10%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  Sorting block time: 00:00:00Returning block of 69 for bucket 15  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 18: 50%  bucket 17: 70%  bucket 18: 60%  bucket 17: 80%  bucket 18: 70%  bucket 17: 90%  bucket 18: 80%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%Getting block 23 of 60  bucket 22: 20%  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  Entering block accumulator loop for bucket 23:  bucket 22: 60%  bucket 22: 70%  bucket 23: 10%  bucket 22: 80%  bucket 22: 90%  bucket 23: 20%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  Sorting block time: 00:00:00Returning block of 81 for bucket 22  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  Entering block accumulator loop for bucket 26:  bucket 25: 30%  bucket 26: 10%  bucket 25: 40%  bucket 26: 20%  bucket 25: 50%  bucket 26: 30%  bucket 25: 60%  bucket 26: 40%  bucket 25: 70%  bucket 26: 50%  bucket 25: 80%  bucket 26: 60%  bucket 25: 90%  bucket 26: 70%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 10%  bucket 27: 20%  Entering block accumulator loop for bucket 28:  bucket 27: 30%  bucket 28: 10%  bucket 27: 40%  bucket 28: 20%  bucket 27: 50%  bucket 28: 30%  bucket 27: 60%  bucket 28: 40%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 40%  bucket 29: 50%  Entering block accumulator loop for bucket 30:  bucket 29: 60%  bucket 30: 10%  bucket 29: 70%  bucket 30: 20%  bucket 29: 80%  bucket 30: 30%  bucket 29: 90%  bucket 30: 40%  bucket 29: 100%  bucket 30: 50%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 33:  Entering block accumulator loop for bucket 32:  bucket 33: 10%  bucket 32: 10%  bucket 33: 20%  bucket 32: 20%  bucket 33: 30%  bucket 32: 30%  bucket 33: 40%  bucket 32: 40%  bucket 33: 50%  bucket 32: 50%  bucket 33: 60%  bucket 32: 60%  bucket 33: 70%  bucket 32: 70%  bucket 33: 80%  bucket 32: 80%  bucket 33: 90%  bucket 32: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 10%  bucket 34: 20%  Entering block accumulator loop for bucket 35:  bucket 34: 30%  bucket 35: 10%  bucket 34: 40%  bucket 35: 20%  bucket 34: 50%  bucket 35: 30%  bucket 35: 40%  bucket 34: 60%  bucket 35: 50%  bucket 34: 70%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 34: 80%  bucket 35: 90%  bucket 34: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 38:  bucket 37: 10%  bucket 38: 10%  bucket 37: 20%  bucket 38: 20%  bucket 37: 30%  bucket 37: 40%  bucket 38: 30%  bucket 37: 50%  bucket 38: 40%  bucket 37: 60%  bucket 38: 50%  bucket 37: 70%  bucket 38: 60%  bucket 37: 80%  bucket 38: 70%  bucket 37: 90%  bucket 38: 80%  bucket 38: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 40: 20%  bucket 39: 30%  bucket 40: 30%  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  bucket 39: 60%  bucket 40: 60%  bucket 39: 70%  bucket 40: 70%  bucket 39: 80%  bucket 40: 80%  bucket 39: 90%  bucket 40: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 41: 10%  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 42: 30%  bucket 41: 40%  bucket 42: 40%  bucket 41: 50%  bucket 42: 50%  bucket 41: 60%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 41: 90%  bucket 42: 70%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%Getting block 45 of 60  bucket 44: 60%  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 70%  bucket 44: 80%  Entering block accumulator loop for bucket 45:  bucket 44: 90%  bucket 45: 10%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  Entering block accumulator loop for bucket 47:  bucket 46: 60%  bucket 47: 10%  bucket 46: 70%  bucket 46: 80%  bucket 47: 20%  bucket 46: 90%  bucket 46: 100%  bucket 47: 30%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  bucket 49: 10%  Entering block accumulator loop for bucket 50:  bucket 49: 20%  bucket 50: 10%  bucket 49: 30%  bucket 50: 20%  bucket 49: 40%  bucket 50: 30%  bucket 50: 40%  bucket 49: 50%  bucket 50: 50%  bucket 49: 60%  bucket 50: 60%  bucket 49: 70%  bucket 50: 70%  bucket 49: 80%  bucket 50: 80%  bucket 50: 90%  bucket 49: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:Getting block 52 of 60  Reserving size (126) for bucket 52  bucket 51: 10%  Calculating Z arrays for bucket 52  bucket 51: 20%  bucket 51: 30%  Entering block accumulator loop for bucket 52:  bucket 51: 40%  bucket 51: 50%  bucket 52: 10%  bucket 51: 60%  bucket 51: 70%  bucket 52: 20%  bucket 51: 80%  bucket 52: 30%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 50%  bucket 54: 60%  Entering block accumulator loop for bucket 55:  bucket 54: 70%  bucket 55: 10%  bucket 54: 80%  bucket 55: 20%  bucket 54: 90%  bucket 55: 30%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  Sorting block time: 00:00:00  (Using difference cover)Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%Getting block 57 of 60  bucket 56: 30%  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 40%  Entering block accumulator loop for bucket 57:  bucket 56: 50%  bucket 57: 10%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 56: 70%  bucket 57: 70%  bucket 56: 80%  bucket 57: 80%  bucket 56: 90%  bucket 57: 90%  bucket 57: 100%  bucket 56: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  Entering block accumulator loop for bucket 59:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 59: 20%  bucket 60: 50%  bucket 59: 30%  bucket 60: 60%  bucket 60: 70%  bucket 59: 40%  bucket 60: 80%  bucket 59: 50%  bucket 60: 90%  bucket 60: 100%  bucket 59: 60%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    71 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    71 pairs aligned 0 times concordantly or discordantly; of these:      142 mates make up the pairs; of these:        74 (52.11%) aligned 0 times        68 (47.89%) aligned exactly 1 time        0 (0.00%) aligned >1 times92.60% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #5)" name="4" time="23.171785831451416">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 4, "time_seconds": 23.171785831451416, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #6)" name="5" time="40.45154047012329">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 1  Reserving size (126) for bucket 2Getting block 3 of 60  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  bucket 3: 10%  bucket 2: 10%  bucket 1: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 1: 20%  bucket 2: 20%Getting block 5 of 60  bucket 1: 30%  Reserving size (126) for bucket 5  bucket 3: 30%  Calculating Z arrays for bucket 5  bucket 1: 40%  bucket 2: 30%  bucket 3: 40%  bucket 4: 10%  bucket 1: 50%Getting block 7 of 60  bucket 4: 20%Getting block 8 of 60  bucket 3: 50%  bucket 1: 60%  bucket 2: 40%Getting block 6 of 60  bucket 2: 50%  Reserving size (126) for bucket 7  Reserving size (126) for bucket 6  bucket 2: 60%  bucket 1: 70%  Reserving size (126) for bucket 8  bucket 4: 30%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 8  bucket 3: 60%  bucket 2: 70%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 3: 70%  Entering block accumulator loop for bucket 8:  bucket 2: 80%  bucket 7: 10%  bucket 5: 20%  bucket 3: 80%  bucket 1: 80%  bucket 2: 90%  bucket 4: 40%  bucket 8: 10%  bucket 7: 20%  bucket 5: 30%  bucket 8: 20%  bucket 3: 90%  bucket 2: 100%  bucket 7: 30%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 1: 90%  bucket 4: 50%  bucket 7: 40%  bucket 5: 40%  bucket 8: 30%  bucket 3: 100%  bucket 7: 50%  bucket 6: 10%  bucket 8: 40%  bucket 1: 100%  bucket 4: 60%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 8: 50%  bucket 4: 70%  bucket 7: 60%  bucket 6: 20%  bucket 8: 60%  bucket 5: 50%  bucket 6: 30%  Sorting block of length 42 for bucket 1  bucket 8: 70%  (Using difference cover)  bucket 6: 40%  bucket 8: 80%  bucket 7: 70%  bucket 4: 80%  bucket 8: 90%  bucket 6: 50%  bucket 5: 60%  bucket 7: 80%  bucket 4: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 60%  bucket 7: 90%  bucket 5: 70%  bucket 4: 100%  bucket 6: 70%  bucket 7: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block of length 75 for bucket 7  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  (Using difference cover)  bucket 5: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 11: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 40%  bucket 14: 10%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 16: 10%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 16: 40%  bucket 15: 70%  bucket 16: 50%  bucket 15: 80%  bucket 16: 60%  bucket 15: 90%  bucket 16: 70%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 68 for bucket 15  bucket 16: 90%  (Using difference cover)  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Entering block accumulator loop for bucket 17:  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  bucket 17: 60%  bucket 18: 30%  bucket 17: 70%  bucket 18: 40%  bucket 17: 80%  bucket 18: 50%  bucket 17: 90%  bucket 18: 60%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  bucket 21: 20%  Entering block accumulator loop for bucket 22:  bucket 21: 30%  bucket 22: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 21: 60%  bucket 22: 30%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  Sorting block time: 00:00:00Returning block of 55 for bucket 21  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 60  Reserving size (126) for bucket 24  bucket 23: 10%  Calculating Z arrays for bucket 24  bucket 23: 20%  bucket 23: 30%  Entering block accumulator loop for bucket 24:  bucket 23: 40%  bucket 24: 10%  bucket 23: 50%  bucket 24: 20%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 24: 40%  bucket 23: 80%  bucket 24: 50%  bucket 23: 90%  bucket 23: 100%  bucket 24: 60%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 10%  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 27: 20%  bucket 26: 60%  bucket 26: 70%  bucket 27: 30%  bucket 26: 80%  bucket 27: 40%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  Sorting block time: 00:00:00  (Using difference cover)Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 20%  bucket 28: 30%  Entering block accumulator loop for bucket 29:  bucket 28: 40%  bucket 29: 10%  bucket 28: 50%  bucket 29: 20%  bucket 28: 60%  bucket 29: 30%  bucket 28: 70%  bucket 29: 40%  bucket 28: 80%  bucket 29: 50%  bucket 28: 90%  bucket 29: 60%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 60%  bucket 31: 70%  Entering block accumulator loop for bucket 32:  bucket 31: 80%  bucket 31: 90%  bucket 32: 10%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  Entering block accumulator loop for bucket 34:  bucket 33: 10%  bucket 34: 10%  bucket 33: 20%  bucket 34: 20%  bucket 33: 30%  bucket 34: 30%  bucket 33: 40%  bucket 34: 40%  bucket 33: 50%  bucket 34: 50%  bucket 33: 60%  bucket 34: 60%  bucket 33: 70%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 37: 30%  bucket 36: 30%  bucket 37: 40%  bucket 36: 40%  bucket 37: 50%  bucket 36: 50%  bucket 37: 60%  bucket 37: 70%  bucket 36: 60%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  bucket 36: 70%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Entering block accumulator loop for bucket 38:  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 10%  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 38: 30%  bucket 39: 10%  bucket 38: 40%  bucket 38: 50%  bucket 39: 20%  bucket 39: 30%  bucket 38: 60%  bucket 38: 70%  bucket 39: 40%  bucket 38: 80%  bucket 39: 50%  bucket 38: 90%  bucket 39: 60%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 20%  bucket 41: 30%  Entering block accumulator loop for bucket 42:  bucket 41: 40%  bucket 41: 50%  bucket 42: 10%  bucket 41: 60%  bucket 42: 20%  bucket 41: 70%  bucket 42: 30%  bucket 41: 80%  bucket 42: 40%  bucket 42: 50%  bucket 41: 90%  bucket 42: 60%  bucket 41: 100%  Sorting block of length 88 for bucket 41  bucket 42: 70%  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  bucket 43: 10%  Entering block accumulator loop for bucket 44:  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  bucket 44: 20%  bucket 44: 30%  bucket 43: 40%  bucket 44: 40%  bucket 43: 50%  bucket 44: 50%  bucket 43: 60%  bucket 44: 60%  bucket 43: 70%  bucket 44: 70%  bucket 44: 80%  bucket 43: 80%  bucket 44: 90%  bucket 43: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 10%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 47: 20%  Entering block accumulator loop for bucket 48:  bucket 47: 30%  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 47: 40%  bucket 49: 10%  bucket 48: 20%  bucket 47: 50%  bucket 49: 20%  bucket 47: 60%  bucket 48: 30%  bucket 47: 70%  bucket 49: 30%  bucket 48: 40%  bucket 47: 80%  bucket 49: 40%  bucket 48: 50%  bucket 47: 90%  bucket 49: 50%  bucket 47: 100%  bucket 48: 60%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 49: 60%  bucket 48: 70%  bucket 49: 70%  bucket 48: 80%  bucket 49: 80%  bucket 48: 90%  Sorting block time: 00:00:00Returning block of 84 for bucket 47  bucket 49: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 51: 10%  bucket 52: 10%  bucket 51: 20%  bucket 52: 20%  bucket 51: 30%  bucket 52: 30%  bucket 51: 40%  bucket 52: 40%  bucket 51: 50%  bucket 52: 50%  bucket 51: 60%  bucket 51: 70%  bucket 52: 60%  bucket 51: 80%  bucket 52: 70%  bucket 51: 90%  bucket 52: 80%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 60  Reserving size (126) for bucket 54  bucket 53: 20%  Calculating Z arrays for bucket 54  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  Entering block accumulator loop for bucket 54:  bucket 53: 60%  bucket 53: 70%  bucket 54: 10%  bucket 53: 80%  bucket 54: 20%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  Sorting block time: 00:00:00Returning block of 79 for bucket 53  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 56:  bucket 55: 10%  bucket 55: 20%  bucket 56: 10%  bucket 55: 30%  bucket 56: 20%  bucket 56: 30%  bucket 55: 40%  bucket 56: 40%  bucket 55: 50%  bucket 55: 60%  bucket 56: 50%  bucket 55: 70%  bucket 56: 60%  bucket 55: 80%  bucket 56: 70%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 58: 40%  bucket 57: 50%  bucket 58: 50%  bucket 57: 60%  bucket 58: 60%  bucket 57: 70%  bucket 58: 70%  bucket 57: 80%  bucket 57: 90%  bucket 58: 80%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 59: 10%  bucket 60: 10%  bucket 59: 20%  bucket 60: 20%  bucket 59: 30%  bucket 60: 30%  bucket 59: 40%  bucket 60: 40%  bucket 60: 50%  bucket 59: 50%  bucket 60: 60%  bucket 59: 60%  bucket 60: 70%  bucket 59: 70%  bucket 60: 80%  bucket 60: 90%  bucket 59: 80%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:013 reads; of these:  3 (100.00%) were unpaired; of these:    3 (100.00%) aligned 0 times    0 (0.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #7)" name="6" time="41.061267375946045">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3Getting block 4 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4  bucket 1: 10%  Calculating Z arrays for bucket 4  bucket 2: 10%  bucket 3: 10%  bucket 1: 20%Getting block 5 of 60  bucket 3: 20%  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 1: 30%  bucket 2: 20%  Calculating Z arrays for bucket 5  bucket 3: 40%  bucket 4: 10%  bucket 2: 30%Getting block 6 of 60  bucket 3: 50%  Reserving size (126) for bucket 6  bucket 1: 40%  Calculating Z arrays for bucket 6Getting block 7 of 60  Entering block accumulator loop for bucket 6:  Reserving size (126) for bucket 7  bucket 1: 50%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 7  bucket 3: 60%  bucket 6: 10%  bucket 4: 20%  bucket 2: 40%  bucket 3: 70%  bucket 1: 60%  bucket 4: 30%  bucket 6: 20%  bucket 3: 80%  Entering block accumulator loop for bucket 7:  bucket 1: 70%  bucket 5: 10%  bucket 4: 40%  bucket 7: 10%  bucket 2: 50%Getting block 8 of 60  bucket 5: 20%  bucket 2: 60%  bucket 1: 80%  bucket 4: 50%  bucket 7: 20%  bucket 6: 30%  bucket 3: 90%  bucket 1: 90%  bucket 5: 30%  bucket 7: 30%  bucket 2: 70%  bucket 3: 100%  bucket 4: 60%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 40%  bucket 6: 40%  bucket 1: 100%  bucket 2: 80%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 7: 40%  Reserving size (126) for bucket 8  bucket 2: 90%  bucket 5: 50%  bucket 6: 50%  Calculating Z arrays for bucket 8  bucket 4: 70%  bucket 7: 50%  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 6: 60%  bucket 4: 80%  bucket 5: 60%  bucket 7: 60%  bucket 4: 90%  bucket 6: 70%  bucket 5: 70%  bucket 7: 70%  bucket 4: 100%  bucket 6: 80%  bucket 7: 80%  bucket 5: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 6: 90%  Entering block accumulator loop for bucket 8:  bucket 7: 90%  bucket 5: 90%  bucket 6: 100%  bucket 7: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 10%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 20%  bucket 8: 30%  Sorting block time: 00:00:00Returning block of 107 for bucket 3  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 10: 90%  bucket 9: 80%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 13:  bucket 13: 10%  Entering block accumulator loop for bucket 11:  bucket 13: 20%  bucket 13: 30%  bucket 11: 10%  bucket 13: 40%  bucket 11: 20%  bucket 13: 50%  bucket 12: 10%  bucket 13: 60%  bucket 11: 30%  bucket 12: 20%  bucket 13: 70%  bucket 11: 40%  bucket 13: 80%  bucket 12: 30%  bucket 13: 90%  bucket 11: 50%  bucket 12: 40%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 14: 30%  bucket 15: 10%  bucket 14: 40%  bucket 14: 50%  bucket 15: 20%  bucket 14: 60%  bucket 15: 30%  bucket 14: 70%  bucket 15: 40%  bucket 14: 80%  bucket 15: 50%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  Sorting block time: 00:00:00  (Using difference cover)Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 16: 10%  bucket 17: 20%  bucket 16: 20%  bucket 17: 30%  bucket 16: 30%  bucket 17: 40%  bucket 16: 40%  bucket 17: 50%  bucket 16: 50%  bucket 17: 60%  bucket 16: 60%  bucket 17: 70%  bucket 16: 70%  bucket 17: 80%  bucket 16: 80%  bucket 17: 90%  bucket 16: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 18: 20%  bucket 19: 20%  bucket 18: 30%  bucket 19: 30%  bucket 18: 40%  bucket 19: 40%  bucket 18: 50%  bucket 19: 50%  bucket 18: 60%  bucket 19: 60%  bucket 18: 70%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 30%  bucket 20: 40%  Entering block accumulator loop for bucket 21:  bucket 20: 50%  bucket 21: 10%  bucket 20: 60%  bucket 21: 20%  bucket 20: 70%  bucket 21: 30%  bucket 20: 80%  bucket 21: 40%  bucket 20: 90%  bucket 21: 50%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 24:  bucket 23: 10%  bucket 24: 10%  bucket 23: 20%Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 20%  bucket 23: 30%  bucket 24: 30%  bucket 23: 40%  Entering block accumulator loop for bucket 25:  bucket 24: 40%  bucket 23: 50%  bucket 24: 50%  bucket 23: 60%  bucket 24: 60%  bucket 23: 70%  bucket 23: 80%  bucket 25: 10%  bucket 24: 70%  bucket 23: 90%  bucket 25: 20%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 25: 30%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  Sorting block time: 00:00:00Returning block of 65 for bucket 23  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%  bucket 26: 30%  bucket 27: 20%  bucket 26: 40%  bucket 27: 30%  bucket 27: 40%  bucket 26: 50%  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 27: 70%  bucket 26: 70%  bucket 27: 80%  bucket 27: 90%  bucket 26: 80%  bucket 27: 100%  bucket 26: 90%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 29: 50%  bucket 30: 40%  bucket 29: 60%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 30: 80%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 32: 20%  bucket 31: 30%  bucket 32: 30%  bucket 32: 40%  bucket 31: 40%  bucket 32: 50%  bucket 31: 50%  bucket 32: 60%  bucket 32: 70%  bucket 31: 60%  bucket 32: 80%  bucket 31: 70%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 33: 40%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 33: 60%  bucket 34: 70%  bucket 33: 70%  bucket 34: 80%  bucket 33: 80%  bucket 34: 90%  bucket 33: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  Sorting block time: 00:00:00Returning block of 113 for bucket 35  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 38: 10%  bucket 37: 30%  bucket 38: 20%  bucket 37: 40%  bucket 38: 30%  bucket 37: 50%  bucket 38: 40%  bucket 37: 60%  bucket 38: 50%  bucket 37: 70%  bucket 38: 60%  bucket 37: 80%  bucket 38: 70%  bucket 38: 80%  bucket 37: 90%  bucket 38: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 39: 30%  bucket 40: 10%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 40: 30%  bucket 39: 60%  bucket 40: 40%  bucket 39: 70%  bucket 40: 50%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 40: 70%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 20%  bucket 41: 30%  Entering block accumulator loop for bucket 42:  bucket 41: 40%  bucket 42: 10%  bucket 41: 50%  bucket 42: 20%  bucket 42: 30%  bucket 41: 60%  bucket 42: 40%  bucket 41: 70%  bucket 42: 50%  bucket 41: 80%  bucket 42: 60%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  Entering block accumulator loop for bucket 44:  bucket 43: 10%  bucket 44: 10%  bucket 43: 20%  bucket 44: 20%  bucket 44: 30%  bucket 43: 30%  bucket 44: 40%  bucket 43: 40%  bucket 44: 50%  bucket 43: 50%  bucket 44: 60%  bucket 43: 60%  bucket 44: 70%  bucket 44: 80%  bucket 43: 70%  bucket 44: 90%  bucket 43: 80%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 20%  bucket 45: 30%  Entering block accumulator loop for bucket 46:  bucket 45: 40%  bucket 46: 10%  bucket 45: 50%  bucket 46: 20%  bucket 45: 60%  bucket 46: 30%  bucket 45: 70%  bucket 46: 40%  bucket 45: 80%  bucket 46: 50%  bucket 45: 90%  bucket 46: 60%  bucket 45: 100%  bucket 46: 70%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 48: 20%  bucket 49: 10%  bucket 48: 30%  bucket 49: 20%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 49: 30%  bucket 48: 70%  bucket 49: 40%  bucket 48: 80%  bucket 49: 50%  bucket 48: 90%  bucket 49: 60%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 50:  bucket 51: 10%  bucket 50: 10%  bucket 51: 20%  bucket 50: 20%  bucket 51: 30%  bucket 50: 30%  bucket 51: 40%  bucket 50: 40%  bucket 51: 50%  bucket 50: 50%  bucket 51: 60%  bucket 50: 60%  bucket 51: 70%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  bucket 51: 80%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 10%  bucket 53: 20%  Entering block accumulator loop for bucket 54:  bucket 53: 30%  bucket 54: 10%  bucket 53: 40%  bucket 54: 20%  bucket 54: 30%  bucket 53: 50%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 50%  bucket 55: 60%  Entering block accumulator loop for bucket 56:  bucket 55: 70%  bucket 56: 10%  bucket 55: 80%  bucket 56: 20%  bucket 55: 90%  bucket 55: 100%  bucket 56: 30%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 59: 10%  bucket 58: 30%  bucket 58: 40%  bucket 59: 20%  bucket 58: 50%  bucket 59: 30%  bucket 58: 60%  bucket 59: 40%  bucket 58: 70%  bucket 58: 80%  bucket 59: 50%  bucket 58: 90%  bucket 58: 100%  bucket 59: 60%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #8)" name="7" time="46.260353326797485">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:Getting block 4 of 60  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 10%  Calculating Z arrays for bucket 4  bucket 2: 10%  bucket 1: 20%  bucket 3: 10%  bucket 1: 30%Getting block 5 of 60  Entering block accumulator loop for bucket 4:Getting block 6 of 60  Reserving size (126) for bucket 5  Reserving size (126) for bucket 6  bucket 1: 40%Getting block 8 of 60  bucket 1: 50%Getting block 7 of 60  Calculating Z arrays for bucket 6  bucket 1: 60%  bucket 3: 20%  Calculating Z arrays for bucket 5  bucket 4: 10%  Reserving size (126) for bucket 7  bucket 2: 20%  bucket 3: 30%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 4: 20%  Reserving size (126) for bucket 8  bucket 3: 40%  Entering block accumulator loop for bucket 7:  bucket 1: 70%  bucket 2: 30%  bucket 6: 10%  Entering block accumulator loop for bucket 5:  bucket 1: 80%  bucket 7: 10%  bucket 2: 40%  Calculating Z arrays for bucket 8  bucket 1: 90%  bucket 4: 30%  bucket 3: 50%  bucket 1: 100%  bucket 2: 50%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 4: 40%  bucket 5: 10%  bucket 7: 20%  bucket 2: 60%  bucket 6: 20%  bucket 3: 60%  Entering block accumulator loop for bucket 8:  bucket 4: 50%  bucket 5: 20%  bucket 6: 30%  bucket 7: 30%  bucket 3: 70%  bucket 5: 30%  bucket 2: 70%  bucket 6: 40%  bucket 5: 40%  bucket 7: 40%  bucket 8: 10%  bucket 5: 50%  bucket 2: 80%  bucket 4: 60%  bucket 7: 50%  bucket 6: 50%  bucket 2: 90%  bucket 8: 20%  bucket 3: 80%  bucket 6: 60%  Sorting block time: 00:00:00  bucket 2: 100%  bucket 7: 60%  bucket 3: 90%Returning block of 43 for bucket 1  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 8: 30%  bucket 4: 70%  bucket 5: 60%  bucket 6: 70%  bucket 8: 40%  bucket 4: 80%  bucket 3: 100%  bucket 7: 70%  bucket 8: 50%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 80%  bucket 8: 60%  bucket 5: 70%  bucket 7: 80%  bucket 4: 90%  bucket 5: 80%  bucket 8: 70%  bucket 7: 90%  bucket 5: 90%  bucket 4: 100%  bucket 8: 80%  Sorting block of length 68 for bucket 4  bucket 5: 100%  (Using difference cover)  bucket 7: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 90%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 9: 50%  Entering block accumulator loop for bucket 11:  bucket 10: 10%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 11: 10%  bucket 9: 80%  bucket 10: 30%  bucket 9: 90%  bucket 11: 20%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 40%  bucket 11: 30%  bucket 11: 40%  bucket 10: 50%  bucket 11: 50%  bucket 10: 60%  bucket 11: 60%  bucket 10: 70%  bucket 11: 70%  bucket 10: 80%  bucket 11: 80%  bucket 10: 90%  bucket 11: 90%  Sorting block time: 00:00:00Returning block of 125 for bucket 9  bucket 10: 100%  bucket 11: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  bucket 12: 10%  Entering block accumulator loop for bucket 13:  bucket 12: 20%  bucket 13: 10%  bucket 13: 20%  bucket 12: 30%  bucket 13: 30%  bucket 12: 40%  bucket 13: 40%  bucket 13: 50%  bucket 12: 50%  bucket 13: 60%  bucket 12: 60%  bucket 13: 70%  bucket 13: 80%  bucket 12: 70%  bucket 12: 80%  bucket 13: 90%  bucket 12: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 30%  bucket 14: 40%  Entering block accumulator loop for bucket 15:  bucket 14: 50%  bucket 14: 60%  bucket 15: 10%  bucket 14: 70%  bucket 15: 20%  bucket 14: 80%  bucket 15: 30%  bucket 15: 40%  bucket 14: 90%  bucket 14: 100%  bucket 15: 50%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 30%  bucket 16: 40%  Entering block accumulator loop for bucket 17:  bucket 16: 50%  bucket 17: 10%  bucket 16: 60%  bucket 17: 20%  bucket 16: 70%  bucket 17: 30%  bucket 16: 80%  bucket 17: 40%  bucket 16: 90%  bucket 17: 50%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 18: 10%  bucket 19: 10%  bucket 18: 20%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 18: 30%  bucket 19: 50%  bucket 18: 40%  bucket 19: 60%  bucket 18: 50%  bucket 19: 70%  bucket 18: 60%  bucket 19: 80%  bucket 18: 70%  bucket 19: 90%  bucket 18: 80%  bucket 19: 100%  bucket 18: 90%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 10%Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 20: 30%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 20: 40%  bucket 22: 10%  bucket 20: 50%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 22: 30%  bucket 20: 70%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 20: 80%  bucket 21: 80%  bucket 22: 50%  bucket 20: 90%  bucket 21: 90%  bucket 22: 60%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 23:  bucket 24: 10%  bucket 23: 10%  bucket 24: 20%  bucket 23: 20%  bucket 24: 30%  bucket 23: 30%  bucket 24: 40%  bucket 23: 40%  bucket 24: 50%  bucket 23: 50%  bucket 24: 60%  bucket 23: 60%  bucket 24: 70%  bucket 23: 70%  bucket 24: 80%  bucket 23: 80%  bucket 24: 90%  bucket 23: 90%  bucket 23: 100%  bucket 24: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 26: 10%  bucket 27: 10%  bucket 26: 20%  bucket 27: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 26: 70%  bucket 27: 70%  bucket 26: 80%  bucket 27: 80%  bucket 26: 90%  bucket 27: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  bucket 30: 10%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 31: 10%  bucket 30: 30%  bucket 30: 40%  bucket 31: 20%  bucket 30: 50%  bucket 31: 30%  bucket 30: 60%  bucket 31: 40%  bucket 30: 70%  bucket 31: 50%  bucket 30: 80%  bucket 31: 60%  bucket 30: 90%  bucket 31: 70%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 10%  bucket 32: 20%  Entering block accumulator loop for bucket 33:  bucket 32: 30%  bucket 33: 10%  bucket 32: 40%  bucket 33: 20%  bucket 32: 50%  bucket 33: 30%  bucket 32: 60%  bucket 33: 40%  bucket 32: 70%  bucket 33: 50%  bucket 32: 80%  bucket 33: 60%  bucket 32: 90%  bucket 33: 70%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  Entering block accumulator loop for bucket 35:  bucket 34: 70%  bucket 34: 80%  bucket 35: 10%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  Sorting block time: 00:00:00  bucket 35: 60%Returning block of 123 for bucket 34  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 36: 50%  bucket 37: 50%  bucket 36: 60%  bucket 37: 60%  bucket 36: 70%  bucket 37: 70%  bucket 36: 80%  bucket 37: 80%  bucket 36: 90%  bucket 37: 90%  bucket 36: 100%  bucket 37: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 10%  bucket 38: 20%  Entering block accumulator loop for bucket 39:  bucket 38: 30%  bucket 39: 10%  bucket 38: 40%  bucket 38: 50%  bucket 39: 20%  bucket 38: 60%  bucket 39: 30%  bucket 38: 70%  bucket 38: 80%  bucket 39: 40%  bucket 38: 90%  bucket 39: 50%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 10%  bucket 40: 20%  Entering block accumulator loop for bucket 41:  bucket 40: 30%  bucket 40: 40%  bucket 41: 10%  bucket 40: 50%  bucket 41: 20%  bucket 40: 60%  bucket 41: 30%  bucket 40: 70%  bucket 41: 40%  bucket 40: 80%  bucket 40: 90%  bucket 41: 50%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  Sorting block time: 00:00:00Returning block of 42 for bucket 40  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 20%  bucket 42: 30%  Entering block accumulator loop for bucket 43:  bucket 42: 40%  bucket 43: 10%  bucket 43: 20%  bucket 42: 50%  bucket 43: 30%  bucket 43: 40%  bucket 42: 60%  bucket 43: 50%  bucket 43: 60%  bucket 42: 70%  bucket 43: 70%  bucket 43: 80%  bucket 42: 80%  bucket 43: 90%  bucket 42: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Entering block accumulator loop for bucket 44:  Calculating Z arrays for bucket 45  bucket 44: 10%  bucket 44: 20%  Entering block accumulator loop for bucket 45:  bucket 44: 30%  bucket 44: 40%  bucket 45: 10%  bucket 44: 50%  bucket 45: 20%  bucket 44: 60%  bucket 44: 70%  bucket 45: 30%  bucket 44: 80%  bucket 45: 40%  bucket 44: 90%  bucket 45: 50%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 30%  bucket 46: 40%  Entering block accumulator loop for bucket 47:  bucket 46: 50%  bucket 47: 10%  bucket 46: 60%  bucket 47: 20%  bucket 46: 70%  bucket 47: 30%  bucket 46: 80%  bucket 47: 40%  bucket 46: 90%  bucket 47: 50%  bucket 46: 100%  bucket 47: 60%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 49: 10%  bucket 48: 20%  bucket 49: 20%  bucket 48: 30%  bucket 49: 30%  bucket 48: 40%  bucket 48: 50%  bucket 49: 40%  bucket 48: 60%  bucket 49: 50%  bucket 48: 70%  bucket 49: 60%  bucket 48: 80%  bucket 49: 70%  bucket 48: 90%  bucket 49: 80%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:Getting block 51 of 60  Reserving size (126) for bucket 51  bucket 50: 10%  Calculating Z arrays for bucket 51  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  Entering block accumulator loop for bucket 51:  bucket 50: 50%  bucket 51: 10%  bucket 50: 60%  bucket 51: 20%  bucket 50: 70%  bucket 51: 30%  bucket 50: 80%  bucket 51: 40%  bucket 51: 50%  bucket 50: 90%  bucket 51: 60%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 53:  bucket 52: 10%  bucket 53: 10%  bucket 52: 20%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 53: 40%  bucket 52: 50%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 52: 60%  bucket 53: 80%  bucket 52: 70%  bucket 53: 90%  bucket 52: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 40%  bucket 54: 50%  Entering block accumulator loop for bucket 55:  bucket 54: 60%  bucket 55: 10%  bucket 55: 20%  bucket 54: 70%  bucket 55: 30%  bucket 54: 80%  bucket 55: 40%  bucket 54: 90%  bucket 54: 100%  bucket 55: 50%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 57: 10%  bucket 56: 30%  bucket 57: 20%  bucket 56: 40%  bucket 57: 30%  bucket 56: 50%  bucket 57: 40%  bucket 56: 60%  bucket 57: 50%  bucket 56: 70%  bucket 57: 60%  bucket 56: 80%  bucket 57: 70%  bucket 56: 90%  bucket 57: 80%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  Entering block accumulator loop for bucket 59:  bucket 58: 10%  bucket 59: 10%  bucket 58: 20%  bucket 59: 20%  bucket 58: 30%  bucket 59: 30%  bucket 58: 40%  bucket 59: 40%  bucket 59: 50%  bucket 58: 50%  bucket 59: 60%  bucket 58: 60%  bucket 59: 70%  bucket 58: 70%  bucket 59: 80%  bucket 58: 80%  bucket 59: 90%  bucket 58: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #9)" name="8" time="47.19139647483826">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%Getting block 4 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4  bucket 1: 30%  bucket 2: 20%  Calculating Z arrays for bucket 4Getting block 5 of 60  bucket 2: 30%  bucket 1: 40%  Reserving size (126) for bucket 5  bucket 3: 10%  bucket 1: 50%  bucket 2: 40%Getting block 6 of 60  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 5  bucket 3: 20%  bucket 1: 60%  bucket 2: 50%Getting block 7 of 60  Reserving size (126) for bucket 6  bucket 3: 30%Getting block 8 of 60  bucket 2: 60%  Entering block accumulator loop for bucket 5:  bucket 4: 10%  Reserving size (126) for bucket 8  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 6  bucket 4: 20%  Calculating Z arrays for bucket 8  bucket 5: 10%  Calculating Z arrays for bucket 7  bucket 1: 70%  bucket 2: 70%  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 1: 80%  Entering block accumulator loop for bucket 8:  bucket 5: 30%  Entering block accumulator loop for bucket 7:  bucket 2: 80%  bucket 3: 40%  bucket 1: 90%  bucket 8: 10%  bucket 2: 90%  bucket 7: 10%  bucket 5: 40%  bucket 4: 30%  bucket 8: 20%  bucket 2: 100%  bucket 1: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 40%  bucket 3: 50%  bucket 6: 10%  bucket 7: 20%  bucket 8: 30%  bucket 5: 50%  bucket 3: 60%  bucket 6: 20%  bucket 7: 30%  bucket 5: 60%  bucket 8: 40%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 30%  bucket 8: 50%  bucket 5: 70%  bucket 4: 50%  bucket 3: 70%  bucket 5: 80%  bucket 8: 60%  bucket 4: 60%  bucket 6: 40%  bucket 8: 70%  bucket 5: 90%  bucket 7: 40%  bucket 8: 80%  bucket 6: 50%  bucket 4: 70%  bucket 3: 80%  bucket 8: 90%  bucket 5: 100%  bucket 7: 50%  bucket 8: 100%  bucket 4: 80%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 60%  bucket 3: 90%  bucket 7: 60%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 4: 90%  bucket 3: 100%  bucket 7: 70%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00  bucket 4: 100%  bucket 6: 80%  bucket 7: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00  bucket 7: 90%Returning block of 43 for bucket 1  bucket 6: 90%Returning block of 85 for bucket 2  bucket 6: 100%  bucket 7: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 100%  Calculating Z arrays for bucket 10  Sorting block of length 124 for bucket 9  (Using difference cover)  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 60  Reserving size (126) for bucket 12  bucket 11: 10%  Calculating Z arrays for bucket 12  bucket 11: 20%  bucket 11: 30%  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 11: 100%  bucket 12: 70%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 13: 50%  bucket 14: 20%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 13: 80%  bucket 14: 40%  bucket 13: 90%  bucket 14: 50%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  Sorting block time: 00:00:00Returning block of 69 for bucket 15  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 19: 20%  bucket 20: 20%  bucket 19: 30%  bucket 20: 30%  bucket 19: 40%  bucket 20: 40%  bucket 19: 50%  bucket 20: 50%  bucket 19: 60%  bucket 20: 60%  bucket 19: 70%  bucket 20: 70%  bucket 19: 80%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  Entering block accumulator loop for bucket 24:  bucket 22: 20%  bucket 23: 10%  bucket 24: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 24: 20%  bucket 22: 50%  bucket 23: 30%  bucket 24: 30%  bucket 22: 60%  bucket 23: 40%  bucket 22: 70%  bucket 24: 40%  bucket 22: 80%  bucket 23: 50%  bucket 24: 50%  bucket 22: 90%  bucket 23: 60%  bucket 22: 100%  bucket 24: 60%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 24: 70%  bucket 23: 80%  bucket 24: 80%  bucket 23: 90%  bucket 24: 90%  bucket 23: 100%  bucket 24: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 10%  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 27: 20%  bucket 26: 60%  bucket 27: 30%  bucket 26: 70%  bucket 27: 40%  bucket 26: 80%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  bucket 27: 60%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 20%Getting block 31 of 60  Entering block accumulator loop for bucket 30:  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 29: 30%  bucket 30: 10%  bucket 29: 40%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 29: 50%  bucket 30: 30%  bucket 29: 60%  bucket 30: 40%  bucket 31: 10%  bucket 30: 50%  bucket 29: 70%  bucket 31: 20%  bucket 30: 60%  bucket 31: 30%  bucket 29: 80%  bucket 30: 70%  bucket 31: 40%  bucket 30: 80%  bucket 29: 90%  bucket 31: 50%  bucket 30: 90%  bucket 31: 60%  bucket 29: 100%  bucket 30: 100%  Sorting block of length 51 for bucket 29  Sorting block of length 124 for bucket 30  (Using difference cover)  (Using difference cover)  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%Getting block 33 of 60  Reserving size (126) for bucket 33  bucket 32: 20%  Calculating Z arrays for bucket 33  bucket 32: 30%  Entering block accumulator loop for bucket 33:  bucket 32: 40%  bucket 33: 10%  bucket 32: 50%  bucket 33: 20%  bucket 32: 60%  bucket 33: 30%  bucket 32: 70%  bucket 33: 40%  bucket 32: 80%  bucket 33: 50%  bucket 32: 90%  bucket 32: 100%  bucket 33: 60%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  bucket 34: 10%  Entering block accumulator loop for bucket 35:  bucket 34: 20%  bucket 35: 10%  bucket 34: 30%  bucket 35: 20%  bucket 34: 40%  bucket 35: 30%  bucket 35: 40%  bucket 34: 50%  bucket 35: 50%  bucket 34: 60%  bucket 35: 60%  bucket 34: 70%  bucket 34: 80%  bucket 35: 70%  bucket 34: 90%  bucket 35: 80%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 36: 50%  bucket 37: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 37: 60%  bucket 36: 100%  bucket 37: 70%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 40%  bucket 38: 50%  Entering block accumulator loop for bucket 39:  bucket 38: 60%  bucket 38: 70%  bucket 39: 10%  bucket 38: 80%  bucket 39: 20%  bucket 38: 90%  bucket 38: 100%  bucket 39: 30%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  Sorting block time: 00:00:00Returning block of 118 for bucket 38  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  Entering block accumulator loop for bucket 43:  bucket 42: 10%  bucket 43: 10%  bucket 42: 20%  bucket 43: 20%  bucket 42: 30%  bucket 43: 30%  bucket 42: 40%  bucket 43: 40%  bucket 42: 50%  bucket 43: 50%  bucket 42: 60%  bucket 43: 60%  bucket 42: 70%  bucket 43: 70%  bucket 42: 80%  bucket 43: 80%  bucket 42: 90%  bucket 43: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%Getting block 45 of 60  bucket 44: 20%  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 30%  bucket 44: 40%  Entering block accumulator loop for bucket 45:  bucket 44: 50%  bucket 45: 10%  bucket 44: 60%  bucket 45: 20%  bucket 44: 70%  bucket 45: 30%  bucket 44: 80%  bucket 45: 40%  bucket 44: 90%  bucket 45: 50%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:Getting block 47 of 60  Reserving size (126) for bucket 47  bucket 46: 10%  Calculating Z arrays for bucket 47  bucket 46: 20%  Entering block accumulator loop for bucket 47:  bucket 46: 30%  bucket 46: 40%  bucket 47: 10%  bucket 46: 50%  bucket 47: 20%  bucket 46: 60%  bucket 46: 70%  bucket 47: 30%  bucket 46: 80%  bucket 47: 40%  bucket 46: 90%  bucket 47: 50%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 50:  bucket 49: 10%  bucket 50: 10%  bucket 49: 20%  bucket 50: 20%  bucket 49: 30%  bucket 50: 30%  bucket 50: 40%  bucket 49: 40%  bucket 50: 50%  bucket 49: 50%  bucket 50: 60%  bucket 49: 60%  bucket 50: 70%  bucket 49: 70%  bucket 50: 80%  bucket 49: 80%  bucket 50: 90%  bucket 49: 90%  bucket 50: 100%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 52: 50%  bucket 51: 80%  bucket 51: 90%  bucket 52: 60%  bucket 51: 100%  Sorting block of length 91 for bucket 51  bucket 52: 70%  (Using difference cover)  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 54:  bucket 55: 10%  bucket 54: 10%  bucket 55: 20%  bucket 54: 20%  bucket 55: 30%  bucket 54: 30%  bucket 55: 40%  bucket 54: 40%  bucket 55: 50%  bucket 54: 50%  bucket 55: 60%  bucket 54: 60%  bucket 55: 70%  bucket 54: 70%  bucket 55: 80%  bucket 54: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 57: 10%  bucket 56: 30%  bucket 57: 20%  bucket 56: 40%  bucket 57: 30%  bucket 56: 50%  bucket 57: 40%  bucket 56: 60%  bucket 57: 50%  bucket 56: 70%  bucket 57: 60%  bucket 57: 70%  bucket 56: 80%  bucket 57: 80%  bucket 56: 90%  bucket 57: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 30%  Entering block accumulator loop for bucket 60:  bucket 59: 40%  bucket 60: 10%  bucket 59: 50%  bucket 60: 20%  bucket 60: 30%  bucket 59: 60%  bucket 60: 40%  bucket 59: 70%  bucket 60: 50%  bucket 59: 80%  bucket 60: 60%  bucket 59: 90%  bucket 60: 70%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #10)" name="9" time="47.05761766433716">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 2:  bucket 1: 10%  Calculating Z arrays for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 2: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  bucket 2: 20%  bucket 1: 30%  bucket 3: 10%Getting block 5 of 60  bucket 1: 40%  Entering block accumulator loop for bucket 4:  bucket 2: 30%  bucket 1: 50%  Reserving size (126) for bucket 5  bucket 2: 40%  bucket 3: 20%  bucket 1: 60%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 1: 70%  bucket 2: 50%  bucket 3: 30%  bucket 4: 10%  bucket 1: 80%  Calculating Z arrays for bucket 5  bucket 3: 40%  bucket 2: 60%  bucket 1: 90%  Calculating Z arrays for bucket 6  bucket 4: 20%  bucket 2: 70%  bucket 3: 50%  bucket 1: 100%Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 2: 80%  Entering block accumulator loop for bucket 5:  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 4: 30%Getting block 8 of 60  bucket 4: 40%  bucket 2: 90%  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 7  bucket 4: 50%  bucket 2: 100%  Entering block accumulator loop for bucket 6:  bucket 3: 60%  Calculating Z arrays for bucket 8  bucket 4: 60%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 5: 10%  bucket 4: 70%  Entering block accumulator loop for bucket 7:  Sorting block time: 00:00:00  bucket 5: 20%  bucket 3: 70%  bucket 4: 80%  bucket 6: 10%  bucket 4: 90%  Entering block accumulator loop for bucket 8:  bucket 7: 10%Returning block of 43 for bucket 1  bucket 4: 100%  bucket 6: 20%  bucket 5: 30%  bucket 7: 20%  bucket 3: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 40%  bucket 6: 30%  bucket 7: 30%  bucket 5: 50%  bucket 3: 90%  bucket 8: 10%  bucket 7: 40%  bucket 6: 40%  bucket 5: 60%  bucket 3: 100%  bucket 8: 20%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 50%  bucket 5: 70%  bucket 8: 30%  bucket 7: 60%  bucket 6: 50%  bucket 5: 80%  bucket 8: 40%  bucket 7: 70%  bucket 5: 90%  bucket 6: 60%  bucket 8: 50%  bucket 7: 80%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 8: 60%  bucket 7: 90%  bucket 6: 80%  bucket 8: 70%  bucket 7: 100%  bucket 6: 90%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block time: 00:00:00  Sorting block of length 94 for bucket 8  (Using difference cover)Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 30%  Calculating Z arrays for bucket 10  bucket 9: 40%  bucket 9: 50%  Entering block accumulator loop for bucket 10:  bucket 9: 60%  bucket 9: 70%  bucket 10: 10%  bucket 9: 80%  bucket 10: 20%  bucket 9: 90%  bucket 10: 30%  bucket 9: 100%  bucket 10: 40%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  bucket 11: 30%  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 12: 40%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 60%  bucket 15: 70%  Entering block accumulator loop for bucket 16:  bucket 15: 80%  bucket 16: 10%  bucket 15: 90%  bucket 16: 20%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Entering block accumulator loop for bucket 17:  Calculating Z arrays for bucket 18  bucket 17: 10%  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 17: 40%  bucket 18: 10%  bucket 17: 50%  bucket 18: 20%  bucket 17: 60%  bucket 18: 30%  bucket 17: 70%  bucket 18: 40%  bucket 17: 80%  bucket 18: 50%  bucket 17: 90%  bucket 18: 60%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Entering block accumulator loop for bucket 19:  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 19: 40%  bucket 20: 20%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 22: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 22: 60%  bucket 21: 90%  bucket 22: 70%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 24:  bucket 23: 10%  bucket 24: 10%  bucket 23: 20%  bucket 24: 20%  bucket 23: 30%  bucket 24: 30%  bucket 23: 40%  bucket 24: 40%  bucket 23: 50%  bucket 24: 50%  bucket 23: 60%  bucket 24: 60%  bucket 23: 70%  bucket 24: 70%  bucket 23: 80%  bucket 24: 80%  bucket 23: 90%  bucket 24: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 50%  bucket 25: 60%  Entering block accumulator loop for bucket 26:  bucket 25: 70%  bucket 26: 10%  bucket 25: 80%  bucket 26: 20%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  Sorting block time: 00:00:00Returning block of 67 for bucket 25  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 30%  bucket 28: 40%  Entering block accumulator loop for bucket 29:  bucket 28: 50%  bucket 28: 60%  bucket 29: 10%  bucket 28: 70%  bucket 29: 20%  bucket 28: 80%  bucket 29: 30%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  Sorting block time: 00:00:00  bucket 29: 80%Returning block of 107 for bucket 28  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  Entering block accumulator loop for bucket 31:  bucket 30: 40%  bucket 30: 50%  bucket 31: 10%  bucket 30: 60%  bucket 30: 70%  bucket 31: 20%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  Sorting block time: 00:00:00Returning block of 125 for bucket 30  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%Getting block 34 of 60  bucket 33: 20%  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 30%  bucket 33: 40%  Entering block accumulator loop for bucket 34:  bucket 33: 50%  bucket 34: 10%  bucket 33: 60%  bucket 34: 20%  bucket 33: 70%  bucket 34: 30%  bucket 33: 80%  bucket 34: 40%  bucket 33: 90%  bucket 34: 50%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 35: 20%  bucket 36: 20%  bucket 35: 30%  bucket 36: 30%  bucket 35: 40%  bucket 36: 40%  bucket 36: 50%  bucket 35: 50%  bucket 36: 60%  bucket 35: 60%  bucket 36: 70%  bucket 35: 70%  bucket 36: 80%  bucket 36: 90%  bucket 35: 80%  bucket 35: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 39: 10%  bucket 38: 20%  bucket 39: 20%  bucket 38: 30%  bucket 39: 30%  bucket 38: 40%  bucket 39: 40%  bucket 38: 50%  bucket 39: 50%  bucket 38: 60%  bucket 39: 60%  bucket 38: 70%  bucket 39: 70%  bucket 38: 80%  bucket 39: 80%  bucket 38: 90%  bucket 39: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 40:  bucket 41: 10%  bucket 41: 20%  bucket 40: 10%  bucket 41: 30%  bucket 40: 20%  bucket 41: 40%  bucket 41: 50%  bucket 40: 30%  bucket 41: 60%  bucket 40: 40%  bucket 41: 70%  bucket 41: 80%  bucket 40: 50%  bucket 41: 90%  bucket 40: 60%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  bucket 43: 10%  Entering block accumulator loop for bucket 44:  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  bucket 44: 20%  bucket 43: 40%  bucket 44: 30%  bucket 43: 50%  bucket 43: 60%  bucket 44: 40%  bucket 43: 70%  bucket 44: 50%  bucket 43: 80%  bucket 44: 60%  bucket 43: 90%  bucket 44: 70%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:Getting block 46 of 60  bucket 45: 10%  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 20%  bucket 45: 30%  Entering block accumulator loop for bucket 46:  bucket 45: 40%  bucket 45: 50%  bucket 46: 10%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  Sorting block time: 00:00:00Returning block of 80 for bucket 45  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:Getting block 49 of 60  bucket 48: 10%  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  Entering block accumulator loop for bucket 49:  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 49: 10%  bucket 48: 80%  bucket 48: 90%  bucket 49: 20%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  bucket 50: 10%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 50: 30%  bucket 51: 10%  bucket 50: 40%  bucket 51: 20%  bucket 50: 50%  bucket 50: 60%  bucket 51: 30%  bucket 50: 70%  bucket 51: 40%  bucket 50: 80%  bucket 51: 50%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 60  Reserving size (126) for bucket 54  bucket 53: 20%  Calculating Z arrays for bucket 54  bucket 53: 30%  bucket 53: 40%  Entering block accumulator loop for bucket 54:  bucket 53: 50%  bucket 53: 60%  bucket 54: 10%  bucket 53: 70%  bucket 54: 20%  bucket 53: 80%  bucket 54: 30%  bucket 53: 90%  bucket 54: 40%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  Sorting block time: 00:00:00Returning block of 79 for bucket 53  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 55: 30%  bucket 56: 10%  bucket 55: 40%  bucket 56: 20%  bucket 55: 50%  bucket 56: 30%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 56: 40%  bucket 55: 90%  bucket 56: 50%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  Entering block accumulator loop for bucket 59:  bucket 58: 10%  bucket 59: 10%  bucket 58: 20%  bucket 59: 20%  bucket 58: 30%  bucket 59: 30%  bucket 59: 40%  bucket 58: 40%  bucket 59: 50%  bucket 58: 50%  bucket 59: 60%  bucket 59: 70%  bucket 58: 60%  bucket 59: 80%  bucket 58: 70%  bucket 59: 90%  bucket 58: 80%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="ivar_removereads (Test #1)" name="0" time="31.270406484603882">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 0, "time_seconds": 31.270406484603882, "tool_id": "ivar_removereads", "tool_version": "1.4.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="ivar_removereads (Test #2)" name="1" time="75.79808449745178">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "amplicons|computed": "yes",  "input_bam": {   "id": "995b1746a5eede51",   "src": "hda"  },  "input_bed": {   "id": "d295e776228f5bab",   "src": "hda"  },  "variants_tsv": {   "id": "513f3bc00d4d1106",   "src": "hda"  } }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/3/a/2/dataset_3a2cf324-3619-448c-9ff5-d1463d8fd605.dat\u0027 binding_sites.bed \u0026\u0026 python \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/sanitize_bed.py\u0027 binding_sites.bed \u0026\u0026 python \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/write_amplicon_info_file.py\u0027 binding_sites.bed amplicon_info.tsv \u0026\u0026 ivar getmasked -i \u0027/galaxy/server/database/objects/7/6/f/dataset_76f9b433-d3ee-4138-94c2-1d9364d1e1dd.dat\u0027 -b binding_sites.bed -f amplicon_info.tsv -p masked_primers \u0026\u0026  python \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/completemask.py\u0027 masked_primers.txt amplicon_info.tsv \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/7/b/7/dataset_7b757808-334f-47e6-a3d2-8be02bf7b287.dat\u0027 sorted.bam \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/e/e/9/metadata_ee96b38b-0aee-408f-9bb8-50f45cf69b6d.dat\u0027 sorted.bam.bai \u0026\u0026  ivar removereads -i sorted.bam -b binding_sites.bed -p removed_reads.bam -t masked_primers.txt",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T14:04:17.239087",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-2xfpf",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "ec5823b2dbb830c3",  "inputs": {   "input_bam": {    "id": "995b1746a5eede51",    "src": "hda",    "uuid": "7b757808-334f-47e6-a3d2-8be02bf7b287"   },   "input_bed": {    "id": "d295e776228f5bab",    "src": "hda",    "uuid": "3a2cf324-3619-448c-9ff5-d1463d8fd605"   },   "variants_tsv": {    "id": "513f3bc00d4d1106",    "src": "hda",    "uuid": "76f9b433-d3ee-4138-94c2-1d9364d1e1dd"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_bam": {    "id": "6a3b4123e304aa3d",    "src": "hda",    "uuid": "4702880e-d93b-4b5d-9b16-80a248cd7dfb"   }  },  "params": {   "__input_ext": "\"input\"",   "amplicons": "{\"__current_case__\": 0, \"computed\": \"yes\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\""  },  "state": "error",  "stderr": "Found 67 primers in BED file\nPrimer pair is empty.\nPrimer pair is empty.\nPrimer pair is empty.\nFound 67 primers in BED file\n",  "stdout": "400_18_out_L**\n400_23_out_R\n400_32_out_L\n400_18_out_L**\t400_18_out_R**\t400_23_out_R\t400_23_out_L\t400_32_out_L\t400_32_out_R\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n2035 reads were removed.\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ivar_removereads/1.4.3+galaxy0",  "tool_stderr": "Found 67 primers in BED file\nPrimer pair is empty.\nPrimer pair is empty.\nPrimer pair is empty.\nFound 67 primers in BED file\n",  "tool_stdout": "400_18_out_L**\n400_23_out_R\n400_32_out_L\n400_18_out_L**\t400_18_out_R**\t400_23_out_R\t400_23_out_L\t400_32_out_L\t400_32_out_R\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n2035 reads were removed.\n",  "update_time": "2025-04-29T14:05:00.704868",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ivar_removereads/1.4.3+galaxy0, exit_code: None, stderr: Found 67 primers in BED file\nPrimer pair is empty.\nPrimer pair is empty.\nPrimer pair is empty.\nFound 67 primers in BED file\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ivar_removereads/1.4.3+galaxy0, exit_code: None, stderr: Found 67 primers in BED file\nPrimer pair is empty.\nPrimer pair is empty.\nPrimer pair is empty.\nFound 67 primers in BED file\n." ], "status": "failure", "test_index": 1, "time_seconds": 75.79808449745178, "tool_id": "ivar_removereads", "tool_version": "1.4.3+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            400_18_out_L**400_23_out_R400_32_out_L400_18_out_L**400_18_out_R**400_23_out_R400_23_out_L400_32_out_L400_32_out_RRemoving reads primed with any of:400_18_out_L**400_18_out_R**400_23_out_L400_23_out_R400_32_out_L400_32_out_RWriting to removed_reads.bamNumber of references: 1Reference Name: PRVReference Length: 10807Using Region: PRVSorted By CoordinateResults:2035 reads were removed.
            ]]></system-out>
            <system-err><![CDATA[
            Found 67 primers in BED filePrimer pair is empty.Primer pair is empty.Primer pair is empty.Found 67 primers in BED file
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #1)" name="0" time="67.0227427482605">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #2)" name="1" time="39.16549825668335">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #3)" name="2" time="41.7502179145813">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #4)" name="3" time="14.129597663879395">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 3, "time_seconds": 14.129597663879395, "tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #5)" name="4" time="41.426985025405884">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_idxstats (Test #1)" name="0" time="45.577749490737915">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_idxstats (Test #2)" name="1" time="38.49832224845886">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #1)" name="0" time="93.68684077262878">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #2)" name="1" time="37.08233952522278">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #11)" name="10" time="38.24136447906494">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #12)" name="11" time="37.752169132232666">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #13)" name="12" time="39.42305564880371">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #14)" name="13" time="37.753822803497314">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #15)" name="14" time="37.46248483657837">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #16)" name="15" time="36.96960806846619">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #17)" name="16" time="38.693116664886475">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #18)" name="17" time="39.171541929244995">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #19)" name="18" time="39.10760974884033">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #20)" name="19" time="11.573662281036377">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 175, in stage_data_in_history
    staging_interface.handle_jobs()
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 212, in handle_jobs
    self.galaxy_interactor.wait_for_job(job_response["id"], job_response["history_id"], self.maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in wait_for_job
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 403, in wait_for
    wait_on(func, what, walltime_exceeded)
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py", line 38, in wait_on
    value = function()
            ^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 399, in <lambda>
    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 747, in __job_ready
    return self._state_ready(job_id, error_msg="Job in error state.")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 839, in _state_ready
    raise Exception(
Exception: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in \u003clambda\u003e\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 747, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.10/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 839, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error", "test_index": 19, "time_seconds": 11.573662281036377, "tool_id": "split_file_to_collection", "tool_version": "0.5.2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #3)" name="2" time="38.71303105354309">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #4)" name="3" time="38.251739501953125">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #5)" name="4" time="48.23729634284973">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #6)" name="5" time="39.077239990234375">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #7)" name="6" time="39.774677753448486">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #8)" name="7" time="38.668997287750244">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #9)" name="8" time="39.89340376853943">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #10)" name="9" time="37.43570351600647">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #1)" name="0" time="206.60677981376648">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:43:26)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/154/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-04-29 13:43:26)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-04-29 13:43:26)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/154/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/154/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/154/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/154/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/154/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/154/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.123+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/154/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/154/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/154/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/154/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/154/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.096    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.100    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.113    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.115    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.123    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.154     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.166     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.166     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.166     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.166     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.167     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.167     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.167     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.755     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.757     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.932     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.932     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.968     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.968     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.969     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.969     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.969     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.546  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.546  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.547     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.734     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.734     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.769     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.769     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.892     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.902     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.917     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.919     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.923     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.925     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.928     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.929     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.929     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.929     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.929     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.931     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.931     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.931     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.931     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.931     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.932     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.933     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.933     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.955     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.956     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.013     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.014     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.054     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.055     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.055     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.055     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.055     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.165     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.511     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.582     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.420     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.421     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.421     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.421     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.422     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.422     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.422     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.422     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.422     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.422     1M / 55M   INFO   StageManager             (stage.cpp                 : 189..               : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-04-29 13:45:32)Filter by read depth        (2025-04-29 13:45:32)Filter homopolymer loops    (2025-04-29 13:45:32)Merge all possible          (2025-04-29 13:45:32)Normalise read depths       (2025-04-29 13:45:32)Remove zero length segments (2025-04-29 13:45:32)Sort link order             (2025-04-29 13:45:32)Graph cleaning finished     (2025-04-29 13:45:32)Saving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-04-29 13:45:32)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/Determining graph multiplicity (2025-04-29 13:45:32)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-04-29 13:45:32)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 13:45:32)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 13:45:32)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2025-04-29 13:45:32)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-04-29 13:45:32)Segments eligible for deletion:Bridged assembly graph (2025-04-29 13:45:32)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 13:45:32)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 13:45:45)Saving /galaxy/server/database/jobs_directory/000/154/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/154/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #2)" name="1" time="185.27963304519653">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "graph_clean|min_component_size": "1000",  "graph_clean|min_dead_end_size": "1000",  "keep": "0",  "linear_seqs": "0",  "long": {   "id": "0dd7c020bf5fa94b",   "src": "hda"  },  "lr_align|scores": "3,-6,-5,-2",  "min_fasta_length": "100",  "mode": "normal",  "paired_unpaired|fastq_input1": {   "id": "d3736a8d1cc60be7",   "src": "hda"  },  "paired_unpaired|fastq_input2": {   "id": "9b7d614c98f878e0",   "src": "hda"  },  "paired_unpaired|fastq_input_selector": "paired",  "rotation|no_rotate": false,  "rotation|start_gene_cov": "95",  "rotation|start_gene_id": "90",  "spades|depth_filter": "0.25",  "spades|kmer_count": "10",  "spades|max_kmer_frac": "0.95",  "spades|min_kmer_frac": "0.2" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/a/b/e/dataset_abe25eff-a157-4e36-8ea3-5dcb4585778d.dat\u0027 fq1.fastq.gz \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/a/6/8/dataset_a689b76d-3bfb-40f9-863c-b34fec9d0c75.dat\u0027 fq2.fastq.gz \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/b/f/8/dataset_bf80d98c-7bc1-4618-8123-2c1224a831e9.dat\u0027 \u0027lr.fasta\u0027 \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 \u0027fq1.fastq.gz\u0027 -2 \u0027fq2.fastq.gz\u0027 -l lr.fasta --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027  --keep 0",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T13:46:30.304904",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-bb4l7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "64a3b0c6f01c9f56",  "inputs": {   "long": {    "id": "0dd7c020bf5fa94b",    "src": "hda",    "uuid": "bf80d98c-7bc1-4618-8123-2c1224a831e9"   },   "paired_unpaired|fastq_input1": {    "id": "d3736a8d1cc60be7",    "src": "hda",    "uuid": "abe25eff-a157-4e36-8ea3-5dcb4585778d"   },   "paired_unpaired|fastq_input2": {    "id": "9b7d614c98f878e0",    "src": "hda",    "uuid": "a689b76d-3bfb-40f9-863c-b34fec9d0c75"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "assembly": {    "id": "0a42eb30e2b148f8",    "src": "hda",    "uuid": "b188d77d-08d4-4d43-81be-7e43680ab6d1"   },   "assembly_graph": {    "id": "684ffc65a0dc1d4a",    "src": "hda",    "uuid": "1c80695c-50fa-4a98-a4e5-df76e5d8e59b"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "keep": "\"0\"",   "linear_seqs": "\"0\"",   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 219, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 220, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "reuse": "[]",   "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}"  },  "state": "error",  "stderr": "",  "stdout": "\nStarting Unicycler (2025-04-29 13:46:32)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/158/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2025-04-29 13:46:32)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2025-04-29 13:46:33)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.123+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: [\u0027/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz\u0027]\n      right reads: [\u0027/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz\u0027]\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.102    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.106    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.119    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.121    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.129    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.161     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.175     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.175     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.175     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.175     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.176     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.176     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.176     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.830     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.832     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.030     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.030     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.070     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.070     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.071     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.071     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.072     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.653  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.653  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.654     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.841     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.841     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.881     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:01.881     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.027     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.037     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.053     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.056     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.059     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.061     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.065     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.065     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.066     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.066     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.066     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.070     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.070     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.095     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.096     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.168     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.169     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:02.214     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:02.327     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.674     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.255     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:04.576     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:04.576     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:04.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:04.578     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:04.578     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:04.578     1M / 55M   INFO   StageManager             (stage.cpp    \n..\n48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2025-04-29 13:48:48)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 \u003c-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/\n\n\nDetermining graph multiplicity (2025-04-29 13:48:48)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2025-04-29 13:48:48)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2025-04-29 13:48:48)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2025-04-29 13:48:48)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2025-04-29 13:48:48)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2025-04-29 13:48:48)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2025-04-29 13:48:48)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A-\u003eC-\u003eD and B-\u003eC-\u003eE) or (A-\u003eC-\u003eE and B-\u003eC-\u003eD). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A-\u003eC-\u003eB), one time (A-\u003eC-\u003eD-\u003eC-\u003eB), two times\n(A-\u003eC-\u003eD-\u003eC-\u003eD-\u003eC-\u003eB), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2025-04-29 13:48:48)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2025-04-29 13:48:48)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2025-04-29 13:48:48)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.091 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2025-04-29 13:48:49)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/158/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2025-04-29 13:48:49)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -\u003e end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2025-04-29 13:48:49)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -\u003e end   Path   Quality   Result\n\n\nCleaning up leftover segments (2025-04-29 13:48:49)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2025-04-29 13:48:49)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2025-04-29 13:48:49)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2025-04-29 13:49:01)\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.fasta\n\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0",  "tool_stderr": "",  "tool_stdout": "\nStarting Unicycler (2025-04-29 13:46:32)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/158/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2025-04-29 13:46:32)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2025-04-29 13:46:33)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.123+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: [\u0027/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz\u0027]\n      right reads: [\u0027/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz\u0027]\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.102    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.106    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.119    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.121    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.129    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.161     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.175     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.175     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.175     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.175     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.176     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.176     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.176     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.830     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.832     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.030     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.030     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.070     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.070     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.071     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.071     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.072     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.653  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.653  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.654     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.841     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.841     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.881     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:01.881     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.027     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.037     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.053     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.056     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.059     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.061     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.065     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.065     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.066     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.066     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.066     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.070     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.070     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.095     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.096     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.168     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.169     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:02.214     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:02.327     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.674     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.255     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:04.576     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:04.576     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:04.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:04.578     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:04.578     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:04.578     1M / 55M   INFO   StageManager             (stage.cpp    \n..\n48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2025-04-29 13:48:48)\nFilter by read depth        (2025-04-29 13:48:48)\nFilter homopolymer loops    (2025-04-29 13:48:48)\nMerge all possible          (2025-04-29 13:48:48)\nNormalise read depths       (2025-04-29 13:48:48)\nRemove zero length segments (2025-04-29 13:48:48)\nSort link order             (2025-04-29 13:48:48)\nGraph cleaning finished     (2025-04-29 13:48:48)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2025-04-29 13:48:48)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 \u003c-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/\n\n\nDetermining graph multiplicity (2025-04-29 13:48:48)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2025-04-29 13:48:48)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2025-04-29 13:48:48)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2025-04-29 13:48:48)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2025-04-29 13:48:48)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2025-04-29 13:48:48)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2025-04-29 13:48:48)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A-\u003eC-\u003eD and B-\u003eC-\u003eE) or (A-\u003eC-\u003eE and B-\u003eC-\u003eD). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A-\u003eC-\u003eB), one time (A-\u003eC-\u003eD-\u003eC-\u003eB), two times\n(A-\u003eC-\u003eD-\u003eC-\u003eD-\u003eC-\u003eB), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2025-04-29 13:48:48)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2025-04-29 13:48:48)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2025-04-29 13:48:48)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.091 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2025-04-29 13:48:49)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/158/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2025-04-29 13:48:49)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -\u003e end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2025-04-29 13:48:49)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -\u003e end   Path   Quality   Result\n\n\nCleaning up leftover segments (2025-04-29 13:48:49)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2025-04-29 13:48:49)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2025-04-29 13:48:49)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2025-04-29 13:49:01)\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.fasta\n\n",  "update_time": "2025-04-29T13:49:04.422117",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 185.27963304519653, "tool_id": "unicycler", "tool_version": "0.5.1+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:46:32)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/158/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-04-29 13:46:32)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-04-29 13:46:33)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.123+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/158/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz']      right reads: ['/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz: max reads length: 251/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.102    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.106    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.119    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.121    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.129    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.161     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.175     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.175     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.175     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.175     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.176     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.176     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.176     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.830     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.832     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.030     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.030     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.070     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.070     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.071     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.071     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.072     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.653  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.653  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.654     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.841     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.841     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.881     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.881     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.027     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.037     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.053     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.056     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.059     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.061     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.065     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.065     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.066     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.066     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.066     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.068     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.070     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.070     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.095     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.096     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.168     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.169     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.214     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.214     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.327     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.674     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.255     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.576     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.576     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.578     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.578     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.578     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.578     1M / 55M   INFO   StageManager             (stage.cpp    ..48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-04-29 13:48:48)Filter by read depth        (2025-04-29 13:48:48)Filter homopolymer loops    (2025-04-29 13:48:48)Merge all possible          (2025-04-29 13:48:48)Normalise read depths       (2025-04-29 13:48:48)Remove zero length segments (2025-04-29 13:48:48)Sort link order             (2025-04-29 13:48:48)Graph cleaning finished     (2025-04-29 13:48:48)Saving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-04-29 13:48:48)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/Determining graph multiplicity (2025-04-29 13:48:48)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-04-29 13:48:48)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 13:48:48)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 13:48:48)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-04-29 13:48:48)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2025-04-29 13:48:48)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2025-04-29 13:48:48)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/158/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2025-04-29 13:48:48)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-04-29 13:48:48)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2025-04-29 13:48:48)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.091 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2025-04-29 13:48:49)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/158/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-04-29 13:48:49)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-04-29 13:48:49)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-04-29 13:48:49)Segments eligible for deletion:Bridged assembly graph (2025-04-29 13:48:49)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 13:48:49)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 13:49:01)Saving /galaxy/server/database/jobs_directory/000/158/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #3)" name="2" time="184.94466185569763">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:49:35)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/161/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-04-29 13:49:36)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-04-29 13:49:36)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/161/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/161/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/161/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/161/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/161/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/161/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.123+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/161/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/161/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/161/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/161/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/161/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.093    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.097    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.111    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.113    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.121    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.152     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.167     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.167     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.167     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.167     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.168     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.169     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.169     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.726     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.727     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.901     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.901     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.936     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.936     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.937     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.937     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.937     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.481  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.482  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.482     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.662     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.663     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.704     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.704     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.838     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.848     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.865     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.867     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.871     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.872     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.876     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.876     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.876     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.876     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.876     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.878     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.879     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.879     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.879     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.879     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.879     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.881     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.881     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.906     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.906     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.978     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:01.980     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.034     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.034     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.034     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.034     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.034     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.144     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.489     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.074     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.556     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.389     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.389     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.390     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.390     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.390     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.390     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.390     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.390     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.390     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.390     1M / 55M   INFO   StageManager             (stage.cpp                 : 189..               : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-04-29 13:51:42)Filter by read depth        (2025-04-29 13:51:42)Filter homopolymer loops    (2025-04-29 13:51:42)Merge all possible          (2025-04-29 13:51:42)Normalise read depths       (2025-04-29 13:51:42)Remove zero length segments (2025-04-29 13:51:42)Sort link order             (2025-04-29 13:51:42)Graph cleaning finished     (2025-04-29 13:51:42)Saving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-04-29 13:51:42)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/Determining graph multiplicity (2025-04-29 13:51:42)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-04-29 13:51:42)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 13:51:42)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 13:51:42)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2025-04-29 13:51:42)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-04-29 13:51:42)Segments eligible for deletion:Bridged assembly graph (2025-04-29 13:51:42)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 13:51:42)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 13:51:55)Saving /galaxy/server/database/jobs_directory/000/161/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/161/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #4)" name="3" time="42.486807107925415">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:52:37)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/163/workingDependencies:  Program       Version   Status     Path                        spades.py               not used                               racon         1.5.0     good       /usr/local/bin/racon        makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Loading reads (2025-04-29 13:52:37)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2025-04-29 13:52:37)Saving to /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/12_unitig_graph.gfaPolishing miniasm assembly with Racon (2025-04-29 13:52:37)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/13_racon_polished.gfaAssembly complete (2025-04-29 13:52:37)Saving /galaxy/server/database/jobs_directory/000/163/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #5)" name="4" time="68.08850479125977">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:53:33)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/168/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    SPAdes graph already exists. Will use this graph instead of running SPAdes:  /galaxy/server/database/jobs_directory/000/168/working/002_depth_filter.gfaDetermining graph multiplicity (2025-04-29 13:53:34)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments: none    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-04-29 13:53:34)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 4 (0.0%)1 / 4 (25.0%)2 / 4 (50.0%)3 / 4 (75.0%)4 / 4 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        64        63       2        63        64Graph overlaps removedRemoved zero-length segments:    2    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 13:53:34)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 13:53:34)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-04-29 13:53:34)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2025-04-29 13:53:34)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/168/working/miniasm_assembly/all_segments.fastaNumber of minimap alignments: 0Saving to /galaxy/server/database/jobs_directory/000/168/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  0 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2025-04-29 13:53:34)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/168/working/simple_bridging/all_segments.fastaNumber of minimap alignments: 0    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2025-04-29 13:53:34)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-04-29 13:53:34)Done! 0 out of 40 reads alignedAligning reads (2025-04-29 13:53:34)1/40: 570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template (412 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None2/40: b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template (4435 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None3/40: 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template (4127 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None4/40: bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template (4275 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None5/40: f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template (1009 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None6/40: 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template (548 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None7/40: a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template (4456 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None8/40: d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template (475 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None9/40: 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template (658 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None10/40: 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template (11629 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None11/40: 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template (674 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None12/40: ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template (1811 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None13/40: f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template (4509 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None14/40: 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template (4333 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None15/40: ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template (873 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None16/40: 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template (1754 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None17/40: d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template (424 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None18/40: a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template (15194 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None19/40: 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template (683 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None20/40: bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template (1421 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None21/40: cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template (2712 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None22/40: a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template (433 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None23/40: c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template (471 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None24/40: 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template (2112 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None25/40: 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template (4536 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None26/40: ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template (1644 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None27/40: 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template (4615 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None28/40: 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template (4587 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None29/40: 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template (7266 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None30/40: f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template (756 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None31/40: 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template (107 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None32/40: 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template (593 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None33/40: 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template (2838 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None34/40: 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template (4286 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None35/40: 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template (18566 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None36/40: 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template (4605 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None37/40: c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template (31279 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None38/40: c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template (1148 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None39/40: 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template (1739 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None40/40: 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template (4413 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  NoneRead alignment summary (2025-04-29 13:53:34)Total read count:        40Fully aligned reads:      0Partially aligned reads:  0Unaligned reads:         40570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template, b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template, 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template, bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template, f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template, 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template, a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template, d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template, 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template, 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template, 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template, ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template, f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template, 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template, ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template, 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template, d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template, a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template, 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template, bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template, cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template, a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template, c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template, 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template, 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template, ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template, 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template, 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template, 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template, f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template, 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template, 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template, 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template, 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template, 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template, 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template, c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template, c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template, 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template, 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_templateTotal bases aligned:      0 bpMean alignment identity:  0.0%Deleting /galaxy/server/database/jobs_directory/000/168/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-04-29 13:53:34)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-04-29 13:53:34)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-04-29 13:53:34)Segments eligible for deletion:Bridged assembly graph (2025-04-29 13:53:34)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 13:53:34)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 13:53:46)Saving /galaxy/server/database/jobs_directory/000/168/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/168/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #6)" name="5" time="182.66270518302917">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:54:29)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 1Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/171/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-04-29 13:54:29)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-04-29 13:54:29)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/171/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/171/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/171/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/171/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/171/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/171/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.123+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/171/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/171/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/171/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/171/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/171/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.095    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.101    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.117    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.119    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.127    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.158     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.167     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.167     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.167     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.167     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.169     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.169     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.169     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.798     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.799     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.982     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.982     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.015     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.015     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.016     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.016     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.016     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.610  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.610  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.611     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.802     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.802     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.840     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.840     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.970     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.980     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.996     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.999     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.003     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.005     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.008     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.009     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.009     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.009     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.009     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.011     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.011     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.011     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.011     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.011     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.012     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.013     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.013     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.036     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.037     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.103     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.105     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.150     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.261     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.611     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.198     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.688     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.534     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.535     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.535     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.535     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.536     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.536     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.536     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.536     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.536     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.536     1M / 55M   INFO   StageManager             (stage.cpp                 : 189..mbly/K127/scaffolds.fasta  0:00:04.633     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 107)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.paths  0:00:04.636     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 114)   Populating GFA with scaffold paths  0:00:04.641     3M / 159M  INFO    General                 (pipeline.cpp              : 292)   SPAdes finished  0:00:04.643     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-04-29 13:56:36)Filter by read depth        (2025-04-29 13:56:36)Filter homopolymer loops    (2025-04-29 13:56:36)Merge all possible          (2025-04-29 13:56:36)Normalise read depths       (2025-04-29 13:56:36)Remove zero length segments (2025-04-29 13:56:36)Sort link order             (2025-04-29 13:56:36)Graph cleaning finished     (2025-04-29 13:56:36)Saving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-04-29 13:56:36)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/Determining graph multiplicity (2025-04-29 13:56:36)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/171/working/002_depth_filter.gfaCleaning graph (2025-04-29 13:56:36)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/171/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 13:56:36)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 13:56:36)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2025-04-29 13:56:36)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/171/working/004_bridges_applied.gfaCleaning up leftover segments (2025-04-29 13:56:36)Segments eligible for deletion:Bridged assembly graph (2025-04-29 13:56:36)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/171/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 13:56:36)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 13:56:49)Saving /galaxy/server/database/jobs_directory/000/171/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/171/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #7)" name="6" time="178.6901786327362">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "keep": "2",  "long": {   "id": "34d2cf0f4ce08059",   "src": "hda"  },  "mode": "normal",  "paired_unpaired|fastq_input1": {   "id": "924982b53dfd5c2e",   "src": "hda"  },  "paired_unpaired|fastq_input2": {   "id": "167e765a5ab15248",   "src": "hda"  },  "paired_unpaired|fastq_input_selector": "paired" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/3/f/f/dataset_3ffe2c23-56e7-48ec-8bef-cc3c57f1ffb5.dat\u0027 fq1.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/5/2/2/dataset_522516b1-93e2-4d35-9d59-2877375a5e09.dat\u0027 fq2.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/7/9/a/dataset_79a0cec1-430c-4ad2-8c7c-d0e5e38dab4a.dat\u0027 \u0027lr.fasta\u0027 \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 \u0027fq1.fastq\u0027 -2 \u0027fq2.fastq\u0027 -l lr.fasta --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027  --keep 2 \u0026\u0026 mkdir \u0027spades_graphs\u0027 \u0026\u0026 mv 00*gfa \u0027./spades_graphs/\u0027 \u0026\u0026 samtools view -@ \"${GALAXY_SLOTS:-4}\" -u \u0027read_alignment/long_read_alignments.sam\u0027 | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -o \u0027read_alignment/long_read_alignments.bam\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T13:57:35.868838",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-wgzlv",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "f62b44f84a20694e",  "inputs": {   "long": {    "id": "34d2cf0f4ce08059",    "src": "hda",    "uuid": "79a0cec1-430c-4ad2-8c7c-d0e5e38dab4a"   },   "paired_unpaired|fastq_input1": {    "id": "924982b53dfd5c2e",    "src": "hda",    "uuid": "3ffe2c23-56e7-48ec-8bef-cc3c57f1ffb5"   },   "paired_unpaired|fastq_input2": {    "id": "167e765a5ab15248",    "src": "hda",    "uuid": "522516b1-93e2-4d35-9d59-2877375a5e09"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {   "spades_collection": {    "id": "7372725036ad8a5b",    "src": "hdca"   }  },  "outputs": {   "assembly": {    "id": "313705c557faba69",    "src": "hda",    "uuid": "905412bb-3848-4867-91d7-901b6357ecd7"   },   "assembly_graph": {    "id": "e6b3b86086e62fe6",    "src": "hda",    "uuid": "d7cd49e1-8e99-4d4c-bf7d-a377338765e1"   },   "bam_file": {    "id": "9db0fc26c2fe1ac7",    "src": "hda",    "uuid": "e6ab8c58-1173-444b-940e-f7e8338d64fc"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "keep": "\"2\"",   "linear_seqs": "\"0\"",   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 255, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 256, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "reuse": "[]",   "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}"  },  "state": "error",  "stderr": "",  "stdout": "\nStarting Unicycler (2025-04-29 13:57:37)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/175/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2025-04-29 13:57:38)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2025-04-29 13:57:38)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.123+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: [\u0027/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq\u0027]\n      right reads: [\u0027/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq\u0027]\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.094    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.099    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.113    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.115    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.124    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.154     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.168     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.168     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.168     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.168     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.169     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.169     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.169     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.766     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.767     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:00.947     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.948     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:00.983     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:00.983     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.984     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.984     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.984     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.568  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.568  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.569     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.754     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.754     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.791     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:01.791     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:01.923     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:01.933     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.945     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:01.948     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:01.951     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:01.953     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:01.956     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.957     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:01.957     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:01.957     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:01.957     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:01.961     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:01.961     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.985     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:01.986     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.058     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.059     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:02.094     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.549     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.138     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.619     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:04.445     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:04.445     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:04.446     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==\n..\n   (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2025-04-29 13:59:45)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 \u003c-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/\n\n\nDetermining graph multiplicity (2025-04-29 13:59:45)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/175/working/002_depth_filter.gfa\n\n\nCleaning graph (2025-04-29 13:59:45)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2025-04-29 13:59:45)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2025-04-29 13:59:45)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2025-04-29 13:59:45)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2025-04-29 13:59:45)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2025-04-29 13:59:45)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A-\u003eC-\u003eD and B-\u003eC-\u003eE) or (A-\u003eC-\u003eE and B-\u003eC-\u003eD). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A-\u003eC-\u003eB), one time (A-\u003eC-\u003eD-\u003eC-\u003eB), two times\n(A-\u003eC-\u003eD-\u003eC-\u003eD-\u003eC-\u003eB), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2025-04-29 13:59:45)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2025-04-29 13:59:45)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2025-04-29 13:59:45)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.089 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2025-04-29 13:59:45)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2025-04-29 13:59:45)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -\u003e end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2025-04-29 13:59:45)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -\u003e end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2025-04-29 13:59:45)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2025-04-29 13:59:45)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2025-04-29 13:59:45)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2025-04-29 13:59:58)\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.fasta\n\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0",  "tool_stderr": "",  "tool_stdout": "\nStarting Unicycler (2025-04-29 13:57:37)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/175/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2025-04-29 13:57:38)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2025-04-29 13:57:38)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.123+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: [\u0027/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq\u0027]\n      right reads: [\u0027/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq\u0027]\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.094    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.099    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.113    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.115    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.124    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.154     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.168     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.168     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.168     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.168     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.169     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.169     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.169     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.766     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.767     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:00.947     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.948     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:00.983     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:00.983     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.984     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.984     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.984     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.568  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.568  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.569     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.754     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.754     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.791     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:01.791     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:01.923     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:01.933     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.945     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:01.948     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:01.951     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:01.953     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:01.956     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.957     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:01.957     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:01.957     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:01.957     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:01.961     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:01.961     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.985     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:01.986     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.058     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.059     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:02.094     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.549     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.138     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.619     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:04.445     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:04.445     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:04.446     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==\n..\n   (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2025-04-29 13:59:45)\nFilter by read depth        (2025-04-29 13:59:45)\nFilter homopolymer loops    (2025-04-29 13:59:45)\nMerge all possible          (2025-04-29 13:59:45)\nNormalise read depths       (2025-04-29 13:59:45)\nRemove zero length segments (2025-04-29 13:59:45)\nSort link order             (2025-04-29 13:59:45)\nGraph cleaning finished     (2025-04-29 13:59:45)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2025-04-29 13:59:45)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 \u003c-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/\n\n\nDetermining graph multiplicity (2025-04-29 13:59:45)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/175/working/002_depth_filter.gfa\n\n\nCleaning graph (2025-04-29 13:59:45)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2025-04-29 13:59:45)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2025-04-29 13:59:45)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2025-04-29 13:59:45)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2025-04-29 13:59:45)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2025-04-29 13:59:45)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A-\u003eC-\u003eD and B-\u003eC-\u003eE) or (A-\u003eC-\u003eE and B-\u003eC-\u003eD). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A-\u003eC-\u003eB), one time (A-\u003eC-\u003eD-\u003eC-\u003eB), two times\n(A-\u003eC-\u003eD-\u003eC-\u003eD-\u003eC-\u003eB), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2025-04-29 13:59:45)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2025-04-29 13:59:45)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2025-04-29 13:59:45)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.089 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2025-04-29 13:59:45)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2025-04-29 13:59:45)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -\u003e end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2025-04-29 13:59:45)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -\u003e end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2025-04-29 13:59:45)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2025-04-29 13:59:45)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2025-04-29 13:59:45)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2025-04-29 13:59:58)\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.fasta\n\n",  "update_time": "2025-04-29T14:00:01.625769",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Output collection \u0027spades_collection\u0027: expected to have 14 elements, but it had 0." ], "status": "failure", "test_index": 6, "time_seconds": 178.6901786327362, "tool_id": "unicycler", "tool_version": "0.5.1+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 13:57:37)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/175/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-04-29 13:57:38)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-04-29 13:57:38)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.123+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/175/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.094    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.099    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.113    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.115    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.124    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.154     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.168     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.168     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.168     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.168     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.169     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.169     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.169     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.766     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.767     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.947     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.948     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.983     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.983     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.984     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.984     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.984     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.568  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.568  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.569     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.754     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.754     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.791     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.791     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.923     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.933     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.945     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.948     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.951     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.953     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.956     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.957     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.957     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.957     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.957     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.959     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.961     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.961     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.985     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.986     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.058     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.059     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.094     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.094     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.549     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.138     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.619     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.445     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.445     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.446     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.446     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.446     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==..   (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-04-29 13:59:45)Filter by read depth        (2025-04-29 13:59:45)Filter homopolymer loops    (2025-04-29 13:59:45)Merge all possible          (2025-04-29 13:59:45)Normalise read depths       (2025-04-29 13:59:45)Remove zero length segments (2025-04-29 13:59:45)Sort link order             (2025-04-29 13:59:45)Graph cleaning finished     (2025-04-29 13:59:45)Saving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-04-29 13:59:45)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/Determining graph multiplicity (2025-04-29 13:59:45)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/175/working/002_depth_filter.gfaCleaning graph (2025-04-29 13:59:45)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/175/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 13:59:45)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 13:59:45)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-04-29 13:59:45)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2025-04-29 13:59:45)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2025-04-29 13:59:45)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/175/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2025-04-29 13:59:45)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-04-29 13:59:45)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2025-04-29 13:59:45)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.089 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2025-04-29 13:59:45)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-04-29 13:59:45)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-04-29 13:59:45)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/175/working/004_bridges_applied.gfaCleaning up leftover segments (2025-04-29 13:59:45)Segments eligible for deletion:Bridged assembly graph (2025-04-29 13:59:45)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/175/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 13:59:45)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 13:59:58)Saving /galaxy/server/database/jobs_directory/000/175/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #8)" name="7" time="189.17601203918457">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-04-29 14:00:37)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --no_simple_bridges --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/179/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-04-29 14:00:37)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-04-29 14:00:37)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/179/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/179/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/179/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/179/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/179/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/179/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.123+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/179/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/179/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/179/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/179/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/179/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.006     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.095    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.100    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.114    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.116    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.124    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.156     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.167     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.167     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.167     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.167     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.168     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.168     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.168     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.769     1M / 56M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.770     1M / 56M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.962     1M / 56M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.962     1M / 56M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.000     1M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.000     1M / 56M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.001     1M / 56M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.001     1M / 56M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.001     1M / 56M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.589  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.589  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.590     1M / 56M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.780     1M / 56M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.780     1M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.817     1M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.817     1M / 56M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.953     1M / 56M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.964     1M / 56M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.987     1M / 56M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.991     1M / 56M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.994     1M / 56M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.997     1M / 56M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.000     1M / 56M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.000     1M / 56M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.001     1M / 56M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.001     1M / 56M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.001     2M / 56M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.003     2M / 56M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.003     2M / 56M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.003     2M / 56M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.003     2M / 56M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.003     2M / 56M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.003     2M / 56M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.005     2M / 56M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.005     2M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.030     2M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.030     2M / 56M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.092     2M / 56M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.094     2M / 56M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.145     1M / 56M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.145     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.145     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.145     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.145     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.257     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.604     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.189     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.695     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.533     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.533     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.534     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.534     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.534     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.534     1M / 56M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.534     1M / 56M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.534     1M / 56M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.534     1M / 56M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.534     1M / 56M   INFO   StageManager             (stage.cpp              ..ength segments (2025-04-29 14:02:44)Sort link order             (2025-04-29 14:02:44)Graph cleaning finished     (2025-04-29 14:02:44)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-04-29 14:02:44)Filter by read depth        (2025-04-29 14:02:44)Filter homopolymer loops    (2025-04-29 14:02:44)Merge all possible          (2025-04-29 14:02:44)Normalise read depths       (2025-04-29 14:02:44)Remove zero length segments (2025-04-29 14:02:44)Sort link order             (2025-04-29 14:02:44)Graph cleaning finished     (2025-04-29 14:02:44)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-04-29 14:02:45)Filter by read depth        (2025-04-29 14:02:45)Filter homopolymer loops    (2025-04-29 14:02:45)Merge all possible          (2025-04-29 14:02:45)Normalise read depths       (2025-04-29 14:02:45)Remove zero length segments (2025-04-29 14:02:45)Sort link order             (2025-04-29 14:02:45)Graph cleaning finished     (2025-04-29 14:02:45)Saving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-04-29 14:02:45)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/Determining graph multiplicity (2025-04-29 14:02:45)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-04-29 14:02:45)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-04-29 14:02:45)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-04-29 14:02:45)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-04-29 14:02:45)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2025-04-29 14:02:45)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/179/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/179/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultDetermining low score threshold (2025-04-29 14:02:45)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-04-29 14:02:45)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2025-04-29 14:02:45)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.089 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2025-04-29 14:02:45)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/179/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-04-29 14:02:45)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-04-29 14:02:45)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-04-29 14:02:45)Segments eligible for deletion:Bridged assembly graph (2025-04-29 14:02:45)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-04-29 14:02:45)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-04-29 14:02:58)Saving /galaxy/server/database/jobs_directory/000/179/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/179/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfgenotypes (Test #1)" name="0" time="37.09160304069519">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "vcf_input": {   "id": "5b4c86337ef93671",   "src": "hda"  } }, "job": {  "command_line": "vcfgenotypes \u0027/galaxy/server/database/objects/1/b/3/dataset_1b3d4ec0-8124-42e1-89f6-5a1a6e43e584.dat\u0027 \u003e \u0027/galaxy/server/database/objects/9/f/3/dataset_9f335a3b-e665-475b-90a8-068ebff5fd36.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-04-29T13:23:35.095416",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-vp5qh",  "galaxy_version": "24.1",  "handler": null,  "history_id": "e76dc853ccc7b019",  "id": "ef627a83c439601f",  "inputs": {   "vcf_input": {    "id": "5b4c86337ef93671",    "src": "hda",    "uuid": "1b3d4ec0-8124-42e1-89f6-5a1a6e43e584"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out_file1": {    "id": "bacdd53d5de2e697",    "src": "hda",    "uuid": "9f335a3b-e665-475b-90a8-068ebff5fd36"   }  },  "params": {   "__input_ext": "\"vcf\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfgenotypes/vcfgenotypes/1.0.0_rc3+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-04-29T13:23:49.006149",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/vcfgenotypes/vcfgenotypes/1.0.0_rc3+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/vcfgenotypes/vcfgenotypes/1.0.0_rc3+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 37.09160304069519, "tool_id": "vcfgenotypes", "tool_version": "1.0.0_rc3+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>