<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="44"
           errors="5"
           failures="0"
           skip="0">
    
    <testcase classname="bcftools_norm (Test #1)" name="0" time="36.7187294960022">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:21/0/13/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #2)" name="1" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 1, "tool_id": "bcftools_norm", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #3)" name="2" time="14.142444133758545">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 14.142444133758545, "tool_id": "bcftools_norm", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #4)" name="3" time="26.430330753326416">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:19/7/19/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #5)" name="4" time="26.87752056121826">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:26/0/0/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #6)" name="5" time="26.514117002487183">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:26/0/0/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #7)" name="6" time="26.618009567260742">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:8/0/0/0REF/ALT total/modified/added:  8/5/3
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #8)" name="7" time="28.218028783798218">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:39/20/3/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #9)" name="8" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 8, "tool_id": "bcftools_norm", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_fill_tags (Test #1)" name="0" time="36.895689725875854">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_fill_tags (Test #2)" name="1" time="25.509352922439575">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="circos (Test #1)" name="0" time="65.81137990951538">
        
            
            <system-out><![CDATA[
            debuggroup summary 0.13s welcome to circos v0.69-8 15 Jun 2019 on Perl 5.026002debuggroup summary 0.14s current working directory /galaxy/server/database/jobs_directory/000/108/workingdebuggroup summary 0.14s command /usr/local/bin/circos -conf circos/conf/circos.conf -noparanoiddebuggroup summary 0.14s loading configuration from file circos/conf/circos.confdebuggroup summary 0.14s found conf file circos/conf/circos.confdebuggroup summary 0.24s debug will appear for these features: output,summarydebuggroup summary 0.24s bitmap output image ./circos.pngdebuggroup summary 0.24s SVG output image ./circos.svgdebuggroup summary 0.24s parsing karyotype and organizing ideogramsdebuggroup summary 0.25s karyotype has 2 chromosomes of total size 56,082debuggroup summary 0.25s applying global and local scalingdebuggroup summary 0.25s allocating image, colors and brushesdebuggroup summary 5.13s drawing 2 ideograms of total size 56,082debuggroup summary 5.13s drawing highlights and ideogramsdebuggroup output 5.13s generating outputdebuggroup output 5.42s created PNG image ./circos.png (40 kb)debuggroup output 5.43s created SVG image ./circos.svg (2 kb)
            ]]></system-out>
            <system-err><![CDATA[
            Use of uninitialized value in subroutine entry at /usr/local/bin/../lib/Circos/Configuration.pm line 781.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="circos (Test #2)" name="1" time="19.102725744247437">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 19.102725744247437, "tool_id": "circos", "tool_version": "0.69.8+galaxy7"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="deeptools_plot_enrichment (Test #1)" name="0" time="55.549586057662964">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="filter_tabular (Test #1)" name="0" time="75.33010578155518">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="filter_tabular (Test #2)" name="1" time="25.37822151184082">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="filter_tabular (Test #3)" name="2" time="27.419251203536987">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="filter_tabular (Test #4)" name="3" time="27.883671045303345">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="filter_tabular (Test #5)" name="4" time="25.456847429275513">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flash (Test #1)" name="0" time="37.22125554084778">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flash (Test #2)" name="1" time="30.083370685577393">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flash (Test #3)" name="2" time="27.615882396697998">
        
            
            <system-out><![CDATA[
            [FLASH] Starting FLASH v1.2.11[FLASH] Fast Length Adjustment of SHort reads[FLASH]  [FLASH] Input files:[FLASH]     /galaxy/server/database/objects/7/f/9/dataset_7f9a5b05-88f8-4926-9d3d-c25b69ffac1f.dat[FLASH]     /galaxy/server/database/objects/3/c/2/dataset_3c2e03b2-f183-4432-b6f1-a643c6459a50.dat[FLASH]  [FLASH] Output files:[FLASH]     ./out.extendedFrags.fastq[FLASH]     ./out.notCombined_1.fastq[FLASH]     ./out.notCombined_2.fastq[FLASH]     ./out.hist[FLASH]     ./out.histogram[FLASH]  [FLASH] Parameters:[FLASH]     Min overlap:           10[FLASH]     Max overlap:           65[FLASH]     Max mismatch density:  0.250000[FLASH]     Allow "outie" pairs:   false[FLASH]     Cap mismatch quals:    false[FLASH]     Combiner threads:      1[FLASH]     Input format:          FASTQ, phred_offset=64[FLASH]     Output format:         FASTQ, phred_offset=64[FLASH]  [FLASH] Starting reader and writer threads[FLASH] Starting 1 combiner threads[FLASH] Processed 200 read pairs[FLASH]  [FLASH] Read combination statistics:[FLASH]     Total pairs:      200[FLASH]     Combined pairs:   5[FLASH]     Uncombined pairs: 195[FLASH]     Percent combined: 2.50%[FLASH]  [FLASH] Writing histogram files.[FLASH]  [FLASH] FLASH v1.2.11 complete![FLASH] 0.021 seconds elapsed
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flash (Test #4)" name="3" time="30.243383646011353">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flash (Test #5)" name="4" time="9.895323991775513">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 9.895323991775513, "tool_id": "flash", "tool_version": "1.2.11.4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="ivar_filtervariants (Test #1)" name="0" time="36.57159662246704">
        
            
            <system-out><![CDATA[
            Header format of ./var_0.tsv did not match! Please use files generated using "ivar variants" command.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="medaka_consensus (Test #1)" name="0" time="83.23541116714478">
        
            
            <system-out><![CDATA[
            [01:09:01 - Predict] Reducing threads to 2, anymore is a waste.[01:09:01 - Predict] It looks like you are running medaka without a GPU and attempted to set a high number of threads. We have scaled this down to an optimal number. If you wish to improve performance please see https://nanoporetech.github.io/medaka/installation.html#improving-parallelism.[01:09:01 - Predict] Setting tensorflow inter/intra-op threads to 2/1.[01:09:01 - Predict] Processing region(s): ref:0-30[01:09:01 - Predict] Using model: /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_high_g360_model.hdf5.[01:09:01 - DataStre] Writing sample registry.[01:09:01 - Predict] Processing 1 long region(s) with batching.[01:09:01 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_high_g360_model.hdf52025-01-23 01:09:01.081746: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMATo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.[01:09:01 - BAMFile] Creating pool of 16 BAM file sets.[01:09:01 - DLoader] Sample-0: started[01:09:01 - Sampler] Initializing sampler for consensus of region ref:0-30.[01:09:01 - DLoader] Sample-1: started[01:09:01 - DLoader] Sample-1: finished[01:09:01 - DLoader] Initialised. Batch size:100. Workers:2. Cache:800[01:09:01 - PWorker] Running inference for 0.0M draft bases.[01:09:01 - Feature] Pileup counts do not span requested region, requested ref:0-30, received 0-9.[01:09:01 - Feature] Processed ref:0.0-9.0 (median depth 1.0)[01:09:01 - Feature] Pileup counts do not span requested region, requested ref:0-30, received 14-29.[01:09:01 - Feature] Processed ref:14.0-29.0 (median depth 1.0)[01:09:01 - Sampler] Took 0.05s to make features.[01:09:01 - Sampler] Region ref:0.0-9.0 (10 positions) is smaller than inference chunk length 10000, quarantining.[01:09:01 - Sampler] Region ref:14.0-29.0 (16 positions) is smaller than inference chunk length 10000, quarantining.[01:09:01 - DLoader] Sample-0: finished[01:09:01 - DLoader] Batches ready: 0. Samples ready: 0 (0.0 batches)[01:09:01 - DataStre] Writing sample registry.[01:09:01 - PWorker] Processed 0 batches[01:09:01 - PWorker] All done, 2 remainder regions.[01:09:01 - Predict] Processing 2 short region(s).[01:09:01 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_high_g360_model.hdf5[01:09:02 - DLoader] Sample-0: started[01:09:02 - Sampler] Initializing sampler for consensus of region ref:0-10.[01:09:02 - DLoader] Sample-1: started[01:09:02 - Sampler] Initializing sampler for consensus of region ref:14-30.[01:09:02 - DLoader] Initialised. Batch size:1. Workers:2. Cache:8[01:09:02 - PWorker] Running inference for 0.0M draft bases.[01:09:02 - Feature] Processed ref:0.0-9.0 (median depth 1.0)[01:09:02 - Sampler] Took 0.03s to make features.[01:09:02 - Sampler] Pileup for ref:0.0-9.0 is of width 10[01:09:02 - DLoader] Sample-0: finished[01:09:02 - Feature] Processed ref:14.0-29.0 (median depth 1.0)[01:09:02 - Sampler] Took 0.03s to make features.[01:09:02 - Sampler] Pileup for ref:14.0-29.0 is of width 16[01:09:02 - DLoader] Batches ready: 0. Samples ready: 0 (0.0 batches)[01:09:02 - DLoader] Sample-1: finished[01:09:02 - DataStre] Loaded sample register.[01:09:02 - DataStre] Adding ref:0.0-9.0 to sample registry[01:09:02 - DLoader] Batches ready: 1. Samples ready: 0 (0.0 batches)[01:09:02 - DataStre] Adding ref:14.0-29.0 to sample registry[01:09:02 - DLoader] Batches ready: 0. Samples ready: 0 (0.0 batches)[01:09:02 - DataStre] Writing sample registry.[01:09:02 - PWorker] Processed 2 batches[01:09:02 - PWorker] All done, 0 remainder regions.[01:09:02 - Predict] Finished processing all regions.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.[01:09:02 - BAMFile] Closing BAM file set.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="medaka_consensus (Test #2)" name="1" time="35.92732214927673">
        
            
            <system-out><![CDATA[
            [01:09:43 - Predict] Reducing threads to 2, anymore is a waste.[01:09:43 - Predict] It looks like you are running medaka without a GPU and attempted to set a high number of threads. We have scaled this down to an optimal number. If you wish to improve performance please see https://nanoporetech.github.io/medaka/installation.html#improving-parallelism.[01:09:43 - Predict] Setting tensorflow inter/intra-op threads to 2/1.[01:09:43 - Predict] Processing region(s): ref:0-30[01:09:43 - Predict] Using model: /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_fast_g303_model.hdf5.[01:09:43 - DataStre] Writing sample registry.[01:09:43 - Predict] Processing 1 long region(s) with batching.[01:09:43 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_fast_g303_model.hdf52025-01-23 01:09:43.246118: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMATo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.[01:09:43 - BAMFile] Creating pool of 16 BAM file sets.[01:09:43 - DLoader] Sample-0: started[01:09:43 - Sampler] Initializing sampler for consensus of region ref:0-30.[01:09:43 - DLoader] Sample-1: started[01:09:43 - DLoader] Sample-1: finished[01:09:43 - DLoader] Initialised. Batch size:99. Workers:2. Cache:792[01:09:43 - PWorker] Running inference for 0.0M draft bases.[01:09:43 - Feature] Pileup counts do not span requested region, requested ref:0-30, received 0-9.[01:09:43 - Feature] Processed ref:0.0-9.0 (median depth 1.0)[01:09:43 - Feature] Pileup counts do not span requested region, requested ref:0-30, received 14-29.[01:09:43 - Feature] Processed ref:14.0-29.0 (median depth 1.0)[01:09:43 - Sampler] Took 0.04s to make features.[01:09:43 - Sampler] Region ref:0.0-9.0 (10 positions) is smaller than inference chunk length 9999, quarantining.[01:09:43 - Sampler] Region ref:14.0-29.0 (16 positions) is smaller than inference chunk length 9999, quarantining.[01:09:43 - DLoader] Sample-0: finished[01:09:43 - DLoader] Batches ready: 0. Samples ready: 0 (0.0 batches)[01:09:43 - DataStre] Writing sample registry.[01:09:43 - PWorker] Processed 0 batches[01:09:43 - PWorker] All done, 2 remainder regions.[01:09:43 - Predict] Processing 2 short region(s).[01:09:43 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_fast_g303_model.hdf5[01:09:44 - DLoader] Sample-0: started[01:09:44 - Sampler] Initializing sampler for consensus of region ref:0-10.[01:09:44 - DLoader] Sample-1: started[01:09:44 - Sampler] Initializing sampler for consensus of region ref:14-30.[01:09:44 - DLoader] Initialised. Batch size:1. Workers:2. Cache:8[01:09:44 - PWorker] Running inference for 0.0M draft bases.[01:09:44 - Feature] Processed ref:0.0-9.0 (median depth 1.0)[01:09:44 - Sampler] Took 0.06s to make features.[01:09:44 - Sampler] Pileup for ref:0.0-9.0 is of width 10[01:09:44 - DLoader] Sample-0: finished[01:09:44 - Feature] Processed ref:14.0-29.0 (median depth 1.0)[01:09:44 - Sampler] Took 0.06s to make features.[01:09:44 - Sampler] Pileup for ref:14.0-29.0 is of width 16[01:09:44 - DLoader] Sample-1: finished[01:09:44 - DLoader] Batches ready: 0. Samples ready: 1 (1.0 batches)[01:09:44 - DataStre] Loaded sample register.[01:09:44 - DataStre] Adding ref:0.0-9.0 to sample registry[01:09:44 - DLoader] Batches ready: 1. Samples ready: 0 (0.0 batches)[01:09:44 - DataStre] Adding ref:14.0-29.0 to sample registry[01:09:44 - DLoader] Batches ready: 0. Samples ready: 0 (0.0 batches)[01:09:44 - DataStre] Writing sample registry.[01:09:44 - PWorker] Processed 2 batches[01:09:44 - PWorker] All done, 0 remainder regions.[01:09:44 - Predict] Finished processing all regions.[01:09:44 - Predict] Validating and finalising output data.[01:09:44 - DataStre] Writing sample registry.[01:09:44 - DataStre] Created missing sample register.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.[01:09:44 - BAMFile] Closing BAM file set.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_nucdist (Test #1)" name="0" time="64.7976405620575">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_nucdist (Test #2)" name="1" time="29.277859449386597">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="qualimap_multi_bamqc (Test #1)" name="0" time="110.74281573295593">
        
            
            <system-out><![CDATA[
            Java memory size is set to 1200MLaunching application...detected environment java options -Djava.awt.headless=true -Xmx4080mQualiMap v.2.3Built on 2023-05-19 16:57Selected tool: multi-bamqcRunning multi-sample BAM QCChecking input pathsLoading sample dataCreating chartsPreparing result reportWriting HTML report...HTML report created successfullyFinished
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="racon (Test #1)" name="0" time="42.8779673576355">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.001135 s[racon::Polisher::initialize] loaded sequences 0.009517 s[racon::Polisher::initialize] loaded overlaps 0.010617 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.002314 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.002343 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.002422 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.002732 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.002759 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.002770 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.002835 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.002909 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.003023 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.003079 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.003152 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.003461 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.003487 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.003498 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.003506 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.003563 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.003570 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.003576 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.003582 s[racon::Polisher::initialize] aligning overlaps [====================] 0.003588 s[racon::Polisher::initialize] transformed data into windows 0.000318 s[racon::Polisher::polish] generating consensus [=>                  ] 0.061701 s[racon::Polisher::polish] generating consensus [==>                 ] 0.080014 s[racon::Polisher::polish] generating consensus [===>                ] 0.080873 s[racon::Polisher::polish] generating consensus [====>               ] 0.102308 s[racon::Polisher::polish] generating consensus [=====>              ] 0.102344 s[racon::Polisher::polish] generating consensus [======>             ] 0.102382 s[racon::Polisher::polish] generating consensus [=======>            ] 0.143899 s[racon::Polisher::polish] generating consensus [========>           ] 0.143937 s[racon::Polisher::polish] generating consensus [=========>          ] 0.180279 s[racon::Polisher::polish] generating consensus [==========>         ] 0.231335 s[racon::Polisher::polish] generating consensus [===========>        ] 0.280429 s[racon::Polisher::polish] generating consensus [============>       ] 0.333507 s[racon::Polisher::polish] generating consensus [=============>      ] 0.356483 s[racon::Polisher::polish] generating consensus [==============>     ] 0.356539 s[racon::Polisher::polish] generating consensus [===============>    ] 0.371731 s[racon::Polisher::polish] generating consensus [================>   ] 0.401165 s[racon::Polisher::polish] generating consensus [=================>  ] 0.401191 s[racon::Polisher::polish] generating consensus [==================> ] 0.420482 s[racon::Polisher::polish] generating consensus [===================>] 0.424608 s[racon::Polisher::polish] generating consensus [====================] 0.424706 s[racon::Polisher::] total = 0.453140 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="racon (Test #2)" name="1" time="34.49891471862793">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.001097 s[racon::Polisher::initialize] loaded sequences 0.008968 s[racon::Polisher::initialize] loaded overlaps 0.000560 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.011796 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.020766 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.028692 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.031385 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.036607 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.036780 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.045162 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.052472 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.055625 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.058349 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.059161 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.062978 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.077265 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.082578 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.095510 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.095538 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.095547 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.096280 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.099904 s[racon::Polisher::initialize] aligning overlaps [====================] 0.102679 s[racon::Polisher::initialize] transformed data into windows 0.000293 s[racon::Polisher::polish] generating consensus [=>                  ] 0.021482 s[racon::Polisher::polish] generating consensus [==>                 ] 0.021590 s[racon::Polisher::polish] generating consensus [===>                ] 0.038799 s[racon::Polisher::polish] generating consensus [====>               ] 0.038895 s[racon::Polisher::polish] generating consensus [=====>              ] 0.045947 s[racon::Polisher::polish] generating consensus [======>             ] 0.045969 s[racon::Polisher::polish] generating consensus [=======>            ] 0.051426 s[racon::Polisher::polish] generating consensus [========>           ] 0.051491 s[racon::Polisher::polish] generating consensus [=========>          ] 0.058662 s[racon::Polisher::polish] generating consensus [==========>         ] 0.060028 s[racon::Polisher::polish] generating consensus [===========>        ] 0.078756 s[racon::Polisher::polish] generating consensus [============>       ] 0.084797 s[racon::Polisher::polish] generating consensus [=============>      ] 0.110297 s[racon::Polisher::polish] generating consensus [==============>     ] 0.118104 s[racon::Polisher::polish] generating consensus [===============>    ] 0.130684 s[racon::Polisher::polish] generating consensus [================>   ] 0.133489 s[racon::Polisher::polish] generating consensus [=================>  ] 0.153664 s[racon::Polisher::polish] generating consensus [==================> ] 0.153713 s[racon::Polisher::polish] generating consensus [===================>] 0.172153 s[racon::Polisher::polish] generating consensus [====================] 0.181514 s[racon::Polisher::] total = 0.298924 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="racon (Test #3)" name="2" time="33.78938031196594">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.000892 s[racon::Polisher::initialize] loaded sequences 0.008466 s[racon::Polisher::initialize] loaded overlaps 0.009846 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.001893 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.002006 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.002109 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.002219 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.002264 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.002295 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.002389 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.002396 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.002477 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.002657 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.002746 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.002817 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.002884 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.002943 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.002987 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.003055 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.003061 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.003083 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.003092 s[racon::Polisher::initialize] aligning overlaps [====================] 0.003101 s[racon::Polisher::initialize] transformed data into windows 0.000333 s[racon::Polisher::polish] generating consensus [=>                  ] 0.022825 s[racon::Polisher::polish] generating consensus [==>                 ] 0.025615 s[racon::Polisher::polish] generating consensus [===>                ] 0.035502 s[racon::Polisher::polish] generating consensus [====>               ] 0.041054 s[racon::Polisher::polish] generating consensus [=====>              ] 0.041356 s[racon::Polisher::polish] generating consensus [======>             ] 0.046510 s[racon::Polisher::polish] generating consensus [=======>            ] 0.048009 s[racon::Polisher::polish] generating consensus [========>           ] 0.056655 s[racon::Polisher::polish] generating consensus [=========>          ] 0.056673 s[racon::Polisher::polish] generating consensus [==========>         ] 0.072584 s[racon::Polisher::polish] generating consensus [===========>        ] 0.072608 s[racon::Polisher::polish] generating consensus [============>       ] 0.096765 s[racon::Polisher::polish] generating consensus [=============>      ] 0.096791 s[racon::Polisher::polish] generating consensus [==============>     ] 0.119615 s[racon::Polisher::polish] generating consensus [===============>    ] 0.119649 s[racon::Polisher::polish] generating consensus [================>   ] 0.137923 s[racon::Polisher::polish] generating consensus [=================>  ] 0.141059 s[racon::Polisher::polish] generating consensus [==================> ] 0.149548 s[racon::Polisher::polish] generating consensus [===================>] 0.152636 s[racon::Polisher::polish] generating consensus [====================] 0.179409 s[racon::Polisher::] total = 0.204628 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #1)" name="0" time="10.627314329147339">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 10.627314329147339, "tool_id": "samtools_sort", "tool_version": "2.0.5"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #2)" name="1" time="30.94426417350769">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #3)" name="2" time="27.121085166931152">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #4)" name="3" time="27.872726917266846">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #5)" name="4" time="27.320751428604126">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #6)" name="5" time="26.48086190223694">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #7)" name="6" time="25.413127183914185">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #8)" name="7" time="26.379347801208496">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_sort (Test #9)" name="8" time="26.195440769195557">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfallelicprimitives (Test #1)" name="0" time="44.67892408370972">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfprimers (Test #1)" name="0" time="10.505117893218994">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 10.505117893218994, "tool_id": "vcfprimers", "tool_version": "1.0.0_rc3+galaxy0"}
            ]]></error>
        
    </testcase>
    
</testsuite>