{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 146, "errors": 22, "failures": 9, "skips": 5}, "tests": [{"id": "bcftools_csq/1.15.1+galaxy4-0", "has_data": true, "data": {"tool_id": "bcftools_csq", "tool_version": "1.15.1+galaxy4", "test_index": 0, "time_seconds": 11.181737184524536, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "bcftools_csq/1.15.1+galaxy4-1", "has_data": true, "data": {"tool_id": "bcftools_csq", "tool_version": "1.15.1+galaxy4", "test_index": 1, "status": "skip"}}, {"id": "bcftools_csq/1.15.1+galaxy4-2", "has_data": true, "data": {"tool_id": "bcftools_csq", "tool_version": "1.15.1+galaxy4", "test_index": 2, "status": "skip"}}, {"id": "bcftools_csq/1.15.1+galaxy4-3", "has_data": true, "data": {"tool_id": "bcftools_csq", "tool_version": "1.15.1+galaxy4", "test_index": 3, "status": "skip"}}, {"id": "bcftools_plugin_mendelian/1.15.1+galaxy4-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_mendelian", "tool_version": "1.15.1+galaxy4", "test_index": 0, "time_seconds": 10.593253135681152, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "bcftools_plugin_mendelian/1.15.1+galaxy4-1", "has_data": true, "data": {"tool_id": "bcftools_plugin_mendelian", "tool_version": "1.15.1+galaxy4", "test_index": 1, "time_seconds": 41.50339412689209, "inputs": {"input_file": {"src": "hda", "id": "b8609d61c8825f56"}, "sec_plugin|trios|mother": "NA00001", "sec_plugin|trios|father": "NA00002", "sec_plugin|trios|child": "NA00006", "sec_plugin|trios|trios_src": "trio", "sec_plugin|mode": "x", "output_type": "v"}, "job": {"model_class": "Job", "id": "196ba4b0f1abd656", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_mendelian/bcftools_plugin_mendelian/1.15.1+galaxy4", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:00:29.086919", "update_time": "2025-08-03T14:00:49.945504", "galaxy_version": "24.1", "external_id": "gxy-6df9x", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/c/7/4/dataset_c74dbfa9-0d4e-446e-b198-fb0226892ee7.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin mendelian                 --output-type 'v'    input.vcf.gz   --trio \"NA00001,NA00002,NA00006\" --list x 2> tmp_stderr > '/galaxy/server/database/objects/b/1/d/dataset_b1d2f7b9-d332-4f45-90b7-c8493cd2cfae.dat' && cat tmp_stderr", "user_email": "tests@fake.org", "command_version": "Version: 1.15.1 (using htslib 1.15.1)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"mode\": \"x\", \"trios\": {\"__current_case__\": 0, \"child\": \"NA00006\", \"father\": \"NA00002\", \"mother\": \"NA00001\", \"trios_src\": \"trio\"}}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"regions_overlap\": null, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}, \"targets_overlap\": null}"}, "inputs": {"input_file": {"id": "b8609d61c8825f56", "src": "hda", "uuid": "c74dbfa9-0d4e-446e-b198-fb0226892ee7"}}, "outputs": {"output_file": {"id": "2c19abb0a5429c96", "src": "hda", "uuid": "b1d2f7b9-d332-4f45-90b7-c8493cd2cfae"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Warning: -l will be deprecated, please use -m instead.\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Warning: -l will be deprecated, please use -m instead.\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:00:36", "plugin": "core", "name": "end_epoch", "raw_value": "1754229636.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:00:35", "plugin": "core", "name": "start_epoch", "raw_value": "1754229635.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-0", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 0, "time_seconds": 51.299946308135986, "inputs": {"library|input_1": {"src": "hda", "id": "ec427c154e6f491e"}, "library|input_2": {"src": "hda", "id": "ef158b6005f881a6"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "2f2568ff171d4559"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "6fbbb1586fd3b0cc", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:06:20.599589", "update_time": "2025-08-03T14:06:46.671740", "galaxy_version": "24.1", "external_id": "gxy-5qsd5", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/d/c/dataset_9dc242aa-9bc6-4ac8-bf57-8fc2a0b88032.dat' genome && ln -s -f '/galaxy/server/database/objects/9/d/c/dataset_9dc242aa-9bc6-4ac8-bf57-8fc2a0b88032.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/8/5/dataset_48537171-318e-42d8-9a41-7216e12b5234.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/6/4/7/dataset_647270e2-c7a0-4e69-9606-dfe7c1157c8a.dat' input_r.fastq &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/1/c/0/dataset_1c01d06f-e623-433b-943a-e96e76b4c095.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 324, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 322, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 323, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "ec427c154e6f491e", "src": "hda", "uuid": "48537171-318e-42d8-9a41-7216e12b5234"}, "library|input_2": {"id": "ef158b6005f881a6", "src": "hda", "uuid": "647270e2-c7a0-4e69-9606-dfe7c1157c8a"}, "reference_genome|own_file": {"id": "2f2568ff171d4559", "src": "hda", "uuid": "9dc242aa-9bc6-4ac8-bf57-8fc2a0b88032"}}, "outputs": {"output": {"id": "6229a544c14bea5c", "src": "hda", "uuid": "1c01d06f-e623-433b-943a-e96e76b4c095"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/d/c/dataset_9dc242aa-9bc6-4ac8-bf57-8fc2a0b88032.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\nGetting block 4 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 5 of 58\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\nGetting block 6 of 58\nGetting block 7 of 58\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 5\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 7: 10%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 5: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 5: 30%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 6: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 5: 50%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 5: 60%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 6: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 2: 90%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 2: 100%\n  bucket 7: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 5: 80%\n  bucket 3: 90%\n  bucket 7: 90%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  bucket 8: 30%\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 40%\n  bucket 9: 10%\n  bucket 8: 50%\n  bucket 9: 20%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 9: 30%\n  bucket 8: 80%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 8: 90%\n  bucket 9: 60%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 70%\n  bucket 9: 80%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 11: 30%\n  bucket 10: 90%\n  bucket 11: 40%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\nGetting block 13 of 58\n  bucket 12: 50%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 58\n  bucket 14: 50%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 19: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 18: 70%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 58\n  bucket 20: 20%\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 21: 10%\n  bucket 20: 50%\n  bucket 21: 20%\n  bucket 20: 60%\n  bucket 21: 30%\n  bucket 20: 70%\n  bucket 21: 40%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 21: 50%\n  bucket 20: 100%\n  bucket 21: 60%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  bucket 22: 90%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  bucket 24: 60%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 70%\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 24: 80%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\nGetting block 28 of 58\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\nGetting block 29 of 58\n  Calculating Z arrays for bucket 28\n  Reserving size (388) for bucket 29\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 27: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  bucket 29: 90%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 58\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\nGetting block 33 of 58\n  Calculating Z arrays for buc\n..\nucket 24: 50%\n  bucket 23: 40%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 24: 70%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 57\n  bucket 27: 30%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  bucket 30: 30%\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 32: 20%\n  bucket 33: 50%\n  bucket 32: 30%\n  bucket 33: 60%\n  bucket 32: 40%\n  bucket 33: 70%\n  bucket 32: 50%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 32: 60%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  bucket 35: 10%\n  bucket 34: 50%\n  bucket 35: 20%\n  bucket 34: 60%\n  bucket 35: 30%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 57\n  bucket 36: 20%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\nGetting block 39 of 57\n  bucket 38: 50%\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 39: 10%\n  bucket 38: 80%\n  bucket 39: 20%\n  bucket 38: 90%\n  bucket 39: 30%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 40%\n  bucket 39: 50%\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\nGetting block 44 of 57\n  Calculating Z arrays for bucket 43\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\nGetting block 46 of 57\n  Calculating Z arrays for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 45: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 46: 50%\n  bucket 45: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 47: 60%\n  bucket 48: 70%\n  bucket 47: 70%\n  bucket 48: 80%\n  bucket 47: 80%\n  bucket 48: 90%\n  bucket 47: 90%\n  bucket 48: 100%\n  bucket 47: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 30%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 40%\n  bucket 50: 10%\n  bucket 49: 50%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 50: 30%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 54: 30%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  bucket 53: 100%\n  bucket 54: 80%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/d/c/dataset_9dc242aa-9bc6-4ac8-bf57-8fc2a0b88032.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\nGetting block 4 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 5 of 58\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\nGetting block 6 of 58\nGetting block 7 of 58\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 5\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 7: 10%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 5: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 5: 30%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 6: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 5: 50%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 5: 60%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 6: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 2: 90%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 2: 100%\n  bucket 7: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 5: 80%\n  bucket 3: 90%\n  bucket 7: 90%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  bucket 8: 30%\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 40%\n  bucket 9: 10%\n  bucket 8: 50%\n  bucket 9: 20%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 9: 30%\n  bucket 8: 80%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 8: 90%\n  bucket 9: 60%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 70%\n  bucket 9: 80%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 11: 30%\n  bucket 10: 90%\n  bucket 11: 40%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\nGetting block 13 of 58\n  bucket 12: 50%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 58\n  bucket 14: 50%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 19: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 18: 70%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 58\n  bucket 20: 20%\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 21: 10%\n  bucket 20: 50%\n  bucket 21: 20%\n  bucket 20: 60%\n  bucket 21: 30%\n  bucket 20: 70%\n  bucket 21: 40%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 21: 50%\n  bucket 20: 100%\n  bucket 21: 60%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  bucket 22: 90%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  bucket 24: 60%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 70%\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 24: 80%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\nGetting block 28 of 58\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\nGetting block 29 of 58\n  Calculating Z arrays for bucket 28\n  Reserving size (388) for bucket 29\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 27: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  bucket 29: 90%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 58\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\nGetting block 33 of 58\n  Calculating Z arrays for buc\n..\nucket 24: 50%\n  bucket 23: 40%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 24: 70%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 57\n  bucket 27: 30%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  bucket 30: 30%\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 32: 20%\n  bucket 33: 50%\n  bucket 32: 30%\n  bucket 33: 60%\n  bucket 32: 40%\n  bucket 33: 70%\n  bucket 32: 50%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 32: 60%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  bucket 35: 10%\n  bucket 34: 50%\n  bucket 35: 20%\n  bucket 34: 60%\n  bucket 35: 30%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 57\n  bucket 36: 20%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\nGetting block 39 of 57\n  bucket 38: 50%\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 39: 10%\n  bucket 38: 80%\n  bucket 39: 20%\n  bucket 38: 90%\n  bucket 39: 30%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 40%\n  bucket 39: 50%\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\nGetting block 44 of 57\n  Calculating Z arrays for bucket 43\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\nGetting block 46 of 57\n  Calculating Z arrays for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 45: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 46: 50%\n  bucket 45: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 47: 60%\n  bucket 48: 70%\n  bucket 47: 70%\n  bucket 48: 80%\n  bucket 47: 80%\n  bucket 48: 90%\n  bucket 47: 90%\n  bucket 48: 100%\n  bucket 47: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 30%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 40%\n  bucket 50: 10%\n  bucket 49: 50%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 50: 30%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 54: 30%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  bucket 53: 100%\n  bucket 54: 80%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:06:33", "plugin": "core", "name": "end_epoch", "raw_value": "1754229993.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:06:32", "plugin": "core", "name": "start_epoch", "raw_value": "1754229992.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-1", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 1, "time_seconds": 39.38936471939087, "inputs": {"library|input_1": {"src": "hdca", "id": "dfb74dd494f25b2b"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "8e49ce658f6de975"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "998bf322422db15f", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:07:12.394672", "update_time": "2025-08-03T14:07:26.249783", "galaxy_version": "24.1", "external_id": "gxy-zwh8h", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/1/8/dataset_518c368f-a25f-44f9-afaf-f12a05454f0a.dat' genome && ln -s -f '/galaxy/server/database/objects/5/1/8/dataset_518c368f-a25f-44f9-afaf-f12a05454f0a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/1/6/9/dataset_1695e345-ac6e-412c-b189-22c5332c6504.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/5/7/f/dataset_57fa20d1-5095-478c-b769-62e7779f39ba.dat' input_r.fastq &&    THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/d/6/8/dataset_d681d35b-ab80-4d4f-87e6-d973fd171174.dat'                 | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/5/4/dataset_7548982c-ef53-462b-8c1a-6f954b1fffab.dat'  && mv '/galaxy/server/database/objects/d/6/8/dataset_d681d35b-ab80-4d4f-87e6-d973fd171174.1.dat' '/galaxy/server/database/objects/d/6/8/dataset_d681d35b-ab80-4d4f-87e6-d973fd171174.dat' && mv '/galaxy/server/database/objects/d/6/8/dataset_d681d35b-ab80-4d4f-87e6-d973fd171174.2.dat' '/galaxy/server/database/objects/9/f/5/dataset_9f5a1531-7ac4-4ab8-b609-7f96e5b7df12.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 328, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 13, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": true}"}, "inputs": {"library|input_11": {"id": "8d629ed78320417a", "src": "hda", "uuid": "1695e345-ac6e-412c-b189-22c5332c6504"}, "library|input_12": {"id": "7e80304dceaee516", "src": "hda", "uuid": "57fa20d1-5095-478c-b769-62e7779f39ba"}, "reference_genome|own_file": {"id": "8e49ce658f6de975", "src": "hda", "uuid": "518c368f-a25f-44f9-afaf-f12a05454f0a"}}, "outputs": {"output": {"id": "17a2959b075dbed8", "src": "hda", "uuid": "7548982c-ef53-462b-8c1a-6f954b1fffab"}, "output_unaligned_reads_r": {"id": "5b95c862e2b53488", "src": "hda", "uuid": "9f5a1531-7ac4-4ab8-b609-7f96e5b7df12"}, "output_unaligned_reads_l": {"id": "e5cf7a00dfc6aa82", "src": "hda", "uuid": "d681d35b-ab80-4d4f-87e6-d973fd171174"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/1/8/dataset_518c368f-a25f-44f9-afaf-f12a05454f0a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\nGetting block 2 of 58\n  Reserving size (388) for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\nGetting block 4 of 58\n  Calculating Z arrays for bucket 1\nGetting block 5 of 58\n  Calculating Z arrays for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 6 of 58\n  Reserving size (388) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 5\nGetting block 7 of 58\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 6\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 7: 20%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 7: 30%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 7: 40%\n  bucket 4: 20%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 7: 50%\n  bucket 6: 30%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 1: 70%\n  bucket 7: 60%\n  bucket 3: 50%\n  bucket 6: 40%\n  bucket 2: 70%\n  bucket 7: 70%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 7: 80%\n  bucket 2: 80%\n  bucket 5: 40%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 5: 50%\n  bucket 4: 60%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 6: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 4: 90%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 100%\n  bucket 5: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  bucket 8: 90%\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 100%\n  bucket 9: 10%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 11 of 58\n  bucket 10: 20%\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 58\n  bucket 14: 10%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 58\n  bucket 19: 20%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  bucket 20: 70%\n  bucket 20: 80%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 40%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 26: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\nGetting block 28 of 58\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 27:\n  bucket 28: 10%\n  bucket 27: 10%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\nGetting block 30 of 58\n  Calculating Z arrays for bucket 29\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\nGetting block 25 of 57\n  Calculating Z arrays for bucket 24\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\nGetting block 27 of 57\n  bucket 26: 50%\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\n  bucket 26: 100%\n  bucket 27: 30%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\nGetting block 30 of 57\nGetting block 31 of 57\n  Calculating Z arrays for bucket 29\n  Reserving size (388) for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 31: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\nGetting block 34 of 57\n  bucket 33: 20%\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 30%\n  bucket 34: 10%\n  bucket 33: 40%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 30%\n  bucket 33: 70%\n  bucket 34: 40%\n  bucket 33: 80%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 33: 90%\n  bucket 34: 70%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\nGetting block 36 of 57\n  Calculating Z arrays for bucket 35\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 35: 80%\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 36: 100%\n  bucket 35: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\nGetting block 38 of 57\n  Calculating Z arrays for bucket 37\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 37: 40%\n  bucket 38: 60%\n  bucket 37: 50%\n  bucket 38: 70%\n  bucket 37: 60%\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 37: 80%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 40: 30%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 40: 50%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\nGetting block 43 of 57\n  bucket 42: 10%\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 43: 10%\n  bucket 42: 40%\n  bucket 43: 20%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 43: 30%\n  bucket 42: 70%\n  bucket 43: 40%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 43: 50%\n  bucket 42: 100%\n  bucket 43: 60%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 70%\n  bucket 43: 80%\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 57\n  Entering block accumulator loop for bucket 44:\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 45: 10%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 44: 70%\n  bucket 45: 70%\n  bucket 44: 80%\n  bucket 45: 80%\n  bucket 44: 90%\n  bucket 45: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 49: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 49: 50%\n  bucket 48: 60%\n  bucket 49: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 49: 70%\n  bucket 47: 80%\n  bucket 49: 80%\n  bucket 48: 80%\n  bucket 49: 90%\n  bucket 47: 90%\n  bucket 48: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 50 of 57\nGetting block 51 of 57\n  Reserving size (388) for bucket 50\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 50: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 50: 70%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\nGetting block 53 of 57\n  Calculating Z arrays for bucket 52\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 52:\n  bucket 53: 10%\n  bucket 52: 10%\n  bucket 53: 20%\n  bucket 52: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 52: 30%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 52: 40%\n  bucket 53: 70%\n  bucket 52: 50%\n  bucket 53: 80%\n  bucket 52: 60%\n  bucket 53: 90%\n  bucket 52: 70%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 55: 60%\n  bucket 56: 60%\n  bucket 55: 70%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/1/8/dataset_518c368f-a25f-44f9-afaf-f12a05454f0a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\nGetting block 2 of 58\n  Reserving size (388) for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\nGetting block 4 of 58\n  Calculating Z arrays for bucket 1\nGetting block 5 of 58\n  Calculating Z arrays for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 6 of 58\n  Reserving size (388) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 5\nGetting block 7 of 58\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 6\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 7: 20%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 7: 30%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 7: 40%\n  bucket 4: 20%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 7: 50%\n  bucket 6: 30%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 1: 70%\n  bucket 7: 60%\n  bucket 3: 50%\n  bucket 6: 40%\n  bucket 2: 70%\n  bucket 7: 70%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 7: 80%\n  bucket 2: 80%\n  bucket 5: 40%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 5: 50%\n  bucket 4: 60%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 6: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 4: 90%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 100%\n  bucket 5: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  bucket 8: 90%\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 100%\n  bucket 9: 10%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 11 of 58\n  bucket 10: 20%\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 58\n  bucket 14: 10%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 58\n  bucket 19: 20%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  bucket 20: 70%\n  bucket 20: 80%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 40%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 26: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\nGetting block 28 of 58\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 27:\n  bucket 28: 10%\n  bucket 27: 10%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\nGetting block 30 of 58\n  Calculating Z arrays for bucket 29\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\nGetting block 25 of 57\n  Calculating Z arrays for bucket 24\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\nGetting block 27 of 57\n  bucket 26: 50%\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\n  bucket 26: 100%\n  bucket 27: 30%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\nGetting block 30 of 57\nGetting block 31 of 57\n  Calculating Z arrays for bucket 29\n  Reserving size (388) for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 31: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\nGetting block 34 of 57\n  bucket 33: 20%\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 30%\n  bucket 34: 10%\n  bucket 33: 40%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 30%\n  bucket 33: 70%\n  bucket 34: 40%\n  bucket 33: 80%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 33: 90%\n  bucket 34: 70%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\nGetting block 36 of 57\n  Calculating Z arrays for bucket 35\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 35: 80%\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 36: 100%\n  bucket 35: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\nGetting block 38 of 57\n  Calculating Z arrays for bucket 37\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 37: 40%\n  bucket 38: 60%\n  bucket 37: 50%\n  bucket 38: 70%\n  bucket 37: 60%\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 37: 80%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 40: 30%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 40: 50%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\nGetting block 43 of 57\n  bucket 42: 10%\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 43: 10%\n  bucket 42: 40%\n  bucket 43: 20%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 43: 30%\n  bucket 42: 70%\n  bucket 43: 40%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 43: 50%\n  bucket 42: 100%\n  bucket 43: 60%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 70%\n  bucket 43: 80%\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 57\n  Entering block accumulator loop for bucket 44:\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 45: 10%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 44: 70%\n  bucket 45: 70%\n  bucket 44: 80%\n  bucket 45: 80%\n  bucket 44: 90%\n  bucket 45: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 49: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 49: 50%\n  bucket 48: 60%\n  bucket 49: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 49: 70%\n  bucket 47: 80%\n  bucket 49: 80%\n  bucket 48: 80%\n  bucket 49: 90%\n  bucket 47: 90%\n  bucket 48: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 50 of 57\nGetting block 51 of 57\n  Reserving size (388) for bucket 50\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 50: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 50: 70%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\nGetting block 53 of 57\n  Calculating Z arrays for bucket 52\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 52:\n  bucket 53: 10%\n  bucket 52: 10%\n  bucket 53: 20%\n  bucket 52: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 52: 30%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 52: 40%\n  bucket 53: 70%\n  bucket 52: 50%\n  bucket 53: 80%\n  bucket 52: 60%\n  bucket 53: 90%\n  bucket 52: 70%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 55: 60%\n  bucket 56: 60%\n  bucket 55: 70%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:07:15", "plugin": "core", "name": "end_epoch", "raw_value": "1754230035.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:07:14", "plugin": "core", "name": "start_epoch", "raw_value": "1754230034.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-2", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 2, "time_seconds": 30.733118295669556, "inputs": {"library|input_1": {"src": "hda", "id": "613dea303255d7f9"}, "library|input_2": {"src": "hda", "id": "3fc2195655698e79"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "0af2cfab557252e4"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "31bcd1bf94c6ceec", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "error", "exit_code": null, "create_time": "2025-08-03T14:07:51.881814", "update_time": "2025-08-03T14:07:57.211956", "galaxy_version": "24.1", "external_id": "gxy-8cvnc", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/4/2/dataset_c4216541-41fb-4d37-aae0-e5579d2ef6ab.dat' genome && ln -s -f '/galaxy/server/database/objects/c/4/2/dataset_c4216541-41fb-4d37-aae0-e5579d2ef6ab.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/6/9/7/dataset_6978285b-db8a-4b95-867d-5bc717bbb0ca.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/f/b/6/dataset_fb6f5db4-0cc7-4dbd-b3e5-1485abafc53b.dat' input_r.fastq &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/0/b/dataset_70b3a094-5caa-498e-9138-33eb7caa5f65.dat'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": null, \"DS\": null, \"DT\": null, \"FO\": null, \"KS\": null, \"PG\": null, \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": false}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": false}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": false}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 334, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 332, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 333, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "613dea303255d7f9", "src": "hda", "uuid": "6978285b-db8a-4b95-867d-5bc717bbb0ca"}, "library|input_2": {"id": "3fc2195655698e79", "src": "hda", "uuid": "fb6f5db4-0cc7-4dbd-b3e5-1485abafc53b"}, "reference_genome|own_file": {"id": "0af2cfab557252e4", "src": "hda", "uuid": "c4216541-41fb-4d37-aae0-e5579d2ef6ab"}}, "outputs": {"output": {"id": "13a9e8f5c8d38fd2", "src": "hda", "uuid": "70b3a094-5caa-498e-9138-33eb7caa5f65"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/4/2/dataset_c4216541-41fb-4d37-aae0-e5579d2ef6ab.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 6: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 7: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 7: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 1: 90%\n  bucket 7: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 5: 70%\n  bucket 2: 100%\n  bucket 3: 90%\n  bucket 4: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 6: 80%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 5: 80%\n  bucket 4: 80%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 4: 90%\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 4: 100%\n  Sorting block of length 203 for bucket 5\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\nGetting block 9 of 58\n  Entering block accumulator loop for bucket 8:\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 8: 20%\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 8: 30%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 8: 40%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 8: 50%\n  bucket 10: 50%\n  bucket 8: 60%\n  bucket 9: 40%\n  bucket 8: 70%\n  bucket 10: 60%\n  bucket 8: 80%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 8: 90%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 8: 100%\n  bucket 10: 90%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 10: 100%\n  bucket 9: 70%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 58\n  bucket 11: 40%\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\n  Calculating Z arrays for bucket 15\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  bucket 15: 100%\n  (Using difference cover)\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 58\n  bucket 19: 10%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 58\n  bucket 21: 50%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  bucket 23: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 25: 10%\n  bucket 24: 80%\n  bucket 23: 70%\n  bucket 25: 20%\n  bucket 24: 90%\n  bucket 23: 80%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 58\n  bucket 26: 20%\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\nGetting block 29 of 58\n  Calculating Z arrays for bucket 28\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  bucket 31: 80%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 372 for bucket 22\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 57\n  bucket 24: 10%\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  Sorting block time: 00:00:00\n  bucket 25: 90%\nReturning block of 246 for bucket 24\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\nGetting block 31 of 57\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 20%\n  bucket 31: 10%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 31: 30%\n  bucket 29: 60%\n  bucket 30: 30%\n  bucket 29: 70%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 29: 100%\n  bucket 30: 70%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 80%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 57\n  bucket 36: 10%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 36: 30%\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 30%\n  bucket 38: 10%\n  bucket 36: 40%\n  bucket 37: 40%\n  bucket 36: 50%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 37: 60%\n  bucket 36: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 38: 40%\n  bucket 37: 90%\n  bucket 38: 50%\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 38: 80%\nReturning block of 268 for bucket 37\n  bucket 38: 90%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 57\n  bucket 40: 20%\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 41: 60%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\nReturning block of 380 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\nGetting block 44 of 57\n  bucket 43: 20%\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 43: 60%\n  bucket 44: 30%\n  bucket 43: 70%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  bucket 52: 30%\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 40%\n  bucket 54: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 52: 50%\n  bucket 54: 30%\n  bucket 53: 20%\n  bucket 54: 40%\n  bucket 52: 60%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 52: 70%\n  bucket 53: 30%\n  bucket 54: 70%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 53: 40%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 54: 100%\n  bucket 52: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  bucket 53: 80%\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\nGetting block 56 of 57\n  Calculating Z arrays for bucket 55\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 55: 80%\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": null, "job_stderr": null, "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/4/2/dataset_c4216541-41fb-4d37-aae0-e5579d2ef6ab.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 6: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 7: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 7: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 1: 90%\n  bucket 7: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 5: 70%\n  bucket 2: 100%\n  bucket 3: 90%\n  bucket 4: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 6: 80%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 5: 80%\n  bucket 4: 80%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 4: 90%\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 4: 100%\n  Sorting block of length 203 for bucket 5\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\nGetting block 9 of 58\n  Entering block accumulator loop for bucket 8:\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 8: 20%\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 8: 30%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 8: 40%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 8: 50%\n  bucket 10: 50%\n  bucket 8: 60%\n  bucket 9: 40%\n  bucket 8: 70%\n  bucket 10: 60%\n  bucket 8: 80%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 8: 90%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 8: 100%\n  bucket 10: 90%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 10: 100%\n  bucket 9: 70%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 58\n  bucket 11: 40%\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\n  Calculating Z arrays for bucket 15\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  bucket 15: 100%\n  (Using difference cover)\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 58\n  bucket 19: 10%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 58\n  bucket 21: 50%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  bucket 23: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 25: 10%\n  bucket 24: 80%\n  bucket 23: 70%\n  bucket 25: 20%\n  bucket 24: 90%\n  bucket 23: 80%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 58\n  bucket 26: 20%\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\nGetting block 29 of 58\n  Calculating Z arrays for bucket 28\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  bucket 31: 80%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 372 for bucket 22\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 57\n  bucket 24: 10%\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  Sorting block time: 00:00:00\n  bucket 25: 90%\nReturning block of 246 for bucket 24\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\nGetting block 31 of 57\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 20%\n  bucket 31: 10%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 31: 30%\n  bucket 29: 60%\n  bucket 30: 30%\n  bucket 29: 70%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 29: 100%\n  bucket 30: 70%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 80%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 57\n  bucket 36: 10%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 36: 30%\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 30%\n  bucket 38: 10%\n  bucket 36: 40%\n  bucket 37: 40%\n  bucket 36: 50%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 37: 60%\n  bucket 36: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 38: 40%\n  bucket 37: 90%\n  bucket 38: 50%\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 38: 80%\nReturning block of 268 for bucket 37\n  bucket 38: 90%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 57\n  bucket 40: 20%\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 41: 60%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\nReturning block of 380 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\nGetting block 44 of 57\n  bucket 43: 20%\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 43: 60%\n  bucket 44: 30%\n  bucket 43: 70%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  bucket 52: 30%\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 40%\n  bucket 54: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 52: 50%\n  bucket 54: 30%\n  bucket 53: 20%\n  bucket 54: 40%\n  bucket 52: 60%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 52: 70%\n  bucket 53: 30%\n  bucket 54: 70%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 53: 40%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 54: 100%\n  bucket 52: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  bucket 53: 80%\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\nGetting block 56 of 57\n  Calculating Z arrays for bucket 55\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 55: 80%\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1, exit_code: None, stderr: Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1, exit_code: None, stderr: Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n."], "status": "failure"}}, {"id": "bowtie2/2.5.3+galaxy1-3", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 3, "time_seconds": 30.198665142059326, "inputs": {"library|input_1": {"src": "hda", "id": "f01c7c7254bc82c5"}, "library|input_2": {"src": "hda", "id": "054924622e26be6a"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "fff5ec7be9224cc1"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "831dd87d71a86966", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "error", "exit_code": null, "create_time": "2025-08-03T14:08:21.694411", "update_time": "2025-08-03T14:08:27.496487", "galaxy_version": "24.1", "external_id": "gxy-lt89n", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/a/9/0/dataset_a90f332b-e8c1-4ace-81c0-7b6d1397b280.dat' genome && ln -s -f '/galaxy/server/database/objects/a/9/0/dataset_a90f332b-e8c1-4ace-81c0-7b6d1397b280.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/a/f/0/dataset_af0e8f6b-81e1-4b7e-bd9a-cbc699480f88.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/7/1/dataset_d71e39e1-8577-4934-8e42-1c29ec692c80.dat' input_r.fastq &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> >(tee '/galaxy/server/database/objects/2/7/2/dataset_27208cff-2864-4f21-ab5c-c58e19ba835a.dat' >&2)  | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/8/8/dataset_088df841-c0ef-4f33-a99c-1e24a4a87520.dat'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "true", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 338, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 336, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 337, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "f01c7c7254bc82c5", "src": "hda", "uuid": "af0e8f6b-81e1-4b7e-bd9a-cbc699480f88"}, "library|input_2": {"id": "054924622e26be6a", "src": "hda", "uuid": "d71e39e1-8577-4934-8e42-1c29ec692c80"}, "reference_genome|own_file": {"id": "fff5ec7be9224cc1", "src": "hda", "uuid": "a90f332b-e8c1-4ace-81c0-7b6d1397b280"}}, "outputs": {"mapping_stats": {"id": "d365516fd80ddb1e", "src": "hda", "uuid": "27208cff-2864-4f21-ab5c-c58e19ba835a"}, "output": {"id": "847df21257c63247", "src": "hda", "uuid": "088df841-c0ef-4f33-a99c-1e24a4a87520"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/0/dataset_a90f332b-e8c1-4ace-81c0-7b6d1397b280.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 5 of 58\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\nGetting block 6 of 58\n  Entering block accumulator loop for bucket 2:\n  Reserving size (388) for bucket 5\nGetting block 7 of 58\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Reserving size (388) for bucket 6\n  Calculating Z arrays for bucket 5\n  Reserving size (388) for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 7: 10%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 5: 10%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 6: 20%\n  bucket 1: 60%\n  bucket 7: 20%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 5: 20%\n  bucket 2: 60%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 7: 40%\n  bucket 5: 30%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 5: 40%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 4: 80%\n  bucket 3: 100%\n  bucket 5: 50%\n  bucket 2: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 5: 80%\n  bucket 6: 80%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\nGetting block 9 of 58\n  Calculating Z arrays for bucket 8\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 8: 40%\n  bucket 9: 50%\n  bucket 8: 50%\n  bucket 9: 60%\n  bucket 8: 60%\n  bucket 9: 70%\n  bucket 8: 70%\n  bucket 9: 80%\n  bucket 8: 80%\n  bucket 9: 90%\n  bucket 8: 90%\n  bucket 9: 100%\n  bucket 8: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 58\n  bucket 10: 10%\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 58\n  bucket 12: 10%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 58\n  bucket 14: 50%\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 14: 80%\n  bucket 16: 20%\n  bucket 14: 90%\n  bucket 15: 20%\n  bucket 14: 100%\n  bucket 16: 30%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 40%\n  bucket 16: 80%\n  bucket 15: 50%\n  bucket 16: 90%\n  bucket 16: 100%\n  bucket 15: 60%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\nGetting block 18 of 58\n  Calculating Z arrays for bucket 17\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\nGetting block 19 of 58\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 19: 10%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 19: 40%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 19: 50%\n  bucket 17: 80%\n  bucket 19: 60%\n  bucket 18: 30%\n  bucket 19: 70%\n  bucket 17: 90%\n  bucket 18: 40%\n  bucket 19: 80%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  bucket 26: 90%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 29: 80%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 50%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 60%\n  bucket 32: 10%\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 32: 30%\n  bucket 31: 90%\n  bucket 32: 40%\n  bucket 31: 100%\n  Sorting block of length 377 for buck\n..\n0:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 57\n  bucket 24: 10%\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 70%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\nGetting block 28 of 57\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 57\n  Entering block accumulator loop for bucket 29:\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 57\n  bucket 34: 10%\n  Reserving size (388) for bucket 35\nGetting block 36 of 57\n  Calculating Z arrays for bucket 35\n  Reserving size (388) for bucket 36\n  bucket 34: 20%\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 30%\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 34: 40%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 34: 60%\n  bucket 35: 30%\n  bucket 36: 50%\n  bucket 35: 40%\n  bucket 36: 60%\n  bucket 34: 70%\n  bucket 36: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 36: 80%\n  bucket 35: 60%\n  bucket 36: 90%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 34: 100%\n  bucket 35: 80%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\nGetting block 39 of 57\n  Calculating Z arrays for bucket 38\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 39: 10%\n  bucket 38: 30%\n  bucket 39: 20%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 57\n  Entering block accumulator loop for bucket 41:\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  bucket 41: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\nGetting block 44 of 57\n  Calculating Z arrays for bucket 43\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\nGetting block 46 of 57\n  Reserving size (388) for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 45\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 45:\n  bucket 46: 10%\n  bucket 45: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\nGetting block 49 of 57\n  Calculating Z arrays for bucket 48\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\nGetting block 51 of 57\n  Calculating Z arrays for bucket 50\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 57\n  bucket 52: 10%\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\nGetting block 55 of 57\n  Calculating Z arrays for bucket 54\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 54: 50%\n  bucket 55: 50%\n  bucket 54: 60%\n  bucket 55: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 55: 80%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": null, "job_stderr": null, "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/0/dataset_a90f332b-e8c1-4ace-81c0-7b6d1397b280.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 5 of 58\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\nGetting block 6 of 58\n  Entering block accumulator loop for bucket 2:\n  Reserving size (388) for bucket 5\nGetting block 7 of 58\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Reserving size (388) for bucket 6\n  Calculating Z arrays for bucket 5\n  Reserving size (388) for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 7: 10%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 5: 10%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 6: 20%\n  bucket 1: 60%\n  bucket 7: 20%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 5: 20%\n  bucket 2: 60%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 7: 40%\n  bucket 5: 30%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 5: 40%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 4: 80%\n  bucket 3: 100%\n  bucket 5: 50%\n  bucket 2: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 5: 80%\n  bucket 6: 80%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\nGetting block 9 of 58\n  Calculating Z arrays for bucket 8\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 8: 40%\n  bucket 9: 50%\n  bucket 8: 50%\n  bucket 9: 60%\n  bucket 8: 60%\n  bucket 9: 70%\n  bucket 8: 70%\n  bucket 9: 80%\n  bucket 8: 80%\n  bucket 9: 90%\n  bucket 8: 90%\n  bucket 9: 100%\n  bucket 8: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 58\n  bucket 10: 10%\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 58\n  bucket 12: 10%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 58\n  bucket 14: 50%\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 14: 80%\n  bucket 16: 20%\n  bucket 14: 90%\n  bucket 15: 20%\n  bucket 14: 100%\n  bucket 16: 30%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 40%\n  bucket 16: 80%\n  bucket 15: 50%\n  bucket 16: 90%\n  bucket 16: 100%\n  bucket 15: 60%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\nGetting block 18 of 58\n  Calculating Z arrays for bucket 17\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\nGetting block 19 of 58\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 19: 10%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 19: 40%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 19: 50%\n  bucket 17: 80%\n  bucket 19: 60%\n  bucket 18: 30%\n  bucket 19: 70%\n  bucket 17: 90%\n  bucket 18: 40%\n  bucket 19: 80%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  bucket 26: 90%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 29: 80%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 50%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 60%\n  bucket 32: 10%\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 32: 30%\n  bucket 31: 90%\n  bucket 32: 40%\n  bucket 31: 100%\n  Sorting block of length 377 for buck\n..\n0:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 57\n  bucket 24: 10%\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 70%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\nGetting block 28 of 57\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 57\n  Entering block accumulator loop for bucket 29:\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 57\n  bucket 34: 10%\n  Reserving size (388) for bucket 35\nGetting block 36 of 57\n  Calculating Z arrays for bucket 35\n  Reserving size (388) for bucket 36\n  bucket 34: 20%\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 30%\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 34: 40%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 34: 60%\n  bucket 35: 30%\n  bucket 36: 50%\n  bucket 35: 40%\n  bucket 36: 60%\n  bucket 34: 70%\n  bucket 36: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 36: 80%\n  bucket 35: 60%\n  bucket 36: 90%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 34: 100%\n  bucket 35: 80%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\nGetting block 39 of 57\n  Calculating Z arrays for bucket 38\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 39: 10%\n  bucket 38: 30%\n  bucket 39: 20%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 57\n  Entering block accumulator loop for bucket 41:\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  bucket 41: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\nGetting block 44 of 57\n  Calculating Z arrays for bucket 43\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\nGetting block 46 of 57\n  Reserving size (388) for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 45\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 45:\n  bucket 46: 10%\n  bucket 45: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\nGetting block 49 of 57\n  Calculating Z arrays for bucket 48\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\nGetting block 51 of 57\n  Calculating Z arrays for bucket 50\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 57\n  bucket 52: 10%\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\nGetting block 55 of 57\n  Calculating Z arrays for bucket 54\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 54: 50%\n  bucket 55: 50%\n  bucket 54: 60%\n  bucket 55: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 55: 80%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1, exit_code: None, stderr: Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1, exit_code: None, stderr: Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1, exit_code: None, stderr: Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n."], "status": "failure"}}, {"id": "bowtie2/2.5.3+galaxy1-4", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 4, "time_seconds": 12.46860957145691, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "bowtie2/2.5.3+galaxy1-5", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 5, "time_seconds": 40.323665380477905, "inputs": {"library|input_1": {"src": "hda", "id": "3c054a6504e3e061"}, "library|input_2": {"src": "hda", "id": "2ade36d1309065c4"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "54d677f0e61e936d"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "52470f34259660ac", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:09:06.073718", "update_time": "2025-08-03T14:09:20.075677", "galaxy_version": "24.1", "external_id": "gxy-xkklc", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/f/8/0/dataset_f8056e81-dbe1-461d-a3f7-2e08f9711be7.dat' genome && ln -s -f '/galaxy/server/database/objects/f/8/0/dataset_f8056e81-dbe1-461d-a3f7-2e08f9711be7.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/b/4/dataset_cb4774c1-9379-4291-9645-942f2628be3d.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/5/3/c/dataset_53c42a15-e048-414d-9461-c314ebf357ed.dat' input_r.fastq.gz &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/f/7/dataset_ef78e014-aaf0-41d7-9854-ef79fa2c26a2.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 345, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 343, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 344, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "3c054a6504e3e061", "src": "hda", "uuid": "cb4774c1-9379-4291-9645-942f2628be3d"}, "library|input_2": {"id": "2ade36d1309065c4", "src": "hda", "uuid": "53c42a15-e048-414d-9461-c314ebf357ed"}, "reference_genome|own_file": {"id": "54d677f0e61e936d", "src": "hda", "uuid": "f8056e81-dbe1-461d-a3f7-2e08f9711be7"}}, "outputs": {"output": {"id": "c8de31e7d30a3b88", "src": "hda", "uuid": "ef78e014-aaf0-41d7-9854-ef79fa2c26a2"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/f/8/0/dataset_f8056e81-dbe1-461d-a3f7-2e08f9711be7.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 5: 30%\n  bucket 4: 30%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 1: 60%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 5: 50%\n  bucket 7: 50%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 6: 60%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 7: 70%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 6: 70%\n  bucket 4: 90%\n  bucket 7: 80%\n  bucket 5: 80%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 4: 100%\n  bucket 5: 90%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 7: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\nGetting block 8 of 58\nGetting block 9 of 58\n  Reserving size (388) for bucket 8\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 9: 30%\n  bucket 8: 40%\n  bucket 9: 40%\n  bucket 8: 50%\n  bucket 9: 50%\n  bucket 8: 60%\n  bucket 9: 60%\n  bucket 8: 70%\n  bucket 9: 70%\n  bucket 8: 80%\n  bucket 9: 80%\n  bucket 8: 90%\n  bucket 9: 90%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\nGetting block 13 of 58\n  Calculating Z arrays for bucket 12\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 12: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\nGetting block 15 of 58\n  bucket 14: 30%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  bucket 15: 60%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 60%\n  bucket 20: 10%\n  bucket 19: 70%\n  bucket 20: 20%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 58\n  bucket 21: 10%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 58\n  bucket 24: 10%\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  bucket 25: 80%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\nGetting block 27 of 58\n  bucket 26: 50%\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\n  bucket 26: 100%\n  bucket 27: 30%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\nGetting block 31 of 58\n  Calculating Z arrays for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 40%\n  bucket 31: 60%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 30: 70%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\nGetting block 33 of 58\n  Calculating Z arrays for buc\n..\nucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  bucket 26: 50%\n  Calculating Z arrays for bucket 27\n  bucket 26: 60%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\nGetting block 28 of 57\n  bucket 27: 30%\n  bucket 26: 100%\n  Reserving size (388) for bucket 28\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 27: 70%\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  bucket 28: 30%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 40%\n  bucket 27: 100%\n  bucket 28: 50%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 57\n  Entering block accumulator loop for bucket 29:\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\nGetting block 34 of 57\n  Calculating Z arrays for bucket 33\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 57\n  bucket 36: 10%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 57\n  bucket 36: 20%\n  bucket 37: 10%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 36: 30%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 36: 40%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 36: 50%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 36: 60%\n  bucket 38: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 36: 70%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 41: 20%\n  bucket 40: 80%\n  bucket 41: 30%\n  bucket 40: 90%\n  bucket 40: 100%\n  bucket 41: 40%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 50%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 57\n  bucket 45: 20%\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 46: 10%\n  bucket 45: 50%\n  bucket 46: 20%\n  bucket 45: 60%\n  bucket 46: 30%\n  bucket 45: 70%\n  bucket 46: 40%\n  bucket 45: 80%\n  bucket 46: 50%\n  bucket 45: 90%\n  bucket 46: 60%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 49 of 57\nGetting block 48 of 57\n  Reserving size (388) for bucket 49\n  Reserving size (388) for bucket 48\nGetting block 50 of 57\n  Calculating Z arrays for bucket 49\n  Calculating Z arrays for bucket 48\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 48: 10%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 48: 50%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 48: 60%\n  bucket 49: 60%\n  bucket 50: 40%\n  bucket 48: 70%\n  bucket 49: 70%\n  bucket 50: 50%\n  bucket 48: 80%\n  bucket 49: 80%\n  bucket 48: 90%\n  bucket 50: 60%\n  bucket 48: 100%\n  bucket 49: 90%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\nGetting block 53 of 57\n  Calculating Z arrays for bucket 52\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 52: 60%\n  bucket 53: 70%\n  bucket 52: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 52: 80%\n  bucket 53: 100%\n  bucket 52: 90%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 40%\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 50%\n  bucket 57: 30%\n  bucket 56: 60%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 56: 70%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/f/8/0/dataset_f8056e81-dbe1-461d-a3f7-2e08f9711be7.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 5: 30%\n  bucket 4: 30%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 1: 60%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 5: 50%\n  bucket 7: 50%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 6: 60%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 7: 70%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 6: 70%\n  bucket 4: 90%\n  bucket 7: 80%\n  bucket 5: 80%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 4: 100%\n  bucket 5: 90%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 7: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\nGetting block 8 of 58\nGetting block 9 of 58\n  Reserving size (388) for bucket 8\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 9: 30%\n  bucket 8: 40%\n  bucket 9: 40%\n  bucket 8: 50%\n  bucket 9: 50%\n  bucket 8: 60%\n  bucket 9: 60%\n  bucket 8: 70%\n  bucket 9: 70%\n  bucket 8: 80%\n  bucket 9: 80%\n  bucket 8: 90%\n  bucket 9: 90%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\nGetting block 13 of 58\n  Calculating Z arrays for bucket 12\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 12: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\nGetting block 15 of 58\n  bucket 14: 30%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  bucket 15: 60%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 60%\n  bucket 20: 10%\n  bucket 19: 70%\n  bucket 20: 20%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 58\n  bucket 21: 10%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 58\n  bucket 24: 10%\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  bucket 25: 80%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\nGetting block 27 of 58\n  bucket 26: 50%\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\n  bucket 26: 100%\n  bucket 27: 30%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\nGetting block 31 of 58\n  Calculating Z arrays for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 40%\n  bucket 31: 60%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 30: 70%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\nGetting block 33 of 58\n  Calculating Z arrays for buc\n..\nucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  bucket 26: 50%\n  Calculating Z arrays for bucket 27\n  bucket 26: 60%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\nGetting block 28 of 57\n  bucket 27: 30%\n  bucket 26: 100%\n  Reserving size (388) for bucket 28\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 27: 70%\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  bucket 28: 30%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 40%\n  bucket 27: 100%\n  bucket 28: 50%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 57\n  Entering block accumulator loop for bucket 29:\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\nGetting block 34 of 57\n  Calculating Z arrays for bucket 33\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 57\n  bucket 36: 10%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 57\n  bucket 36: 20%\n  bucket 37: 10%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 36: 30%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 36: 40%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 36: 50%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 36: 60%\n  bucket 38: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 36: 70%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 41: 20%\n  bucket 40: 80%\n  bucket 41: 30%\n  bucket 40: 90%\n  bucket 40: 100%\n  bucket 41: 40%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 50%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 57\n  bucket 45: 20%\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 46: 10%\n  bucket 45: 50%\n  bucket 46: 20%\n  bucket 45: 60%\n  bucket 46: 30%\n  bucket 45: 70%\n  bucket 46: 40%\n  bucket 45: 80%\n  bucket 46: 50%\n  bucket 45: 90%\n  bucket 46: 60%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 49 of 57\nGetting block 48 of 57\n  Reserving size (388) for bucket 49\n  Reserving size (388) for bucket 48\nGetting block 50 of 57\n  Calculating Z arrays for bucket 49\n  Calculating Z arrays for bucket 48\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 48: 10%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 48: 50%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 48: 60%\n  bucket 49: 60%\n  bucket 50: 40%\n  bucket 48: 70%\n  bucket 49: 70%\n  bucket 50: 50%\n  bucket 48: 80%\n  bucket 49: 80%\n  bucket 48: 90%\n  bucket 50: 60%\n  bucket 48: 100%\n  bucket 49: 90%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\nGetting block 53 of 57\n  Calculating Z arrays for bucket 52\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 52: 60%\n  bucket 53: 70%\n  bucket 52: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 52: 80%\n  bucket 53: 100%\n  bucket 52: 90%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 40%\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 50%\n  bucket 57: 30%\n  bucket 56: 60%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 56: 70%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:09:09", "plugin": "core", "name": "end_epoch", "raw_value": "1754230149.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:09:08", "plugin": "core", "name": "start_epoch", "raw_value": "1754230148.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-6", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 6, "time_seconds": 39.79336071014404, "inputs": {"library|input_1": {"src": "hda", "id": "33bc327b906a40e6"}, "library|input_2": {"src": "hda", "id": "52bec666f2ecd1d5"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "a19ede4f99458d2f"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "1b6cd567c06cc6dd", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:09:46.019135", "update_time": "2025-08-03T14:09:59.961556", "galaxy_version": "24.1", "external_id": "gxy-cdn7p", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/0/7/dataset_9071f878-9daa-4941-a2c2-762165bf2e74.dat' genome && ln -s -f '/galaxy/server/database/objects/9/0/7/dataset_9071f878-9daa-4941-a2c2-762165bf2e74.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/7/f/7/dataset_7f75552e-96f1-4c54-bc49-96c059adcfdc.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/1/c/e/dataset_1ce26b11-7ddb-469c-9d1a-325571b8a47f.dat' input_r.fastq.bz2 &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/6/c/dataset_26c50734-1187-45f2-a2cd-c061a6a095ab.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 349, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 347, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 348, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "33bc327b906a40e6", "src": "hda", "uuid": "7f75552e-96f1-4c54-bc49-96c059adcfdc"}, "library|input_2": {"id": "52bec666f2ecd1d5", "src": "hda", "uuid": "1ce26b11-7ddb-469c-9d1a-325571b8a47f"}, "reference_genome|own_file": {"id": "a19ede4f99458d2f", "src": "hda", "uuid": "9071f878-9daa-4941-a2c2-762165bf2e74"}}, "outputs": {"output": {"id": "2d4b138278112115", "src": "hda", "uuid": "26c50734-1187-45f2-a2cd-c061a6a095ab"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/0/7/dataset_9071f878-9daa-4941-a2c2-762165bf2e74.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 5: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 5: 50%\n  bucket 1: 70%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 5: 60%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 1: 100%\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 60%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 5: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 100%\n  bucket 7: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\nGetting block 9 of 58\n  Calculating Z arrays for bucket 8\n  Reserving size (388) for bucket 9\nGetting block 10 of 58\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 10: 20%\n  bucket 8: 40%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 8: 50%\n  bucket 9: 40%\n  bucket 8: 60%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 8: 70%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 8: 80%\n  bucket 9: 70%\n  bucket 8: 90%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\nGetting block 12 of 58\n  Calculating Z arrays for bucket 11\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 13: 10%\n  bucket 11: 40%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 11: 80%\n  bucket 13: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 13: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 13: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 58\n  Entering block accumulator loop for bucket 14:\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  bucket 14: 90%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 58\n  Entering block accumulator loop for bucket 17:\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 58\n  bucket 19: 40%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 50%\n  bucket 20: 10%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 20%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  bucket 21: 20%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 58\n  Entering block accumulator loop for bucket 27:\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  bucket 28: 90%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 372 for bucket 22\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 57\n  bucket 25: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  bucket 26: 80%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 57\n  Entering block accumulator loop for bucket 28:\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 57\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\nGetting block 32 of 57\n  bucket 31: 10%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 30: 70%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\nGetting block 35 of 57\n  Calculating Z arrays for bucket 34\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 34: 20%\n  bucket 35: 30%\n  bucket 34: 30%\n  bucket 35: 40%\n  bucket 34: 40%\n  bucket 35: 50%\n  bucket 34: 50%\n  bucket 35: 60%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 70%\n  bucket 34: 80%\n  bucket 35: 80%\n  bucket 34: 90%\n  bucket 35: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 39 of 57\nGetting block 38 of 57\n  bucket 37: 10%\n  Reserving size (388) for bucket 39\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 37: 50%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 37: 70%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 37: 80%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 37: 100%\n  bucket 38: 80%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 38: 90%\n  bucket 39: 100%\n  bucket 38: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 40: 50%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 57\n  Entering block accumulator loop for bucket 42:\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 43: 70%\n  bucket 42: 70%\n  bucket 43: 80%\n  bucket 42: 80%\n  bucket 43: 90%\n  bucket 42: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\nGetting block 45 of 57\n  Calculating Z arrays for bucket 44\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 44: 10%\n  bucket 45: 30%\n  bucket 44: 20%\n  bucket 45: 40%\n  bucket 44: 30%\n  bucket 45: 50%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 45: 60%\n  bucket 44: 60%\n  bucket 45: 70%\n  bucket 44: 70%\n  bucket 45: 80%\n  bucket 44: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 48: 20%\n  bucket 49: 30%\n  bucket 48: 30%\n  bucket 49: 40%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 70%\n  bucket 48: 80%\n  bucket 49: 80%\n  bucket 48: 90%\n  bucket 49: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\nGetting block 52 of 57\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 51: 80%\n  bucket 52: 90%\n  bucket 51: 90%\n  bucket 51: 100%\n  bucket 52: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 53: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 54: 80%\n  bucket 53: 70%\n  bucket 54: 90%\n  bucket 53: 80%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\nGetting block 57 of 57\n  bucket 56: 30%\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 50%\n  bucket 57: 20%\n  bucket 56: 60%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 56: 70%\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 57: 60%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 56: 100%\n  bucket 57: 80%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/0/7/dataset_9071f878-9daa-4941-a2c2-762165bf2e74.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 5: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 5: 50%\n  bucket 1: 70%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 5: 60%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 1: 100%\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 60%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 5: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 100%\n  bucket 7: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\nGetting block 9 of 58\n  Calculating Z arrays for bucket 8\n  Reserving size (388) for bucket 9\nGetting block 10 of 58\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 8: 10%\n  bucket 9: 10%\n  bucket 8: 20%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 8: 30%\n  bucket 10: 20%\n  bucket 8: 40%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 8: 50%\n  bucket 9: 40%\n  bucket 8: 60%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 8: 70%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 8: 80%\n  bucket 9: 70%\n  bucket 8: 90%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\nGetting block 12 of 58\n  Calculating Z arrays for bucket 11\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 13: 10%\n  bucket 11: 40%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 11: 80%\n  bucket 13: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 13: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 13: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 58\n  Entering block accumulator loop for bucket 14:\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  bucket 14: 90%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 58\n  Entering block accumulator loop for bucket 17:\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 58\n  bucket 19: 40%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 50%\n  bucket 20: 10%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 20%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  bucket 21: 20%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 58\n  Entering block accumulator loop for bucket 27:\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  bucket 28: 90%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 372 for bucket 22\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 57\n  bucket 25: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  bucket 26: 80%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 57\n  Entering block accumulator loop for bucket 28:\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 57\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\nGetting block 32 of 57\n  bucket 31: 10%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 30: 70%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\nGetting block 35 of 57\n  Calculating Z arrays for bucket 34\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 34: 20%\n  bucket 35: 30%\n  bucket 34: 30%\n  bucket 35: 40%\n  bucket 34: 40%\n  bucket 35: 50%\n  bucket 34: 50%\n  bucket 35: 60%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 70%\n  bucket 34: 80%\n  bucket 35: 80%\n  bucket 34: 90%\n  bucket 35: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 39 of 57\nGetting block 38 of 57\n  bucket 37: 10%\n  Reserving size (388) for bucket 39\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 37: 50%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 37: 70%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 37: 80%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 37: 100%\n  bucket 38: 80%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 38: 90%\n  bucket 39: 100%\n  bucket 38: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 40: 50%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 57\n  Entering block accumulator loop for bucket 42:\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 43: 70%\n  bucket 42: 70%\n  bucket 43: 80%\n  bucket 42: 80%\n  bucket 43: 90%\n  bucket 42: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\nGetting block 45 of 57\n  Calculating Z arrays for bucket 44\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 44: 10%\n  bucket 45: 30%\n  bucket 44: 20%\n  bucket 45: 40%\n  bucket 44: 30%\n  bucket 45: 50%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 45: 60%\n  bucket 44: 60%\n  bucket 45: 70%\n  bucket 44: 70%\n  bucket 45: 80%\n  bucket 44: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 48: 20%\n  bucket 49: 30%\n  bucket 48: 30%\n  bucket 49: 40%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 70%\n  bucket 48: 80%\n  bucket 49: 80%\n  bucket 48: 90%\n  bucket 49: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\nGetting block 52 of 57\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 51: 80%\n  bucket 52: 90%\n  bucket 51: 90%\n  bucket 51: 100%\n  bucket 52: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 53: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 54: 80%\n  bucket 53: 70%\n  bucket 54: 90%\n  bucket 53: 80%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\nGetting block 57 of 57\n  bucket 56: 30%\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 50%\n  bucket 57: 20%\n  bucket 56: 60%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 56: 70%\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 57: 60%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 56: 100%\n  bucket 57: 80%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:09:49", "plugin": "core", "name": "end_epoch", "raw_value": "1754230189.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:09:48", "plugin": "core", "name": "start_epoch", "raw_value": "1754230188.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-7", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 7, "time_seconds": 39.674917221069336, "inputs": {"library|input_1": {"src": "hda", "id": "b0392d424d9ba52a"}, "library|input_2": {"src": "hda", "id": "c67fbffeac0bcd35"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ba50e821c6befa05"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "1bda2726d2fc2415", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:10:24.985264", "update_time": "2025-08-03T14:10:39.928915", "galaxy_version": "24.1", "external_id": "gxy-bqp8w", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/2/6/dataset_42684e0c-3e65-454e-afd5-c4c0b0620f03.dat' genome && ln -s -f '/galaxy/server/database/objects/4/2/6/dataset_42684e0c-3e65-454e-afd5-c4c0b0620f03.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/e/e/d/dataset_eed3a790-a089-4f46-a350-108e88b04a2e.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/4/7/1/dataset_47123f3f-f950-422c-96de-200d622a5bc9.dat' input_r.fasta &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/3/a/f/dataset_3af3950c-4f73-4b6e-8edb-84ebe0efbf56.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 353, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 351, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 352, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "b0392d424d9ba52a", "src": "hda", "uuid": "eed3a790-a089-4f46-a350-108e88b04a2e"}, "library|input_2": {"id": "c67fbffeac0bcd35", "src": "hda", "uuid": "47123f3f-f950-422c-96de-200d622a5bc9"}, "reference_genome|own_file": {"id": "ba50e821c6befa05", "src": "hda", "uuid": "42684e0c-3e65-454e-afd5-c4c0b0620f03"}}, "outputs": {"output": {"id": "d5cdac9cb8e4097a", "src": "hda", "uuid": "3af3950c-4f73-4b6e-8edb-84ebe0efbf56"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/2/6/dataset_42684e0c-3e65-454e-afd5-c4c0b0620f03.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 4 of 58\nGetting block 5 of 58\n  Reserving size (388) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\nGetting block 6 of 58\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Reserving size (388) for bucket 6\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 58\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 20%\n  Reserving size (388) for bucket 7\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 7: 10%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 5: 30%\n  bucket 3: 70%\n  bucket 7: 20%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 6: 40%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 1: 100%\n  bucket 5: 40%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 6: 60%\n  bucket 2: 80%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 7: 40%\n  bucket 2: 90%\n  bucket 6: 70%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 4: 80%\n  bucket 6: 100%\n  bucket 7: 60%\n  bucket 5: 80%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\nGetting block 9 of 58\n  bucket 8: 60%\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  bucket 8: 70%\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 80%\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 8: 90%\n  bucket 9: 40%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\nGetting block 13 of 58\n  Calculating Z arrays for bucket 12\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 13: 50%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 60%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\nGetting block 15 of 58\n  Calculating Z arrays for bucket 14\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\nGetting block 17 of 58\n  Calculating Z arrays for bucket 16\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 16: 10%\n  bucket 17: 20%\n  bucket 16: 20%\n  bucket 17: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 40%\n  bucket 17: 60%\n  bucket 16: 50%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  bucket 18: 10%\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  bucket 19: 90%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  Sorting block time: 00:00:00\n  bucket 22: 90%\nReturning block of 211 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\nGetting block 24 of 58\n  Calculating Z arrays for bucket 23\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 23:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 58\n  bucket 25: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 58\n  bucket 27: 10%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 27: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 58\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 31: 60%\n  bucket 30: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\nucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 57\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 30%\n  bucket 32: 70%\n  bucket 33: 40%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 50%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 60%\n  Sorting block time: 00:00:00\n  bucket 33: 70%\nReturning block of 220 for bucket 32\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 57\n  bucket 34: 10%\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  Sorting block time: 00:00:00\n  bucket 35: 90%\nReturning block of 276 for bucket 34\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\nGetting block 38 of 57\n  bucket 37: 30%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 38: 10%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 38: 20%\n  bucket 37: 80%\n  bucket 38: 30%\n  bucket 37: 90%\n  bucket 38: 40%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 57\n  bucket 41: 20%\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 42: 10%\n  bucket 41: 50%\n  bucket 42: 20%\n  bucket 41: 60%\n  bucket 42: 30%\n  bucket 41: 70%\n  bucket 42: 40%\n  bucket 41: 80%\n  bucket 42: 50%\n  bucket 41: 90%\n  bucket 42: 60%\n  bucket 41: 100%\n  bucket 42: 70%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 43: 40%\n  bucket 44: 60%\n  bucket 43: 50%\n  bucket 44: 70%\n  bucket 43: 60%\n  bucket 44: 80%\n  bucket 43: 70%\n  bucket 44: 90%\n  bucket 43: 80%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\nGetting block 47 of 57\n  Reserving size (388) for bucket 46\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 46\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 46: 40%\n  bucket 47: 50%\n  bucket 46: 50%\n  bucket 47: 60%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 47: 70%\n  bucket 46: 80%\n  bucket 47: 80%\n  bucket 46: 90%\n  bucket 47: 90%\n  bucket 46: 100%\n  bucket 47: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\nGetting block 49 of 57\n  Calculating Z arrays for bucket 48\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  bucket 49: 10%\n  bucket 48: 10%\n  bucket 49: 20%\n  bucket 48: 20%\n  bucket 49: 30%\n  bucket 48: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 48: 40%\n  bucket 49: 60%\n  bucket 48: 50%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 60%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 57\n  Entering block accumulator loop for bucket 50:\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 51: 60%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\nGetting block 54 of 57\n  bucket 53: 10%\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  bucket 54: 90%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\nGetting block 56 of 57\n  Calculating Z arrays for bucket 55\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 55: 80%\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 56: 80%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/2/6/dataset_42684e0c-3e65-454e-afd5-c4c0b0620f03.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 4 of 58\nGetting block 5 of 58\n  Reserving size (388) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\nGetting block 6 of 58\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Reserving size (388) for bucket 6\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 58\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 20%\n  Reserving size (388) for bucket 7\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 7: 10%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 5: 30%\n  bucket 3: 70%\n  bucket 7: 20%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 6: 40%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 1: 100%\n  bucket 5: 40%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 6: 60%\n  bucket 2: 80%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 7: 40%\n  bucket 2: 90%\n  bucket 6: 70%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 4: 80%\n  bucket 6: 100%\n  bucket 7: 60%\n  bucket 5: 80%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\nGetting block 9 of 58\n  bucket 8: 60%\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  bucket 8: 70%\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 80%\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 8: 90%\n  bucket 9: 40%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\nGetting block 13 of 58\n  Calculating Z arrays for bucket 12\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 13: 50%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 60%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\nGetting block 15 of 58\n  Calculating Z arrays for bucket 14\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\nGetting block 17 of 58\n  Calculating Z arrays for bucket 16\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 16: 10%\n  bucket 17: 20%\n  bucket 16: 20%\n  bucket 17: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 40%\n  bucket 17: 60%\n  bucket 16: 50%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  bucket 18: 10%\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  bucket 19: 90%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  Sorting block time: 00:00:00\n  bucket 22: 90%\nReturning block of 211 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\nGetting block 24 of 58\n  Calculating Z arrays for bucket 23\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 23:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 58\n  bucket 25: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 58\n  bucket 27: 10%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 27: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 58\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 31: 60%\n  bucket 30: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\nucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 57\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 30%\n  bucket 32: 70%\n  bucket 33: 40%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 50%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 60%\n  Sorting block time: 00:00:00\n  bucket 33: 70%\nReturning block of 220 for bucket 32\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 57\n  bucket 34: 10%\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  Sorting block time: 00:00:00\n  bucket 35: 90%\nReturning block of 276 for bucket 34\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\nGetting block 38 of 57\n  bucket 37: 30%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 38: 10%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 38: 20%\n  bucket 37: 80%\n  bucket 38: 30%\n  bucket 37: 90%\n  bucket 38: 40%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 57\n  bucket 41: 20%\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 42: 10%\n  bucket 41: 50%\n  bucket 42: 20%\n  bucket 41: 60%\n  bucket 42: 30%\n  bucket 41: 70%\n  bucket 42: 40%\n  bucket 41: 80%\n  bucket 42: 50%\n  bucket 41: 90%\n  bucket 42: 60%\n  bucket 41: 100%\n  bucket 42: 70%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 43: 40%\n  bucket 44: 60%\n  bucket 43: 50%\n  bucket 44: 70%\n  bucket 43: 60%\n  bucket 44: 80%\n  bucket 43: 70%\n  bucket 44: 90%\n  bucket 43: 80%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\nGetting block 47 of 57\n  Reserving size (388) for bucket 46\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 46\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 46: 40%\n  bucket 47: 50%\n  bucket 46: 50%\n  bucket 47: 60%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 47: 70%\n  bucket 46: 80%\n  bucket 47: 80%\n  bucket 46: 90%\n  bucket 47: 90%\n  bucket 46: 100%\n  bucket 47: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\nGetting block 49 of 57\n  Calculating Z arrays for bucket 48\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  bucket 49: 10%\n  bucket 48: 10%\n  bucket 49: 20%\n  bucket 48: 20%\n  bucket 49: 30%\n  bucket 48: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 48: 40%\n  bucket 49: 60%\n  bucket 48: 50%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 60%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 57\n  Entering block accumulator loop for bucket 50:\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 51: 60%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\nGetting block 54 of 57\n  bucket 53: 10%\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  bucket 54: 90%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\nGetting block 56 of 57\n  Calculating Z arrays for bucket 55\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 55: 80%\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 56: 80%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:10:28", "plugin": "core", "name": "end_epoch", "raw_value": "1754230228.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:10:27", "plugin": "core", "name": "start_epoch", "raw_value": "1754230227.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-8", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 8, "time_seconds": 39.33107662200928, "inputs": {"library|input_1": {"src": "hda", "id": "92c29ee235eab57e"}, "library|input_2": {"src": "hda", "id": "a7faf88b664134e2"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "352d87256fae1c8f"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "beeee6091d6fe51a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:11:05.038358", "update_time": "2025-08-03T14:11:19.285842", "galaxy_version": "24.1", "external_id": "gxy-vfdcr", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/e/7/b/dataset_e7bf1df7-261d-4258-932f-6121bfbfeea0.dat' genome && ln -s -f '/galaxy/server/database/objects/e/7/b/dataset_e7bf1df7-261d-4258-932f-6121bfbfeea0.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/7/9/dataset_f790fe62-e5f2-4a8c-8eae-87aeaf8880a8.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/0/8/9/dataset_08989051-3b32-4655-80a8-6ed1bed83906.dat' input_r.fasta &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view --no-PG -b -o '/galaxy/server/database/objects/2/2/5/dataset_2253fcf9-20e4-4361-b982-c7efa123919f.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 0, \"no_unal\": false, \"omit_sec_seq\": false, \"reorder\": true, \"sam_no_qname_trunc\": false, \"sam_opt\": false, \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": false, \"xeq\": false}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 357, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 356, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "92c29ee235eab57e", "src": "hda", "uuid": "f790fe62-e5f2-4a8c-8eae-87aeaf8880a8"}, "library|input_2": {"id": "a7faf88b664134e2", "src": "hda", "uuid": "08989051-3b32-4655-80a8-6ed1bed83906"}, "reference_genome|own_file": {"id": "352d87256fae1c8f", "src": "hda", "uuid": "e7bf1df7-261d-4258-932f-6121bfbfeea0"}}, "outputs": {"output": {"id": "9423ecdfdda72d9c", "src": "hda", "uuid": "2253fcf9-20e4-4361-b982-c7efa123919f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/e/7/b/dataset_e7bf1df7-261d-4258-932f-6121bfbfeea0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\nGetting block 7 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Reserving size (388) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  bucket 6: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 1: 40%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 6: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 5: 50%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 7: 40%\n  bucket 3: 50%\n  bucket 6: 50%\n  bucket 1: 100%\n  bucket 5: 60%\n  bucket 4: 60%\n  bucket 2: 70%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 3: 60%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 2: 100%\n  bucket 3: 70%\n  Sorting block of length 165 for bucket 2\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 80%\n  bucket 6: 80%\n  bucket 4: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 6: 90%\n  bucket 3: 90%\nReturning block of 356 for bucket 1\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 7: 90%\n  bucket 3: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\nReturning block of 166 for bucket 2\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\nGetting block 9 of 58\n  bucket 8: 70%\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 80%\n  bucket 9: 10%\n  bucket 8: 90%\n  bucket 9: 20%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\nGetting block 11 of 58\n  bucket 10: 50%\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 11: 10%\n  bucket 10: 80%\n  bucket 11: 20%\n  bucket 10: 90%\n  bucket 11: 30%\n  bucket 10: 100%\n  bucket 11: 40%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 58\n  bucket 12: 40%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 13: 10%\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 12: 80%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 13: 60%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\n  bucket 14: 10%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 58\n  Entering block accumulator loop for bucket 16:\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  Calculating Z arrays for bucket 19\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 58\n  bucket 21: 10%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  bucket 26: 30%\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  bucket 27: 60%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 58\n  bucket 28: 20%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  bucket 29: 80%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\nGetting block 33 of 58\n  Reserving size (388) for bucket 32\n  Reserving size (388) for buc\n..\nucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 29: 20%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  bucket 29: 70%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 57\n  bucket 31: 10%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 31: 70%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 33: 20%\n  bucket 34: 30%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 33: 50%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 33: 70%\n  bucket 34: 90%\n  bucket 33: 80%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 40%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  bucket 36: 50%\n  bucket 36: 60%\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\nGetting block 38 of 57\n  Calculating Z arrays for bucket 37\n  Reserving size (388) for bucket 38\nGetting block 39 of 57\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 39: 80%\n  bucket 37: 100%\n  bucket 38: 90%\n  bucket 39: 90%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  bucket 39: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 30%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 40%\n  bucket 41: 10%\n  bucket 40: 50%\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 41: 60%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  Sorting block time: 00:00:00\n  bucket 41: 100%\nReturning block of 380 for bucket 40\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\nGetting block 43 of 57\n  Calculating Z arrays for bucket 42\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 57\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 42: 40%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 42: 50%\n  bucket 43: 50%\n  bucket 42: 60%\n  bucket 44: 50%\n  bucket 42: 70%\n  bucket 44: 60%\n  bucket 43: 60%\n  bucket 42: 80%\n  bucket 44: 70%\n  bucket 43: 70%\n  bucket 42: 90%\n  bucket 44: 80%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 44: 90%\n  bucket 43: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 45: 40%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 46: 50%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 60%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 70%\n  bucket 48: 10%\n  bucket 47: 80%\n  bucket 48: 20%\n  bucket 47: 90%\n  bucket 47: 100%\n  bucket 48: 30%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 40%\n  bucket 48: 50%\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\nGetting block 50 of 57\n  bucket 49: 20%\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 30%\n  bucket 50: 10%\n  bucket 49: 40%\n  bucket 50: 20%\n  bucket 49: 50%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 80%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\nGetting block 54 of 57\n  bucket 53: 20%\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 54: 20%\n  bucket 53: 60%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 53: 80%\n  bucket 54: 50%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 40%\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 56: 50%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/e/7/b/dataset_e7bf1df7-261d-4258-932f-6121bfbfeea0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\nGetting block 7 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Reserving size (388) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  bucket 6: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 1: 40%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 6: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 5: 50%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 7: 40%\n  bucket 3: 50%\n  bucket 6: 50%\n  bucket 1: 100%\n  bucket 5: 60%\n  bucket 4: 60%\n  bucket 2: 70%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 3: 60%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 2: 100%\n  bucket 3: 70%\n  Sorting block of length 165 for bucket 2\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 80%\n  bucket 6: 80%\n  bucket 4: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 6: 90%\n  bucket 3: 90%\nReturning block of 356 for bucket 1\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 7: 90%\n  bucket 3: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\nReturning block of 166 for bucket 2\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\nGetting block 9 of 58\n  bucket 8: 70%\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 80%\n  bucket 9: 10%\n  bucket 8: 90%\n  bucket 9: 20%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\nGetting block 11 of 58\n  bucket 10: 50%\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 11: 10%\n  bucket 10: 80%\n  bucket 11: 20%\n  bucket 10: 90%\n  bucket 11: 30%\n  bucket 10: 100%\n  bucket 11: 40%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 58\n  bucket 12: 40%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 13: 10%\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 12: 80%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 13: 60%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\n  bucket 14: 10%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 15: 60%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 58\n  Entering block accumulator loop for bucket 16:\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  Calculating Z arrays for bucket 19\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 58\n  bucket 21: 10%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  bucket 26: 30%\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  bucket 27: 60%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 58\n  bucket 28: 20%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  bucket 29: 80%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\nGetting block 33 of 58\n  Reserving size (388) for bucket 32\n  Reserving size (388) for buc\n..\nucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 29: 20%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  bucket 29: 70%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 57\n  bucket 31: 10%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 31: 70%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 33: 20%\n  bucket 34: 30%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 33: 50%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 33: 70%\n  bucket 34: 90%\n  bucket 33: 80%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 40%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  bucket 36: 50%\n  bucket 36: 60%\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\nGetting block 38 of 57\n  Calculating Z arrays for bucket 37\n  Reserving size (388) for bucket 38\nGetting block 39 of 57\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 39: 80%\n  bucket 37: 100%\n  bucket 38: 90%\n  bucket 39: 90%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  bucket 39: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 30%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 40%\n  bucket 41: 10%\n  bucket 40: 50%\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 41: 60%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  Sorting block time: 00:00:00\n  bucket 41: 100%\nReturning block of 380 for bucket 40\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\nGetting block 43 of 57\n  Calculating Z arrays for bucket 42\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 57\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 42: 40%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 42: 50%\n  bucket 43: 50%\n  bucket 42: 60%\n  bucket 44: 50%\n  bucket 42: 70%\n  bucket 44: 60%\n  bucket 43: 60%\n  bucket 42: 80%\n  bucket 44: 70%\n  bucket 43: 70%\n  bucket 42: 90%\n  bucket 44: 80%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 44: 90%\n  bucket 43: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 45: 40%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 46: 50%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 60%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 70%\n  bucket 48: 10%\n  bucket 47: 80%\n  bucket 48: 20%\n  bucket 47: 90%\n  bucket 47: 100%\n  bucket 48: 30%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 40%\n  bucket 48: 50%\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\nGetting block 50 of 57\n  bucket 49: 20%\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 30%\n  bucket 50: 10%\n  bucket 49: 40%\n  bucket 50: 20%\n  bucket 49: 50%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 80%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\nGetting block 54 of 57\n  bucket 53: 20%\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 54: 20%\n  bucket 53: 60%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 53: 80%\n  bucket 54: 50%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 40%\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 56: 50%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 14:11:07", "plugin": "core", "name": "end_epoch", "raw_value": "1754230267.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:11:07", "plugin": "core", "name": "start_epoch", "raw_value": "1754230267.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.5.3+galaxy1-9", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1", "test_index": 9, "time_seconds": 39.32490086555481, "inputs": {"library|input_1": {"src": "hda", "id": "6b6a6af4d1c0531e"}, "library|input_2": {"src": "hda", "id": "fe1e917cb8209d41"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "fba65a37e794c4ea"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "7457ec34a955af14", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.5.3+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:11:44.874111", "update_time": "2025-08-03T14:11:58.572673", "galaxy_version": "24.1", "external_id": "gxy-z59tp", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/8/0/dataset_380a5d99-6799-43e1-81f2-16bb68d9bae5.dat' genome && ln -s -f '/galaxy/server/database/objects/3/8/0/dataset_380a5d99-6799-43e1-81f2-16bb68d9bae5.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/0/f/5/dataset_0f540ff4-75c5-4f97-873d-bf71834274ba.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/c/5/1/dataset_c51d0f7c-a234-4b01-a083-5d7c4e9ad52b.dat' input_r.fasta &&   THREADS=${GALAXY_SLOTS:-4} && if [ \"$THREADS\" -gt 1 ]; then (( THREADS-- )); fi &&   bowtie2  -p \"$THREADS\"  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/2/b/d/dataset_2bdd2543-68f0-4cc3-b388-7e337a816c71.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.5.3\n64-bit\nBuilt on fv-az365-785\nWed Jan 17 04:43:48 UTC 2024\nCompiler: gcc version 12.3.0 (conda-forge gcc 12.3.0-3) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1705465427853/work=/usr/local/src/conda/bowtie2-2.5.3 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -std=c++11 -Wall -Wno-unused-but-set-variable -DPOPCNT_CAPABILITY -DNO_SPINLOCK -DWITH_QUEUELOCK=1 -DWITH_ZSTD\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 0, \"no_unal\": false, \"omit_sec_seq\": false, \"reorder\": false, \"sam_no_qname_trunc\": false, \"sam_opt\": true, \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": false, \"xeq\": false}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 361, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 359, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 360, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "6b6a6af4d1c0531e", "src": "hda", "uuid": "0f540ff4-75c5-4f97-873d-bf71834274ba"}, "library|input_2": {"id": "fe1e917cb8209d41", "src": "hda", "uuid": "c51d0f7c-a234-4b01-a083-5d7c4e9ad52b"}, "reference_genome|own_file": {"id": "fba65a37e794c4ea", "src": "hda", "uuid": "380a5d99-6799-43e1-81f2-16bb68d9bae5"}}, "outputs": {"output": {"id": "cf814699a6abc903", "src": "hda", "uuid": "2bdd2543-68f0-4cc3-b388-7e337a816c71"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/0/dataset_380a5d99-6799-43e1-81f2-16bb68d9bae5.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 4 of 58\nGetting block 5 of 58\n  Reserving size (388) for bucket 3\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 7: 10%\n  bucket 5: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 6: 20%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 5: 40%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 5: 50%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 1: 100%\n  bucket 5: 60%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 7: 80%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 4: 80%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 4: 90%\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 7: 100%\n  bucket 2: 100%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 40%\nGetting block 10 of 58\n  bucket 9: 10%\n  bucket 8: 50%\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 8: 60%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 8: 70%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 8: 80%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 8: 90%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\nGetting block 12 of 58\n  Calculating Z arrays for bucket 11\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 58\n  Entering block accumulator loop for bucket 13:\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 58\n  Entering block accumulator loop for bucket 15:\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\nGetting block 19 of 58\n  Reserving size (388) for bucket 18\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 19\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 18:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 20%\n  bucket 20: 50%\n  bucket 18: 20%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 19: 60%\n  Sorting block time: 00:00:00\n  bucket 18: 60%\nReturning block of 314 for bucket 20\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 58\n  Entering block accumulator loop for bucket 22:\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  bucket 23: 90%\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 58\n  Entering block accumulator loop for bucket 25:\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 58\n  bucket 27: 20%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 58\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 31: 60%\n  bucket 30: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 70%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 80%\n  bucket 25: 10%\n  bucket 24: 90%\n  bucket 25: 20%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 57\n  Entering block accumulator loop for bucket 27:\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\nGetting block 30 of 57\n  Calculating Z arrays for bucket 29\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 40%\n  bucket 34: 10%\n  bucket 33: 50%\n  bucket 34: 20%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 30%\n  bucket 33: 80%\n  bucket 34: 40%\n  bucket 33: 90%\n  bucket 34: 50%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 57\n  bucket 35: 20%\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 36: 10%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 35: 50%\n  bucket 36: 30%\n  bucket 35: 60%\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 36: 50%\n  bucket 35: 80%\n  bucket 36: 60%\n  bucket 35: 90%\n  bucket 35: 100%\n  bucket 36: 70%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 38: 10%\n  bucket 37: 40%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 38: 80%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  bucket 40: 90%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 57\n  Entering block accumulator loop for bucket 41:\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 41: 60%\n  bucket 42: 80%\n  bucket 41: 70%\n  bucket 42: 90%\n  bucket 41: 80%\n  bucket 42: 100%\n  bucket 41: 90%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 45: 70%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\nGetting block 47 of 57\n  Calculating Z arrays for bucket 46\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 47: 50%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 47: 60%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 57\n  Entering block accumulator loop for bucket 49:\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 50: 20%\n  bucket 49: 50%\n  bucket 50: 30%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 49: 80%\n  bucket 50: 50%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 60%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\n  bucket 50: 90%\nReturning block of 113 for bucket 49\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\nGetting block 52 of 57\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  bucket 52: 90%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 53: 40%\n  bucket 54: 60%\n  bucket 53: 50%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 53: 70%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 55: 80%\n  bucket 56: 80%\n  bucket 55: 90%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/0/dataset_380a5d99-6799-43e1-81f2-16bb68d9bae5.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 4 of 58\nGetting block 5 of 58\n  Reserving size (388) for bucket 3\nGetting block 6 of 58\nGetting block 7 of 58\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 7: 10%\n  bucket 5: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 6: 20%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 5: 40%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 5: 50%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 1: 100%\n  bucket 5: 60%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 7: 80%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 4: 80%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 4: 90%\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 7: 100%\n  bucket 2: 100%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\nGetting block 8 of 58\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 40%\nGetting block 10 of 58\n  bucket 9: 10%\n  bucket 8: 50%\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 8: 60%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 8: 70%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 8: 80%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 8: 90%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\nGetting block 12 of 58\n  Calculating Z arrays for bucket 11\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 58\n  Entering block accumulator loop for bucket 13:\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 58\n  Entering block accumulator loop for bucket 15:\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\nGetting block 19 of 58\n  Reserving size (388) for bucket 18\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 19\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 18:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 20%\n  bucket 20: 50%\n  bucket 18: 20%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 19: 60%\n  Sorting block time: 00:00:00\n  bucket 18: 60%\nReturning block of 314 for bucket 20\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 58\n  Entering block accumulator loop for bucket 22:\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  bucket 23: 90%\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 58\n  Entering block accumulator loop for bucket 25:\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 58\n  bucket 27: 20%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 58\n  Entering block accumulator loop for bucket 30:\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 31: 60%\n  bucket 30: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\n0:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 70%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 80%\n  bucket 25: 10%\n  bucket 24: 90%\n  bucket 25: 20%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 57\n  Entering block accumulator loop for bucket 27:\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\nGetting block 30 of 57\n  Calculating Z arrays for bucket 29\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 40%\n  bucket 34: 10%\n  bucket 33: 50%\n  bucket 34: 20%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 30%\n  bucket 33: 80%\n  bucket 34: 40%\n  bucket 33: 90%\n  bucket 34: 50%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 57\n  bucket 35: 20%\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 36: 10%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 35: 50%\n  bucket 36: 30%\n  bucket 35: 60%\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 36: 50%\n  bucket 35: 80%\n  bucket 36: 60%\n  bucket 35: 90%\n  bucket 35: 100%\n  bucket 36: 70%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 38: 10%\n  bucket 37: 40%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 38: 80%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  bucket 40: 90%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 57\n  Entering block accumulator loop for bucket 41:\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 41: 60%\n  bucket 42: 80%\n  bucket 41: 70%\n  bucket 42: 90%\n  bucket 41: 80%\n  bucket 42: 100%\n  bucket 41: 90%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 45: 70%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\nGetting block 47 of 57\n  Calculating Z arrays for bucket 46\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 47: 50%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 47: 60%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 57\n  Entering block accumulator loop for bucket 49:\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 50: 20%\n  bucket 49: 50%\n  bucket 50: 30%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 49: 80%\n  bucket 50: 50%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 60%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\n  bucket 50: 90%\nReturning block of 113 for bucket 49\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\nGetting block 52 of 57\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  bucket 52: 90%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 53: 40%\n  bucket 54: 60%\n  bucket 53: 50%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 53: 70%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 55: 80%\n  bucket 56: 80%\n  bucket 55: 90%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmp\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\nRenaming genome.3.bt2.tmp to genome.3.bt2\nRenaming genome.4.bt2.tmp to genome.4.bt2\nRenaming genome.1.bt2.tmp to genome.1.bt2\nRenaming genome.2.bt2.tmp to genome.2.bt2\nRenaming genome.rev.1.bt2.tmp to genome.rev.1.bt2\nRenaming genome.rev.2.bt2.tmp to genome.rev.2.bt2\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:11:47", "plugin": "core", "name": "end_epoch", "raw_value": "1754230307.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:11:46", "plugin": "core", "name": "start_epoch", "raw_value": "1754230306.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-0", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 0, "time_seconds": 32.770071506500244, "inputs": {"library|input_1": {"src": "hda", "id": "6f672dcb3dc16397"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single"}, "job": {"model_class": "Job", "id": "8603624aa2a2e915", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:26:22.866050", "update_time": "2025-08-03T13:26:35.524479", "galaxy_version": "24.1", "external_id": "gxy-n972z", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/0/f/e/dataset_0fed3dd5-b13d-4dee-b895-f7fe8678b3a2.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 82, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "6f672dcb3dc16397", "src": "hda", "uuid": "0fed3dd5-b13d-4dee-b895-f7fe8678b3a2"}}, "outputs": {"out1": {"id": "8603624aa2a2e915", "src": "hda", "uuid": "4e4e554b-5e2d-46ac-8966-4da825313141"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.050 s (16515.334 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.050 s (16515.334 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "cutadapt/4.9+galaxy1-1", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 1, "time_seconds": 33.226245403289795, "inputs": {"library|input_1": {"src": "hda", "id": "efe1a2544abf40c3"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single"}, "job": {"model_class": "Job", "id": "43b4d83d5b056e98", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:26:54.753124", "update_time": "2025-08-03T13:27:08.513635", "galaxy_version": "24.1", "external_id": "gxy-jqdmj", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/5/c/2/dataset_5c269c38-67f2-488e-b2c5-8ddbf07829e0.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz'  'bwa-mem-fastq1_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 84, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "efe1a2544abf40c3", "src": "hda", "uuid": "5c269c38-67f2-488e-b2c5-8ddbf07829e0"}}, "outputs": {"out1": {"id": "43b4d83d5b056e98", "src": "hda", "uuid": "bc6252ff-7961-4a51-b326-e5b98f702aba"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.100 s (1015.063 \u00b5s/read; 0.06 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         2 (2.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nTotal written (filtered):         24,843 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.100 s (1015.063 \u00b5s/read; 0.06 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         2 (2.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nTotal written (filtered):         24,843 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:26:57", "plugin": "core", "name": "end_epoch", "raw_value": "1754227617.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:26:56", "plugin": "core", "name": "start_epoch", "raw_value": "1754227616.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-10", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 10, "time_seconds": 32.84704279899597, "inputs": {"library|input_1": {"src": "hda", "id": "89e2b11ebbc3c00b"}, "library|r1|front_adapters_0|adapter_source|adapter_name": "A1", "library|r1|front_adapters_0|adapter_source|adapter": "^GTCGGTAA", "library|r1|front_adapters_0|adapter_source|adapter_source_list": "user", "library|r1|front_adapters_1|adapter_source|adapter_name": "A2", "library|r1|front_adapters_1|adapter_source|adapter": "^AGGTCACT", "library|r1|front_adapters_1|adapter_source|adapter_source_list": "user", "library|type": "single", "output_selector": "multiple_output"}, "job": {"model_class": "Job", "id": "b0a8fce3d941d564", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:31:16.662695", "update_time": "2025-08-03T13:31:29.578336", "galaxy_version": "24.1", "external_id": "gxy-h5ghd", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/c/e/3/dataset_ce30c874-0dda-49e9-bf18-6c0abea5bd94.dat' 'cutadapt_in_split_fastq.fq' && mkdir split &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -g 'A1'='^GTCGGTAA'   -g 'A2'='^AGGTCACT'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'split/{name}.fastq'  'cutadapt_in_split_fastq.fq'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"multiple_output\"", "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 110, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"front_adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"^GTCGGTAA\", \"adapter_name\": \"A1\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}, {\"__index__\": 1, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"^AGGTCACT\", \"adapter_name\": \"A2\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}]}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "89e2b11ebbc3c00b", "src": "hda", "uuid": "ce30c874-0dda-49e9-bf18-6c0abea5bd94"}}, "outputs": {"__new_primary_file_split_output|A1__": {"id": "94ed03ea504ec0ca", "src": "hda", "uuid": "fff8ec2e-d704-45bd-b5ce-4c289294987e"}, "__new_primary_file_split_output|A2__": {"id": "d26d04782b84ed51", "src": "hda", "uuid": "53850ae7-4e22-46e0-baaf-c1d3e8f63775"}, "__new_primary_file_split_output|unknown__": {"id": "09e6948367541fd0", "src": "hda", "uuid": "d944ed06-4e23-410d-b037-3246f4b8ea0d"}}, "copied_from_job_id": null, "output_collections": {"split_output": {"src": "hdca", "id": "8d7b01394d3438f0"}}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.089 s (8068.605 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads discarded as untrimmed:                0 (0.0%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.089 s (8068.605 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads discarded as untrimmed:                0 (0.0%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:31:18", "plugin": "core", "name": "end_epoch", "raw_value": "1754227878.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:31:18", "plugin": "core", "name": "start_epoch", "raw_value": "1754227878.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-11", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 11, "time_seconds": 25.888240814208984, "inputs": {"library|input_1": {"src": "hda", "id": "97634c290bf09a2a"}, "library|r1|front_adapters_0|adapter_source|adapter_file": {"src": "hda", "id": "6aabc5d1d2c22d82"}, "library|r1|front_adapters_0|adapter_source|adapter_source_list": "file", "library|type": "single", "output_selector": "multiple_output"}, "job": {"model_class": "Job", "id": "ade45e1b6769beb6", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:31:50.204864", "update_time": "2025-08-03T13:31:55.985424", "galaxy_version": "24.1", "external_id": "gxy-5fttj", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/2/5/e/dataset_25e4b164-bc4e-4f73-825a-f1ab5bbfbd68.dat' 'cutadapt_in_split_fastq_gz.fq.gz' && mkdir split &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -g file:'/galaxy/server/database/objects/5/e/b/dataset_5eb2c422-8454-49d2-8794-7551fa3dbb3a.dat'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'split/{name}.fastq.gz'  'cutadapt_in_split_fastq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"multiple_output\"", "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 114, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"front_adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 2, \"adapter_file\": {\"values\": [{\"id\": 115, \"src\": \"hda\"}]}, \"adapter_source_list\": \"file\"}, \"single_noindels\": false}]}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "97634c290bf09a2a", "src": "hda", "uuid": "25e4b164-bc4e-4f73-825a-f1ab5bbfbd68"}, "library|r1|front_adapters_0|adapter_source|adapter_file": {"id": "6aabc5d1d2c22d82", "src": "hda", "uuid": "5eb2c422-8454-49d2-8794-7551fa3dbb3a"}}, "outputs": {}, "copied_from_job_id": null, "output_collections": {"split_output": {"src": "hdca", "id": "fd2eaf0dcd112521"}}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -g file:/galaxy/server/database/objects/5/e/b/dataset_5eb2c422-8454-49d2-8794-7551fa3dbb3a.dat --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq.gz cutadapt_in_split_fastq_gz.fq.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.247 s (22435.253 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads discarded as untrimmed:                0 (0.0%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -g file:/galaxy/server/database/objects/5/e/b/dataset_5eb2c422-8454-49d2-8794-7551fa3dbb3a.dat --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq.gz cutadapt_in_split_fastq_gz.fq.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.247 s (22435.253 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads discarded as untrimmed:                0 (0.0%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .", "Output collection 'split_output': expected to have 3 elements, but it had 0."], "status": "failure"}}, {"id": "cutadapt/4.9+galaxy1-12", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 12, "time_seconds": 33.71328949928284, "inputs": {"library|input_1": {"src": "hda", "id": "6b50b6cbeb7024f7"}, "library|r1|adapters_0|adapter_source|adapter": "AAAT", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "output_selector": "untrimmed_file"}, "job": {"model_class": "Job", "id": "175bcf8c62cecf96", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:32:14.920180", "update_time": "2025-08-03T13:32:29.066230", "galaxy_version": "24.1", "external_id": "gxy-2svb5", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/b/3/0/dataset_b30519ad-0057-48db-a4d7-1eeb5b0f2d1a.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AAAT'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      --untrimmed-output='untrimmed_output.fq' -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"untrimmed_file\"", "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 116, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AAAT\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "6b50b6cbeb7024f7", "src": "hda", "uuid": "b30519ad-0057-48db-a4d7-1eeb5b0f2d1a"}}, "outputs": {"out1": {"id": "1649637368d3c987", "src": "hda", "uuid": "1e59061c-36cf-4774-9985-0cd9a148bda9"}, "untrimmed_output": {"id": "1940e8faeb360282", "src": "hda", "uuid": "a10befd7-1af6-481d-a68a-2c3cc76d920f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.052 s (17286.142 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             30 bp (29.4%)\n\n=== Adapter 1 ===\n\nSequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-4 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n4\t1\t0.0\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.052 s (17286.142 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             30 bp (29.4%)\n\n=== Adapter 1 ===\n\nSequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-4 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n4\t1\t0.0\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:32:17", "plugin": "core", "name": "end_epoch", "raw_value": "1754227937.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:32:16", "plugin": "core", "name": "start_epoch", "raw_value": "1754227936.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-13", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 13, "time_seconds": 10.936511754989624, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "cutadapt/4.9+galaxy1-14", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 14, "time_seconds": 34.428141593933105, "inputs": {"library|input_1": {"src": "hda", "id": "5ac9c0518ea12277"}, "library|input_2": {"src": "hda", "id": "e33d56bafb1cdd46"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "filter_options|discard_untrimmed": true, "filter_options|minimum_length": "1", "filter_options|maximum_length": "1000", "filter_options|max_n": "0", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "09e6948367541fd0", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:33:01.530120", "update_time": "2025-08-03T13:33:15.303603", "galaxy_version": "24.1", "external_id": "gxy-xj8wp", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/e/5/b/dataset_e5bbb410-b411-4a46-87ce-83763da31b8e.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/1/0/c/dataset_10c1c3dd-283d-4d2c-accc-c763e74948e9.dat' 'bwa-mem-fastq2_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'     --error-rate=0.1 --times=1 --overlap=3    --action=trim       --discard-untrimmed  --minimum-length=1 --maximum-length=1000 --max-n=0.0  --pair-filter=both     -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_fq_gz.fq.gz' 'bwa-mem-fastq2_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": true, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"0.0\", \"maximum_length\": \"1000\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"both\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 120, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 121, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "5ac9c0518ea12277", "src": "hda", "uuid": "e5bbb410-b411-4a46-87ce-83763da31b8e"}, "library|input_2": {"id": "e33d56bafb1cdd46", "src": "hda", "uuid": "10c1c3dd-283d-4d2c-accc-c763e74948e9"}}, "outputs": {"out1": {"id": "cc12b2cb7694280a", "src": "hda", "uuid": "2bb996ff-f6d5-48d3-9198-40aae5b6a5b9"}, "out2": {"id": "ebe6064652340614", "src": "hda", "uuid": "4fe47715-27ea-46b5-a333-73fd9e177d2a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.163 s (1650.659 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                    0 (0.0%)\nPairs with too many N:                       0 (0.0%)\nPairs written (passing filters):             2 (2.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):            998 bp (2.0%)\n  Read 1:           496 bp\n  Read 2:           502 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.163 s (1650.659 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                    0 (0.0%)\nPairs with too many N:                       0 (0.0%)\nPairs written (passing filters):             2 (2.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):            998 bp (2.0%)\n  Read 1:           496 bp\n  Read 2:           502 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:33:03", "plugin": "core", "name": "end_epoch", "raw_value": "1754227983.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:33:03", "plugin": "core", "name": "start_epoch", "raw_value": "1754227983.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-15", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 15, "time_seconds": 30.64546012878418, "inputs": {"library|input_1": {"src": "hda", "id": "745ae6b4275c5300"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "other_trimming_options|cut": "5"}, "job": {"model_class": "Job", "id": "6aabc5d1d2c22d82", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:33:33.844078", "update_time": "2025-08-03T13:33:45.771121", "galaxy_version": "24.1", "external_id": "gxy-t79rf", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/3/c/2/dataset_3c2c2237-84dd-4784-920a-970ce5f18965.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim   --cut=5       --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"5\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 124, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "745ae6b4275c5300", "src": "hda", "uuid": "3c2c2237-84dd-4784-920a-970ce5f18965"}}, "outputs": {"out1": {"id": "0b42abd1e05e48b2", "src": "hda", "uuid": "504dbd17-badf-4d4d-8877-880c5983983f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (14319.897 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (14319.897 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:33:36", "plugin": "core", "name": "end_epoch", "raw_value": "1754228016.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:33:35", "plugin": "core", "name": "start_epoch", "raw_value": "1754228015.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-16", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 16, "time_seconds": 32.850637674331665, "inputs": {"library|input_1": {"src": "hda", "id": "c9ec4801efb542fe"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "other_trimming_options|cut": "5", "read_mod_options|rename": "{id} barcode={cut_prefix}"}, "job": {"model_class": "Job", "id": "1649637368d3c987", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:34:05.490457", "update_time": "2025-08-03T13:34:18.481430", "galaxy_version": "24.1", "external_id": "gxy-fznn9", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/a/4/7/dataset_a47fc91b-8ba4-44ea-bc3b-8de1f793c522.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim   --cut=5       --minimum-length=1    --rename='{id} barcode={cut_prefix}'   -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": \"{id} barcode={cut_prefix}\", \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"5\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 126, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "c9ec4801efb542fe", "src": "hda", "uuid": "a47fc91b-8ba4-44ea-bc3b-8de1f793c522"}}, "outputs": {"out1": {"id": "66260a2e34733ce2", "src": "hda", "uuid": "f4287527-c194-4ae0-8069-dfa0116410a4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.040 s (13441.960 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.040 s (13441.960 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:34:07", "plugin": "core", "name": "end_epoch", "raw_value": "1754228047.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:34:06", "plugin": "core", "name": "start_epoch", "raw_value": "1754228046.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-17", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 17, "time_seconds": 33.297152519226074, "inputs": {"library|input_1": {"src": "hda", "id": "af5a0a11efc52e71"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "retain"}, "job": {"model_class": "Job", "id": "90fe1242ed19aba6", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:34:38.120465", "update_time": "2025-08-03T13:34:52.039767", "galaxy_version": "24.1", "external_id": "gxy-fcnbw", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/7/2/6/dataset_72638e21-eb51-47b8-8d66-ac0dc2a7f919.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'CGTCCGAANTAG'    --error-rate=0.1 --times=1 --overlap=3    --action=retain         --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"retain\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 128, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "af5a0a11efc52e71", "src": "hda", "uuid": "72638e21-eb51-47b8-8d66-ac0dc2a7f919"}}, "outputs": {"out1": {"id": "491b03a840d54215", "src": "hda", "uuid": "ba051ae3-b008-4172-b3c4-006b55183892"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (14418.920 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (14418.920 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:34:40", "plugin": "core", "name": "end_epoch", "raw_value": "1754228080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:34:40", "plugin": "core", "name": "start_epoch", "raw_value": "1754228080.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-18", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 18, "time_seconds": 32.331939697265625, "inputs": {"library|input_1": {"src": "hda", "id": "656491bda04f8a0a"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "mask"}, "job": {"model_class": "Job", "id": "e33d56bafb1cdd46", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:35:10.535389", "update_time": "2025-08-03T13:35:24.461144", "galaxy_version": "24.1", "external_id": "gxy-2bzz4", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/6/c/f/dataset_6cf7047c-658e-4371-89aa-58fc99e766e3.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'CGTCCGAANTAG'    --error-rate=0.1 --times=1 --overlap=3    --action=mask         --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"mask\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "656491bda04f8a0a", "src": "hda", "uuid": "6cf7047c-658e-4371-89aa-58fc99e766e3"}}, "outputs": {"out1": {"id": "fb508a254b7feb3f", "src": "hda", "uuid": "e856e124-af3f-4c66-8433-a154da9c760c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.042 s (13982.852 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.042 s (13982.852 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:35:13", "plugin": "core", "name": "end_epoch", "raw_value": "1754228113.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:35:12", "plugin": "core", "name": "start_epoch", "raw_value": "1754228112.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-19", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 19, "time_seconds": 31.126880407333374, "inputs": {"library|input_1": {"src": "hda", "id": "f2c581515170beb4"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "lowercase"}, "job": {"model_class": "Job", "id": "ebe6064652340614", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:35:44.099867", "update_time": "2025-08-03T13:35:55.715261", "galaxy_version": "24.1", "external_id": "gxy-wxb7d", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/a/1/6/dataset_a1614cad-ee2c-4337-b231-759c24517638.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'CGTCCGAANTAG'    --error-rate=0.1 --times=1 --overlap=3    --action=lowercase         --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"lowercase\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "f2c581515170beb4", "src": "hda", "uuid": "a1614cad-ee2c-4337-b231-759c24517638"}}, "outputs": {"out1": {"id": "9fd439af3c7c51c0", "src": "hda", "uuid": "2f162066-a868-4b63-90b1-8ed5e68749f7"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.040 s (13420.900 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.040 s (13420.900 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:35:45", "plugin": "core", "name": "end_epoch", "raw_value": "1754228145.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:35:45", "plugin": "core", "name": "start_epoch", "raw_value": "1754228145.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-2", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 2, "time_seconds": 32.87625050544739, "inputs": {"library|input_1": {"src": "hda", "id": "4170bcf3faf9eef6"}, "library|input_2": {"src": "hda", "id": "30c7e2ffe0a56e27"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired"}, "job": {"model_class": "Job", "id": "a0d862a028377bc6", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:27:28.935169", "update_time": "2025-08-03T13:27:41.072078", "galaxy_version": "24.1", "external_id": "gxy-4b5gz", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/9/e/d/dataset_9ed92980-93fb-41cf-9788-1bcd3633cd15.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/2/a/6/dataset_2a69c11b-d058-45d7-a4d0-7d52aa318cf7.dat' 'bwa-mem-fastq2_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    -A 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_fq_gz.fq.gz' 'bwa-mem-fastq2_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 87, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "4170bcf3faf9eef6", "src": "hda", "uuid": "9ed92980-93fb-41cf-9788-1bcd3633cd15"}, "library|input_2": {"id": "30c7e2ffe0a56e27", "src": "hda", "uuid": "2a69c11b-d058-45d7-a4d0-7d52aa318cf7"}}, "outputs": {"out1": {"id": "a0d862a028377bc6", "src": "hda", "uuid": "0323a8dc-3f5b-45be-b537-415e99df14e2"}, "out2": {"id": "61aa88b4198a69c7", "src": "hda", "uuid": "2eb46a7d-4855-4bc8-b71a-ffbb3e557ebb"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.178 s (1802.649 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.178 s (1802.649 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:27:30", "plugin": "core", "name": "end_epoch", "raw_value": "1754227650.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:27:30", "plugin": "core", "name": "start_epoch", "raw_value": "1754227650.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-20", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 20, "time_seconds": 32.495781898498535, "inputs": {"library|input_1": {"src": "hda", "id": "976279366facd6f9"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "crop"}, "job": {"model_class": "Job", "id": "0b42abd1e05e48b2", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:36:15.244841", "update_time": "2025-08-03T13:36:28.203381", "galaxy_version": "24.1", "external_id": "gxy-gnqhb", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/7/c/5/dataset_7c5da895-a6d8-4ecb-ac7f-e211bc90d19f.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'CGTCCGAANTAG'    --error-rate=0.1 --times=1 --overlap=3    --action=crop         --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"crop\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "976279366facd6f9", "src": "hda", "uuid": "7c5da895-a6d8-4ecb-ac7f-e211bc90d19f"}}, "outputs": {"out1": {"id": "1c9a7f20a6b96912", "src": "hda", "uuid": "22ced1ba-0002-4c53-83a3-cf53d679d3ab"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.042 s (14145.215 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.042 s (14145.215 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:36:17", "plugin": "core", "name": "end_epoch", "raw_value": "1754228177.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:36:17", "plugin": "core", "name": "start_epoch", "raw_value": "1754228177.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-21", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 21, "time_seconds": 32.211023569107056, "inputs": {"library|input_1": {"src": "hda", "id": "2b679e0a70aa7475"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "none"}, "job": {"model_class": "Job", "id": "66260a2e34733ce2", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:36:46.926506", "update_time": "2025-08-03T13:37:00.509654", "galaxy_version": "24.1", "external_id": "gxy-tqn2n", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/9/b/b/dataset_9bb7eeec-f649-436c-a871-913ec42fa003.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'CGTCCGAANTAG'    --error-rate=0.1 --times=1 --overlap=3    --action=none         --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"none\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "2b679e0a70aa7475", "src": "hda", "uuid": "9bb7eeec-f649-436c-a871-913ec42fa003"}}, "outputs": {"out1": {"id": "5b831b7cfbaece61", "src": "hda", "uuid": "aff8712d-86ac-4a97-8d17-67840c5d619e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.044 s (14580.647 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.044 s (14580.647 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:36:49", "plugin": "core", "name": "end_epoch", "raw_value": "1754228209.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:36:49", "plugin": "core", "name": "start_epoch", "raw_value": "1754228209.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-22", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 22, "time_seconds": 32.78123140335083, "inputs": {"library|input_1": {"src": "hda", "id": "276ed406f8b12553"}, "library|r1|adapters_0|adapter_source|adapter": "TAAACAGATTAGT", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|revcomp": true}, "job": {"model_class": "Job", "id": "491b03a840d54215", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:37:19.506846", "update_time": "2025-08-03T13:37:33.177060", "galaxy_version": "24.1", "external_id": "gxy-l7qng", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/3/a/6/dataset_3a6d4649-a951-4f4c-ae09-cae056c31a00.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'TAAACAGATTAGT'    --error-rate=0.1 --times=1 --overlap=3    --action=trim --rc        --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": true, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 138, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"TAAACAGATTAGT\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "276ed406f8b12553", "src": "hda", "uuid": "3a6d4649-a951-4f4c-ae09-cae056c31a00"}}, "outputs": {"out1": {"id": "a383bf757553699f", "src": "hda", "uuid": "0e3fdcf3-2698-4970-bdfd-e33178c0a732"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (14973.243 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReverse-complemented:                        0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             97 bp (95.1%)\n\n=== Adapter 1 ===\n\nSequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n5\t1\t0.0\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (14973.243 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReverse-complemented:                        0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             97 bp (95.1%)\n\n=== Adapter 1 ===\n\nSequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n5\t1\t0.0\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:37:21", "plugin": "core", "name": "end_epoch", "raw_value": "1754228241.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:37:21", "plugin": "core", "name": "start_epoch", "raw_value": "1754228241.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-23", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 23, "time_seconds": 34.36532926559448, "inputs": {"library|input_1": {"src": "hda", "id": "0346b32e1a6eb022"}, "library|input_2": {"src": "hda", "id": "558da91d496bdb56"}, "library|r1|adapters_0|adapter_source|adapter": "ATCTGGTTCC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "CTACAAG", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "filter_options|minimum_length": "30", "filter_options|minimum_length2": "10", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "f2c581515170beb4", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:37:53.531400", "update_time": "2025-08-03T13:38:07.186925", "galaxy_version": "24.1", "external_id": "gxy-w7tcm", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/9/2/1/dataset_9212a597-624a-48f5-9fac-28ea52341544.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/0/6/5/dataset_065af4a9-20ef-417a-9ba8-36d8082d6973.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'ATCTGGTTCC'    -A 'CTACAAG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=30:10  --pair-filter=both     -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"30\", \"minimum_length2\": \"10\", \"pair_filter\": \"both\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 140, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 141, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"ATCTGGTTCC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CTACAAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "0346b32e1a6eb022", "src": "hda", "uuid": "9212a597-624a-48f5-9fac-28ea52341544"}, "library|input_2": {"id": "558da91d496bdb56", "src": "hda", "uuid": "065af4a9-20ef-417a-9ba8-36d8082d6973"}}, "outputs": {"out1": {"id": "a396bcdf0b376011", "src": "hda", "uuid": "a049ed7b-4846-44bc-a6c1-c88089e62e5f"}, "out2": {"id": "3b32d1538739db00", "src": "hda", "uuid": "7b6db5da-eb9f-4856-ae44-382d0baff3c0"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.172 s (1740.393 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                      32 (32.3%)\n  Read 2 with adapter:                      15 (15.2%)\n\n== Read fate breakdown ==\nPairs that were too short:                   3 (3.0%)\nPairs written (passing filters):            96 (97.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         38,492 bp (79.7%)\n  Read 1:        17,741 bp\n  Read 2:        20,751 bp\n\n=== First read: Adapter 1 ===\n\nSequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 90.6%\n  G: 3.1%\n  T: 0.0%\n  none/other: 6.2%\nWARNING:\n    The adapter is preceded by 'C' extremely often.\n    The provided adapter sequence could be incomplete at its 5' end.\n    Ignore this warning when trimming primers.\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n13\t1\t0.0\t1\t1\n14\t1\t0.0\t1\t1\n201\t1\t0.0\t1\t1\n203\t1\t0.0\t1\t1\n208\t2\t0.0\t1\t2\n209\t1\t0.0\t1\t1\n211\t1\t0.0\t1\t1\n214\t2\t0.0\t1\t2\n217\t2\t0.0\t1\t2\n218\t1\t0.0\t1\t1\n222\t1\t0.0\t1\t1\n226\t1\t0.0\t1\t1\n227\t2\t0.0\t1\t2\n228\t1\t0.0\t1\t1\n229\t1\t0.0\t1\t1\n232\t2\t0.0\t1\t2\n238\t1\t0.0\t1\t1\n242\t7\t0.0\t1\t7\n251\t1\t0.0\t1\t0 1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 73.3%\n  G: 0.0%\n  T: 0.0%\n  none/other: 26.7%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t1\t0.0\t0\t1\n228\t2\t0.0\t0\t2\n229\t1\t0.0\t0\t1\n238\t3\t0.0\t0\t3\n241\t1\t0.0\t0\t1\n243\t1\t0.0\t0\t1\n246\t1\t0.0\t0\t1\n248\t1\t0.0\t0\t1\n250\t1\t0.0\t0\t1\n251\t3\t0.0\t0\t3\n\n\nWARNING:\n    One or more of your adapter sequences may be incomplete.\n    Please see the detailed output above.\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.172 s (1740.393 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                      32 (32.3%)\n  Read 2 with adapter:                      15 (15.2%)\n\n== Read fate breakdown ==\nPairs that were too short:                   3 (3.0%)\nPairs written (passing filters):            96 (97.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         38,492 bp (79.7%)\n  Read 1:        17,741 bp\n  Read 2:        20,751 bp\n\n=== First read: Adapter 1 ===\n\nSequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 90.6%\n  G: 3.1%\n  T: 0.0%\n  none/other: 6.2%\nWARNING:\n    The adapter is preceded by 'C' extremely often.\n    The provided adapter sequence could be incomplete at its 5' end.\n    Ignore this warning when trimming primers.\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n13\t1\t0.0\t1\t1\n14\t1\t0.0\t1\t1\n201\t1\t0.0\t1\t1\n203\t1\t0.0\t1\t1\n208\t2\t0.0\t1\t2\n209\t1\t0.0\t1\t1\n211\t1\t0.0\t1\t1\n214\t2\t0.0\t1\t2\n217\t2\t0.0\t1\t2\n218\t1\t0.0\t1\t1\n222\t1\t0.0\t1\t1\n226\t1\t0.0\t1\t1\n227\t2\t0.0\t1\t2\n228\t1\t0.0\t1\t1\n229\t1\t0.0\t1\t1\n232\t2\t0.0\t1\t2\n238\t1\t0.0\t1\t1\n242\t7\t0.0\t1\t7\n251\t1\t0.0\t1\t0 1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 73.3%\n  G: 0.0%\n  T: 0.0%\n  none/other: 26.7%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t1\t0.0\t0\t1\n228\t2\t0.0\t0\t2\n229\t1\t0.0\t0\t1\n238\t3\t0.0\t0\t3\n241\t1\t0.0\t0\t1\n243\t1\t0.0\t0\t1\n246\t1\t0.0\t0\t1\n248\t1\t0.0\t0\t1\n250\t1\t0.0\t0\t1\n251\t3\t0.0\t0\t3\n\n\nWARNING:\n    One or more of your adapter sequences may be incomplete.\n    Please see the detailed output above.\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:37:56", "plugin": "core", "name": "end_epoch", "raw_value": "1754228276.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:37:55", "plugin": "core", "name": "start_epoch", "raw_value": "1754228275.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-24", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 24, "time_seconds": 11.095903396606445, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "cutadapt/4.9+galaxy1-25", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 25, "time_seconds": 35.12485218048096, "inputs": {"library|input_1": {"src": "hda", "id": "fed763203d568ed9"}, "library|input_2": {"src": "hda", "id": "abf0b03f0cc08f2e"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "filter_options|minimum_length": "10", "filter_options|maximum_length": "50", "filter_options|maximum_length2": "30", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "5b831b7cfbaece61", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:38:39.505417", "update_time": "2025-08-03T13:38:53.498864", "galaxy_version": "24.1", "external_id": "gxy-xv9cx", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/9/7/b/dataset_97bc6358-ab6f-4fa7-b4c0-28e2932532dd.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/c/4/e/dataset_c4ec757c-4b40-415a-98de-d6ecf66e9ccf.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'     --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=10 --maximum-length=50:30  --pair-filter=both     -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"50\", \"maximum_length2\": \"30\", \"minimum_length\": \"10\", \"minimum_length2\": \"\", \"pair_filter\": \"both\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 146, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 147, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "fed763203d568ed9", "src": "hda", "uuid": "97bc6358-ab6f-4fa7-b4c0-28e2932532dd"}, "library|input_2": {"id": "abf0b03f0cc08f2e", "src": "hda", "uuid": "c4ec757c-4b40-415a-98de-d6ecf66e9ccf"}}, "outputs": {"out1": {"id": "04b0a04551104eec", "src": "hda", "uuid": "ad4f32fe-f73e-4410-a0ab-fa37703fc6ac"}, "out2": {"id": "53eb1a64b0bb4825", "src": "hda", "uuid": "c6aefe41-f2c7-48d9-8f73-19ee85d6c3bd"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.159 s (1609.044 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.159 s (1609.044 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:38:41", "plugin": "core", "name": "end_epoch", "raw_value": "1754228321.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:38:41", "plugin": "core", "name": "start_epoch", "raw_value": "1754228321.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-26", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 26, "time_seconds": 34.77260994911194, "inputs": {"library|input_1": {"src": "hda", "id": "30b0c5092727dd7d"}, "library|input_2": {"src": "hda", "id": "dcab7436a53615e9"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "filter_options|minimum_length": "10", "filter_options|minimum_length2": "10", "filter_options|maximum_length": "50", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "0346b32e1a6eb022", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:39:14.641720", "update_time": "2025-08-03T13:39:28.345032", "galaxy_version": "24.1", "external_id": "gxy-njf5g", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/5/3/4/dataset_5346e41d-3bb3-4569-a900-03a7895972f1.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/b/4/0/dataset_b40027ef-bbe8-42aa-b1be-51245e145c6a.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'     --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=10:10 --maximum-length=50  --pair-filter=both     -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"50\", \"maximum_length2\": \"\", \"minimum_length\": \"10\", \"minimum_length2\": \"10\", \"pair_filter\": \"both\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 150, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "30b0c5092727dd7d", "src": "hda", "uuid": "5346e41d-3bb3-4569-a900-03a7895972f1"}, "library|input_2": {"id": "dcab7436a53615e9", "src": "hda", "uuid": "b40027ef-bbe8-42aa-b1be-51245e145c6a"}}, "outputs": {"out1": {"id": "0eb7eff76a143238", "src": "hda", "uuid": "317c50ba-79cf-417d-9d19-b457c00cdc0b"}, "out2": {"id": "35a5aeab1b56eedc", "src": "hda", "uuid": "4ea2f3fb-a9d4-4e11-8aca-b40f41e7de63"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.155 s (1568.866 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.155 s (1568.866 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:39:17", "plugin": "core", "name": "end_epoch", "raw_value": "1754228357.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:39:16", "plugin": "core", "name": "start_epoch", "raw_value": "1754228356.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-27", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 27, "time_seconds": 31.910390615463257, "inputs": {"library|input_1": {"src": "hda", "id": "7480d4abf61c0d44"}, "library|r1|adapters_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "other_trimming_options|shorten_options|length": "10", "other_trimming_options|shorten_options|shorten_end": "3prime", "other_trimming_options|shorten_options|shorten_values": "True", "filter_options|minimum_length": "0"}, "job": {"model_class": "Job", "id": "a396bcdf0b376011", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:39:47.985907", "update_time": "2025-08-03T13:40:00.654496", "galaxy_version": "24.1", "external_id": "gxy-hv8k5", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/2/a/9/dataset_2a90f3ba-35e2-4440-92bc-e56ef0d9a40a.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGCCGCTANGACG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim     --length=10          -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"0\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 0, \"length\": \"10\", \"shorten_end\": \"3prime\", \"shorten_values\": \"True\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "7480d4abf61c0d44", "src": "hda", "uuid": "2a90f3ba-35e2-4440-92bc-e56ef0d9a40a"}}, "outputs": {"out1": {"id": "2e6c6ba499f1036f", "src": "hda", "uuid": "892821e5-35cd-4db3-b773-c9286cb550c1"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (14396.350 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (14396.350 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:39:49", "plugin": "core", "name": "end_epoch", "raw_value": "1754228389.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:39:49", "plugin": "core", "name": "start_epoch", "raw_value": "1754228389.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-28", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 28, "time_seconds": 32.57241892814636, "inputs": {"library|input_1": {"src": "hda", "id": "e68518aa8e3abd95"}, "library|r1|adapters_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "other_trimming_options|shorten_options|length": "10", "other_trimming_options|shorten_options|shorten_end": "5prime", "other_trimming_options|shorten_options|shorten_values": "True", "filter_options|minimum_length": "0"}, "job": {"model_class": "Job", "id": "20956adb271c3b43", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:40:20.562194", "update_time": "2025-08-03T13:40:33.452020", "galaxy_version": "24.1", "external_id": "gxy-f572k", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/8/9/3/dataset_8937e1c1-5201-4163-b8ae-8a5653b18088.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGCCGCTANGACG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim     --length=-10          -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"0\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 0, \"length\": \"10\", \"shorten_end\": \"5prime\", \"shorten_values\": \"True\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "e68518aa8e3abd95", "src": "hda", "uuid": "8937e1c1-5201-4163-b8ae-8a5653b18088"}}, "outputs": {"out1": {"id": "85947ec372429c60", "src": "hda", "uuid": "84124c8d-d1c3-43c3-a9ec-88e42fb3efb6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (15120.983 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (15120.983 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:40:22", "plugin": "core", "name": "end_epoch", "raw_value": "1754228422.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:40:22", "plugin": "core", "name": "start_epoch", "raw_value": "1754228422.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-29", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 29, "time_seconds": 32.0045530796051, "inputs": {"library|input_1": {"src": "hda", "id": "9f828da78f33f17a"}, "library|r1|adapters_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "other_trimming_options|shorten_options|length": "10", "other_trimming_options|shorten_options|shorten_end": "3prime", "other_trimming_options|shorten_options|shorten_values": "True", "other_trimming_options|shorten_options_r2|length2": "10", "other_trimming_options|shorten_options_r2|shorten_end_r2": "5prime", "other_trimming_options|shorten_options_r2|shorten_values_r2": "True", "filter_options|minimum_length": "0"}, "job": {"model_class": "Job", "id": "fed763203d568ed9", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:40:51.617223", "update_time": "2025-08-03T13:41:05.081399", "galaxy_version": "24.1", "external_id": "gxy-xvnft", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/b/f/e/dataset_bfe88a23-0287-449d-a232-7fe7162cfdae.dat' 'cutadapt_small_fastq_1.fq' && ln -f -s '/galaxy/server/database/objects/b/f/e/dataset_bfe88a23-0287-449d-a232-7fe7162cfdae.dat' 'cutadapt_small_fastq_2.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGCCGCTANGACG'    -A 'AGCCGCTANGACG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim     --length=10 -L -10          -o 'out1.fq' -p 'out2.fq'  'cutadapt_small_fastq_1.fq' 'cutadapt_small_fastq_2.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"0\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 0, \"length\": \"10\", \"shorten_end\": \"3prime\", \"shorten_values\": \"True\"}, \"shorten_options_r2\": {\"__current_case__\": 0, \"length2\": \"10\", \"shorten_end_r2\": \"5prime\", \"shorten_values_r2\": \"True\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 158, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 158, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "9f828da78f33f17a", "src": "hda", "uuid": "bfe88a23-0287-449d-a232-7fe7162cfdae"}, "library|input_2": {"id": "9f828da78f33f17a", "src": "hda", "uuid": "bfe88a23-0287-449d-a232-7fe7162cfdae"}}, "outputs": {"out1": {"id": "3a84506c49502238", "src": "hda", "uuid": "85ae1bdd-3023-46a7-b78e-441097023052"}, "out2": {"id": "f8fcfb038904e4ce", "src": "hda", "uuid": "17bba90d-14ad-492b-8d0b-df9aad7974a4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fq\nProcessing paired-end reads on 8 cores ...\nFinished in 0.070 s (23471.038 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                  3\n  Read 1 with adapter:                       1 (33.3%)\n  Read 2 with adapter:                       1 (33.3%)\nPairs written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           204 bp\n  Read 1:           102 bp\n  Read 2:           102 bp\nTotal written (filtered):             40 bp (19.6%)\n  Read 1:            20 bp\n  Read 2:            20 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fq\nProcessing paired-end reads on 8 cores ...\nFinished in 0.070 s (23471.038 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                  3\n  Read 1 with adapter:                       1 (33.3%)\n  Read 2 with adapter:                       1 (33.3%)\nPairs written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           204 bp\n  Read 1:           102 bp\n  Read 2:           102 bp\nTotal written (filtered):             40 bp (19.6%)\n  Read 1:            20 bp\n  Read 2:            20 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:40:53", "plugin": "core", "name": "end_epoch", "raw_value": "1754228453.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:40:52", "plugin": "core", "name": "start_epoch", "raw_value": "1754228452.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-3", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 3, "time_seconds": 27.342065811157227, "inputs": {"library|input_1": {"src": "hdca", "id": "0df8122e5adbfb24"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired_collection"}, "job": {"model_class": "Job", "id": "ee33835ce7ed357a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:28:02.682906", "update_time": "2025-08-03T13:28:08.776510", "galaxy_version": "24.1", "external_id": "gxy-bzf5g", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/a/e/a/dataset_aea7e98e-2bc2-4586-ad90-56f49ae6de1c.dat' 'Unnamed Collection_1.fq.gz' && ln -f -s '/galaxy/server/database/objects/2/5/3/dataset_2531bc6f-da15-48bb-9440-e23058535aa1.dat' 'Unnamed Collection_2.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    -A 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'Unnamed Collection_1.fq.gz' 'Unnamed Collection_2.fq.gz'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired_collection\"}"}, "inputs": {"library|input_11": {"id": "83e098539a757bfe", "src": "hda", "uuid": "aea7e98e-2bc2-4586-ad90-56f49ae6de1c"}, "library|input_12": {"id": "ee33835ce7ed357a", "src": "hda", "uuid": "2531bc6f-da15-48bb-9440-e23058535aa1"}}, "outputs": {"out_pairs|__part__|forward": {"id": "0459a698221f61f8", "src": "hda", "uuid": "6158c817-4336-473c-b331-c266195f3f78"}, "out_pairs|__part__|reverse": {"id": "87b868466ac51bc7", "src": "hda", "uuid": "1b8e9fad-18bf-4288-b2d5-925e86430059"}}, "copied_from_job_id": null, "output_collections": {"out_pairs": {"src": "hdca", "id": "54b568464022653e"}}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.177 s (1787.886 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.177 s (1787.886 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "cutadapt/4.9+galaxy1-30", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 30, "time_seconds": 33.649935722351074, "inputs": {"library|input_1": {"src": "hda", "id": "4e26d665d8cb8220"}, "library|r2|adapters2_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "other_trimming_options|shorten_options_r2|length2": "10", "other_trimming_options|shorten_options_r2|shorten_end_r2": "3prime", "other_trimming_options|shorten_options_r2|shorten_values_r2": "True", "filter_options|minimum_length": "0"}, "job": {"model_class": "Job", "id": "04b0a04551104eec", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:41:24.657342", "update_time": "2025-08-03T13:41:38.737007", "galaxy_version": "24.1", "external_id": "gxy-n569g", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/1/1/c/dataset_11cb2d79-0c1a-4fc3-b776-be94ce526349.dat' 'cutadapt_small_fastq_1.fq' && ln -f -s '/galaxy/server/database/objects/1/1/c/dataset_11cb2d79-0c1a-4fc3-b776-be94ce526349.dat' 'cutadapt_small_fastq_2.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}    -A 'AGCCGCTANGACG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim     -L 10          -o 'out1.fq' -p 'out2.fq'  'cutadapt_small_fastq_1.fq' 'cutadapt_small_fastq_2.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"0\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 0, \"length2\": \"10\", \"shorten_end_r2\": \"3prime\", \"shorten_values_r2\": \"True\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "4e26d665d8cb8220", "src": "hda", "uuid": "11cb2d79-0c1a-4fc3-b776-be94ce526349"}, "library|input_2": {"id": "4e26d665d8cb8220", "src": "hda", "uuid": "11cb2d79-0c1a-4fc3-b776-be94ce526349"}}, "outputs": {"out1": {"id": "2fb08cd464942133", "src": "hda", "uuid": "9bc91e38-2b3a-46d8-8613-035868228a7d"}, "out2": {"id": "74fa3beef3055ab6", "src": "hda", "uuid": "3b1da5ef-9c08-45a1-bafb-953474f2e266"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fq\nProcessing paired-end reads on 8 cores ...\nFinished in 0.058 s (19426.982 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                  3\n  Read 2 with adapter:                       1 (33.3%)\nPairs written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           204 bp\n  Read 1:           102 bp\n  Read 2:           102 bp\nTotal written (filtered):            122 bp (59.8%)\n  Read 1:           102 bp\n  Read 2:            20 bp\n\n=== Second read: Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fq\nProcessing paired-end reads on 8 cores ...\nFinished in 0.058 s (19426.982 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                  3\n  Read 2 with adapter:                       1 (33.3%)\nPairs written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           204 bp\n  Read 1:           102 bp\n  Read 2:           102 bp\nTotal written (filtered):            122 bp (59.8%)\n  Read 1:           102 bp\n  Read 2:            20 bp\n\n=== Second read: Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:41:27", "plugin": "core", "name": "end_epoch", "raw_value": "1754228487.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:41:26", "plugin": "core", "name": "start_epoch", "raw_value": "1754228486.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-31", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 31, "time_seconds": 33.88951539993286, "inputs": {"library|input_1": {"src": "hda", "id": "9347a14929806273"}, "library|r1|adapters_0|adapter_source|adapter": "AGCGGCTTAGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "filter_options|max_expected_errors": "10"}, "job": {"model_class": "Job", "id": "30b0c5092727dd7d", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:41:59.623627", "update_time": "2025-08-03T13:42:13.087886", "galaxy_version": "24.1", "external_id": "gxy-cr8kb", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/3/f/a/dataset_3fae7be9-7a14-44a0-9a4b-b6a72d30a6fa.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGCGGCTTAGACG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1 --max-ee=10.0      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"10.0\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 164, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCGGCTTAGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "9347a14929806273", "src": "hda", "uuid": "3fae7be9-7a14-44a0-9a4b-b6a72d30a6fa"}}, "outputs": {"out1": {"id": "2be38b33eaf222dc", "src": "hda", "uuid": "e34f95f2-c289-4f20-9e98-3a9253d2aa51"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.050 s (16654.809 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads with too many exp. errors:             0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.050 s (16654.809 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads with too many exp. errors:             0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:42:02", "plugin": "core", "name": "end_epoch", "raw_value": "1754228522.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:42:01", "plugin": "core", "name": "start_epoch", "raw_value": "1754228521.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-32", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 32, "time_seconds": 11.603164196014404, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "cutadapt/4.9+galaxy1-33", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 33, "time_seconds": 35.75099325180054, "inputs": {"library|input_1": {"src": "hda", "id": "a29190ad84a48504"}, "library|input_2": {"src": "hda", "id": "931233142cdacfbc"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGCX", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGCX", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired"}, "job": {"model_class": "Job", "id": "7480d4abf61c0d44", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:42:46.119103", "update_time": "2025-08-03T13:43:00.389009", "galaxy_version": "24.1", "external_id": "gxy-tgqjw", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/8/e/6/dataset_8e66a65f-35f7-4f0b-8154-ecd77d2d1b2b.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/e/2/2/dataset_e2223a47-0033-4978-b065-cc35f564278c.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGCX'    -A 'AGATCGGAAGAGCX'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 167, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGCX\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGCX\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "a29190ad84a48504", "src": "hda", "uuid": "8e66a65f-35f7-4f0b-8154-ecd77d2d1b2b"}, "library|input_2": {"id": "931233142cdacfbc", "src": "hda", "uuid": "e2223a47-0033-4978-b065-cc35f564278c"}}, "outputs": {"out1": {"id": "a1e20f76d0cf7834", "src": "hda", "uuid": "80e8fb09-cd5a-42dc-91cd-0ab21638dbae"}, "out2": {"id": "27e5ad70744f499d", "src": "hda", "uuid": "ad53d676-50c2-4b23-bd6a-9aff2893e61b"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.176 s (1774.145 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         48,270 bp (100.0%)\n  Read 1:        24,141 bp\n  Read 2:        24,129 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.176 s (1774.145 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         48,270 bp (100.0%)\n  Read 1:        24,141 bp\n  Read 2:        24,129 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:42:48", "plugin": "core", "name": "end_epoch", "raw_value": "1754228568.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:42:48", "plugin": "core", "name": "start_epoch", "raw_value": "1754228568.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-34", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 34, "status": "skip"}}, {"id": "cutadapt/4.9+galaxy1-35", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 35, "time_seconds": 33.75333595275879, "inputs": {"library|input_1": {"src": "hdca", "id": "49eb6e6961cbae01"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r1|adapters_0|single_noindels": true, "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|single_noindels": true, "library|type": "paired_collection"}, "job": {"model_class": "Job", "id": "85947ec372429c60", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:43:20.852485", "update_time": "2025-08-03T13:43:34.426546", "galaxy_version": "24.1", "external_id": "gxy-9ltm5", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/e/f/d/dataset_efda89cb-6f26-494f-923b-c70ca5b25620.dat' 'Unnamed Collection_1.fq.gz' && ln -f -s '/galaxy/server/database/objects/8/f/d/dataset_8fd89167-2ca9-4120-9779-ad0561ec1488.dat' 'Unnamed Collection_2.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC;noindels'    -A 'AGATCGGAAGAGC;noindels'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'Unnamed Collection_1.fq.gz' 'Unnamed Collection_2.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 5, \"src\": \"hdca\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": true}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": true}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired_collection\"}"}, "inputs": {"library|input_11": {"id": "9758a112c64a630b", "src": "hda", "uuid": "efda89cb-6f26-494f-923b-c70ca5b25620"}, "library|input_12": {"id": "1e0f8d3010596b91", "src": "hda", "uuid": "8fd89167-2ca9-4120-9779-ad0561ec1488"}}, "outputs": {"out_pairs|__part__|forward": {"id": "b73f62c98f4d6d7a", "src": "hda", "uuid": "09b8db3b-45d7-484f-b96b-04e995511cd3"}, "out_pairs|__part__|reverse": {"id": "b358e0c9a7f7a99e", "src": "hda", "uuid": "b5fd08b8-a369-4187-9898-3669e0743a2f"}}, "copied_from_job_id": null, "output_collections": {"out_pairs": {"src": "hdca", "id": "531a6ca6ecd998ee"}}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.176 s (1778.769 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.176 s (1778.769 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:43:23", "plugin": "core", "name": "end_epoch", "raw_value": "1754228603.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:43:22", "plugin": "core", "name": "start_epoch", "raw_value": "1754228602.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-36", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 36, "time_seconds": 34.99038791656494, "inputs": {"library|input_1": {"src": "hdca", "id": "b44f757e8340cc24"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired_collection", "other_trimming_options|quality_cutoff": "5", "other_trimming_options|quality_cutoff2": "15,20"}, "job": {"model_class": "Job", "id": "f8fcfb038904e4ce", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:43:55.327248", "update_time": "2025-08-03T13:44:09.429132", "galaxy_version": "24.1", "external_id": "gxy-qbgvc", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/f/5/1/dataset_f5186811-e2b3-4557-b773-d0256448fbe0.dat' 'Unnamed Collection_1.fq.gz' && ln -f -s '/galaxy/server/database/objects/a/3/8/dataset_a386f152-8015-4f9f-abc7-8db3058b7541.dat' 'Unnamed Collection_2.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    -A 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim   --quality-cutoff=5 -Q 15,20       --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'Unnamed Collection_1.fq.gz' 'Unnamed Collection_2.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"5\", \"quality_cutoff2\": \"15,20\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 7, \"src\": \"hdca\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired_collection\"}"}, "inputs": {"library|input_12": {"id": "5700e548d5172fd4", "src": "hda", "uuid": "a386f152-8015-4f9f-abc7-8db3058b7541"}, "library|input_11": {"id": "94548f68ac6f55c4", "src": "hda", "uuid": "f5186811-e2b3-4557-b773-d0256448fbe0"}}, "outputs": {"out_pairs|__part__|forward": {"id": "810d52bb21404f5b", "src": "hda", "uuid": "e9e83249-8127-4c22-8cc0-7af108bde2df"}, "out_pairs|__part__|reverse": {"id": "1760903ce4dfefd2", "src": "hda", "uuid": "85b4b926-fa1b-458e-abdc-a369477d8358"}}, "copied_from_job_id": null, "output_collections": {"out_pairs": {"src": "hdca", "id": "a0e31ec39a5d5253"}}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.179 s (1803.128 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nQuality-trimmed:                     747 bp (1.5%)\n  Read 1:             0 bp\n  Read 2:           747 bp\nTotal written (filtered):         48,938 bp (98.5%)\n  Read 1:        24,843 bp\n  Read 2:        24,095 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n4\t1\t0.4\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.179 s (1803.128 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nQuality-trimmed:                     747 bp (1.5%)\n  Read 1:             0 bp\n  Read 2:           747 bp\nTotal written (filtered):         48,938 bp (98.5%)\n  Read 1:        24,843 bp\n  Read 2:        24,095 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n4\t1\t0.4\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:43:58", "plugin": "core", "name": "end_epoch", "raw_value": "1754228638.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:43:57", "plugin": "core", "name": "start_epoch", "raw_value": "1754228637.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-37", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 37, "time_seconds": 10.879751205444336, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "cutadapt/4.9+galaxy1-38", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 38, "time_seconds": 32.15459132194519, "inputs": {"library|input_1": {"src": "hda", "id": "eb8778af2cf43e91"}, "library|r1|adapters_0|adapter_source|adapter": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|overlap": "10"}, "job": {"model_class": "Job", "id": "9347a14929806273", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:44:39.598866", "update_time": "2025-08-03T13:44:52.721681", "galaxy_version": "24.1", "external_id": "gxy-7ts62", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/6/0/0/dataset_6006894c-4144-4c9f-a9f5-9241d51d9a50.dat' 'polya_1_fasta.fa' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'    --error-rate=0.1 --times=1 --overlap=10    --action=trim         --minimum-length=1      -o 'out1.fa'  'polya_1_fasta.fa'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"10\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 181, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "eb8778af2cf43e91", "src": "hda", "uuid": "6006894c-4144-4c9f-a9f5-9241d51d9a50"}}, "outputs": {"out1": {"id": "97e483657af80a42", "src": "hda", "uuid": "6d12c68c-0cc1-4950-80db-8cefce9e9b55"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (10684.133 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       4\nReads with adapters:                         3 (75.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             4 (100.0%)\n\nTotal basepairs processed:           194 bp\nTotal written (filtered):             96 bp (49.5%)\n\n=== Adapter 1 ===\n\nSequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 times\n\nMinimum overlap: 10\nNo. of allowed errors:\n1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 33.3%\n  G: 66.7%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n26\t1\t0.0\t2\t0 0 1\n30\t1\t0.0\t3\t0 0 0 1\n42\t1\t0.0\t3\t0 1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.043 s (10684.133 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       4\nReads with adapters:                         3 (75.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             4 (100.0%)\n\nTotal basepairs processed:           194 bp\nTotal written (filtered):             96 bp (49.5%)\n\n=== Adapter 1 ===\n\nSequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 times\n\nMinimum overlap: 10\nNo. of allowed errors:\n1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 33.3%\n  G: 66.7%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n26\t1\t0.0\t2\t0 0 1\n30\t1\t0.0\t3\t0 0 0 1\n42\t1\t0.0\t3\t0 1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:44:42", "plugin": "core", "name": "end_epoch", "raw_value": "1754228682.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:44:41", "plugin": "core", "name": "start_epoch", "raw_value": "1754228681.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-39", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 39, "time_seconds": 34.85436248779297, "inputs": {"library|input_1": {"src": "hda", "id": "a092da42ec35f63a"}, "library|r1|adapters_0|adapter_source|adapter": "A{35}", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|overlap": "10"}, "job": {"model_class": "Job", "id": "99a2ce4e8a72beeb", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:45:13.394349", "update_time": "2025-08-03T13:45:27.643786", "galaxy_version": "24.1", "external_id": "gxy-pn2nf", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/1/5/3/dataset_15399e68-f327-4c1f-a950-3fa5d509e941.dat' 'polya_1_fasta.fa' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'A{35}'    --error-rate=0.1 --times=1 --overlap=10    --action=trim         --minimum-length=1      -o 'out1.fa'  'polya_1_fasta.fa'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"10\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"A{35}\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "a092da42ec35f63a", "src": "hda", "uuid": "15399e68-f327-4c1f-a950-3fa5d509e941"}}, "outputs": {"out1": {"id": "6efb4b79516b2c49", "src": "hda", "uuid": "3b01ea55-d6ea-4433-af04-8b3b03999563"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.044 s (11004.627 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       4\nReads with adapters:                         3 (75.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             4 (100.0%)\n\nTotal basepairs processed:           194 bp\nTotal written (filtered):             96 bp (49.5%)\n\n=== Adapter 1 ===\n\nSequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 times\n\nMinimum overlap: 10\nNo. of allowed errors:\n1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 33.3%\n  G: 66.7%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n26\t1\t0.0\t2\t0 0 1\n30\t1\t0.0\t3\t0 0 0 1\n42\t1\t0.0\t3\t0 1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.044 s (11004.627 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       4\nReads with adapters:                         3 (75.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             4 (100.0%)\n\nTotal basepairs processed:           194 bp\nTotal written (filtered):             96 bp (49.5%)\n\n=== Adapter 1 ===\n\nSequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 times\n\nMinimum overlap: 10\nNo. of allowed errors:\n1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 33.3%\n  G: 66.7%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n26\t1\t0.0\t2\t0 0 1\n30\t1\t0.0\t3\t0 0 0 1\n42\t1\t0.0\t3\t0 1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:45:16", "plugin": "core", "name": "end_epoch", "raw_value": "1754228716.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:45:15", "plugin": "core", "name": "start_epoch", "raw_value": "1754228715.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-4", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 4, "status": "skip"}}, {"id": "cutadapt/4.9+galaxy1-40", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 40, "time_seconds": 31.8940372467041, "inputs": {"library|input_1": {"src": "hda", "id": "6af0eb86808de7a4"}, "library|type": "single", "other_trimming_options|poly_a": true}, "job": {"model_class": "Job", "id": "931233142cdacfbc", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:45:46.755324", "update_time": "2025-08-03T13:45:59.510471", "galaxy_version": "24.1", "external_id": "gxy-jrm5n", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/3/8/e/dataset_38ed3f99-85aa-4152-92af-792ef44b4b1c.dat' 'polya_1_fasta.fa' &&  cutadapt  -j=${GALAXY_SLOTS:-4}    --error-rate=0.1 --times=1 --overlap=3    --action=trim    --poly-a     --minimum-length=1      -o 'out1.fa'  'polya_1_fasta.fa'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": true, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "6af0eb86808de7a4", "src": "hda", "uuid": "38ed3f99-85aa-4152-92af-792ef44b4b1c"}}, "outputs": {"out1": {"id": "4f48cc430fa7e4d6", "src": "hda", "uuid": "37bebaae-3e70-4c9a-a1eb-0e2676376287"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.026 s (6603.420 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       4\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             4 (100.0%)\n\nTotal basepairs processed:           194 bp\nPoly-A-trimmed:                       84 bp (43.3%)\nTotal written (filtered):            110 bp (56.7%)\n\n=== Poly-A trimmed ===\n\nlength\tcount\n0\t1\n21\t2\n42\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.026 s (6603.420 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       4\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             4 (100.0%)\n\nTotal basepairs processed:           194 bp\nPoly-A-trimmed:                       84 bp (43.3%)\nTotal written (filtered):            110 bp (56.7%)\n\n=== Poly-A trimmed ===\n\nlength\tcount\n0\t1\n21\t2\n42\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:45:48", "plugin": "core", "name": "end_epoch", "raw_value": "1754228748.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:45:48", "plugin": "core", "name": "start_epoch", "raw_value": "1754228748.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-41", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 41, "time_seconds": 33.79036545753479, "inputs": {"library|input_1": {"src": "hda", "id": "a5b45aa244051ee6"}, "library|type": "single"}, "job": {"model_class": "Job", "id": "27e5ad70744f499d", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:46:19.015470", "update_time": "2025-08-03T13:46:33.340285", "galaxy_version": "24.1", "external_id": "gxy-hkrvg", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/f/7/a/dataset_f7ac7c73-fad0-4116-9d1c-42b93f4b52a7.dat' 'simple_fasta_gz.fa.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fa.gz'  'simple_fasta_gz.fa.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 187, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "a5b45aa244051ee6", "src": "hda", "uuid": "f7ac7c73-fad0-4116-9d1c-42b93f4b52a7"}}, "outputs": {"out1": {"id": "5912be3e856df9c8", "src": "hda", "uuid": "114380ab-beee-416f-9c4c-056bc74aba7e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.083 s (41417.122 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:            18 bp\nTotal written (filtered):             18 bp (100.0%)\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.083 s (41417.122 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:            18 bp\nTotal written (filtered):             18 bp (100.0%)\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:46:21", "plugin": "core", "name": "end_epoch", "raw_value": "1754228781.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:46:20", "plugin": "core", "name": "start_epoch", "raw_value": "1754228780.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-42", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 42, "time_seconds": 33.19353127479553, "inputs": {"library|input_1": {"src": "hda", "id": "39c08c1b379ff476"}, "library|r1|adapters_0|adapter_source|adapter": "XXXXXX", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "other_trimming_options|quality_cutoff": "10", "filter_options|minimum_length": "0"}, "job": {"model_class": "Job", "id": "1e0f8d3010596b91", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:46:52.896739", "update_time": "2025-08-03T13:47:06.773817", "galaxy_version": "24.1", "external_id": "gxy-99pjz", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/a/5/4/dataset_a54c51c7-f0b3-42b7-bad3-cd401ff9c68a.dat' 'illumina64_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'XXXXXX'    --error-rate=0.1 --times=1 --overlap=3    --action=trim   --quality-cutoff=10         --quality-base=64    -o 'out1.fq'  'illumina64_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"0\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"10\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 189, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"XXXXXX\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "39c08c1b379ff476", "src": "hda", "uuid": "a54c51c7-f0b3-42b7-bad3-cd401ff9c68a"}}, "outputs": {"out1": {"id": "bbb0a4baa553e493", "src": "hda", "uuid": "eda15984-b132-4483-a891-b7a38d1d5f6c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.046 s (2311.611 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      20\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):            20 (100.0%)\n\nTotal basepairs processed:         1,900 bp\nQuality-trimmed:                   1,021 bp (53.7%)\nTotal written (filtered):            879 bp (46.3%)\n\n=== Adapter 1 ===\n\nSequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.046 s (2311.611 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      20\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):            20 (100.0%)\n\nTotal basepairs processed:         1,900 bp\nQuality-trimmed:                   1,021 bp (53.7%)\nTotal written (filtered):            879 bp (46.3%)\n\n=== Adapter 1 ===\n\nSequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:46:55", "plugin": "core", "name": "end_epoch", "raw_value": "1754228815.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:46:55", "plugin": "core", "name": "start_epoch", "raw_value": "1754228815.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-43", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 43, "time_seconds": 31.832460165023804, "inputs": {"library|input_1": {"src": "hda", "id": "db2dd2022d3fcf86"}, "library|type": "single", "other_trimming_options|quality_cutoff": "10", "filter_options|minimum_length": "0"}, "job": {"model_class": "Job", "id": "b358e0c9a7f7a99e", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:47:26.405948", "update_time": "2025-08-03T13:47:38.470917", "galaxy_version": "24.1", "external_id": "gxy-brqnp", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/d/2/c/dataset_d2c3f939-899a-453d-b2f7-4fe8fc241495.dat' 'illumina64_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}    --error-rate=0.1 --times=1 --overlap=3    --action=trim   --quality-cutoff=10         --quality-base=64    -o 'out1.fq'  'illumina64_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"0\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"10\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 191, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "db2dd2022d3fcf86", "src": "hda", "uuid": "d2c3f939-899a-453d-b2f7-4fe8fc241495"}}, "outputs": {"out1": {"id": "bd3be8fbde992751", "src": "hda", "uuid": "88b41903-cd42-42d1-ad51-f69dc5ff9ee6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.027 s (1352.382 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      20\nReads written (passing filters):            20 (100.0%)\n\nTotal basepairs processed:         1,900 bp\nQuality-trimmed:                   1,021 bp (53.7%)\nTotal written (filtered):            879 bp (46.3%)\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.027 s (1352.382 \u00b5s/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      20\nReads written (passing filters):            20 (100.0%)\n\nTotal basepairs processed:         1,900 bp\nQuality-trimmed:                   1,021 bp (53.7%)\nTotal written (filtered):            879 bp (46.3%)\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:47:28", "plugin": "core", "name": "end_epoch", "raw_value": "1754228848.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:47:27", "plugin": "core", "name": "start_epoch", "raw_value": "1754228847.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-44", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 44, "time_seconds": 11.353408575057983, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "cutadapt/4.9+galaxy1-45", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 45, "time_seconds": 31.21389102935791, "inputs": {"library|input_1": {"src": "hda", "id": "c38ff83bf198c05d"}, "library|r1|anywhere_adapters_0|adapter_source|adapter": "ACGTACGT", "library|r1|anywhere_adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|match_read_wildcards": true}, "job": {"model_class": "Job", "id": "810d52bb21404f5b", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:48:09.393906", "update_time": "2025-08-03T13:48:21.243069", "galaxy_version": "24.1", "external_id": "gxy-tgdc9", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/2/5/1/dataset_2513ddd0-3483-486b-a02e-7516a4102278.dat' 'wildcard_fa.fa' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -b 'ACGTACGT'    --error-rate=0.1 --times=1 --overlap=3  --match-read-wildcards  --action=trim         --minimum-length=1      -o 'out1.fa'  'wildcard_fa.fa'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": true, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 194, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"ACGTACGT\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "c38ff83bf198c05d", "src": "hda", "uuid": "2513ddd0-3483-486b-a02e-7516a4102278"}}, "outputs": {"out1": {"id": "892fdea7b27d053e", "src": "hda", "uuid": "3355a4dc-9156-4a66-adb1-18625ee361a6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.040 s (20244.002 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         2 (100.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:            32 bp\nTotal written (filtered):             16 bp (50.0%)\n\n=== Adapter 1 ===\n\nSequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times\n2 times, it overlapped the 5' end of a read\n0 times, it overlapped the 3' end or was within the read\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-8 bp: 0\n\nOverview of removed sequences (5')\nlength\tcount\texpect\tmax.err\terror counts\n8\t2\t0.0\t0\t2\n\n\n\nOverview of removed sequences (3' or within)\nlength\tcount\texpect\tmax.err\terror counts\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.040 s (20244.002 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         2 (100.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:            32 bp\nTotal written (filtered):             16 bp (50.0%)\n\n=== Adapter 1 ===\n\nSequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times\n2 times, it overlapped the 5' end of a read\n0 times, it overlapped the 3' end or was within the read\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-8 bp: 0\n\nOverview of removed sequences (5')\nlength\tcount\texpect\tmax.err\terror counts\n8\t2\t0.0\t0\t2\n\n\n\nOverview of removed sequences (3' or within)\nlength\tcount\texpect\tmax.err\terror counts\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:48:11", "plugin": "core", "name": "end_epoch", "raw_value": "1754228891.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:48:10", "plugin": "core", "name": "start_epoch", "raw_value": "1754228890.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-46", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 46, "time_seconds": 33.31744694709778, "inputs": {"library|input_1": {"src": "hda", "id": "65d93cbd9b65d626"}, "library|r1|adapters_0|adapter_source|adapter": "GGGGGGG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|error_rate": "0", "adapter_options|match_read_wildcards": true}, "job": {"model_class": "Job", "id": "4cf89a0c33c116b7", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:48:40.803359", "update_time": "2025-08-03T13:48:54.686913", "galaxy_version": "24.1", "external_id": "gxy-5n5lg", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/d/5/6/dataset_d5619d97-5ccc-41f1-a0c1-f62ca90f5a47.dat' 'wildcardN_fa.fa' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'GGGGGGG'    --error-rate=0.0 --times=1 --overlap=3  --match-read-wildcards  --action=trim         --minimum-length=1      -o 'out1.fa'  'wildcardN_fa.fa'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.0\", \"match_read_wildcards\": true, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 196, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"GGGGGGG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "65d93cbd9b65d626", "src": "hda", "uuid": "d5619d97-5ccc-41f1-a0c1-f62ca90f5a47"}}, "outputs": {"out1": {"id": "7fb46569801d1c76", "src": "hda", "uuid": "0a5d1b75-6cba-41b4-83e9-590ec9bff6a1"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (15130.202 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         2 (66.7%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:            30 bp\nTotal written (filtered):             16 bp (53.3%)\n\n=== Adapter 1 ===\n\nSequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n7\t2\t0.0\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (15130.202 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         2 (66.7%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:            30 bp\nTotal written (filtered):             16 bp (53.3%)\n\n=== Adapter 1 ===\n\nSequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n7\t2\t0.0\t0\t2\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:48:43", "plugin": "core", "name": "end_epoch", "raw_value": "1754228923.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:48:42", "plugin": "core", "name": "start_epoch", "raw_value": "1754228922.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-47", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 47, "time_seconds": 32.74442172050476, "inputs": {"library|input_1": {"src": "hda", "id": "7f1fbfd1e72a71ff"}, "library|input_2": {"src": "hda", "id": "46ba0608f1c4e49a"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|type": "paired"}, "job": {"model_class": "Job", "id": "97e483657af80a42", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "error", "exit_code": 1, "create_time": "2025-08-03T13:49:14.024819", "update_time": "2025-08-03T13:49:27.934249", "galaxy_version": "24.1", "external_id": "gxy-6v4pj", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/8/e/c/dataset_8ec15a14-30ce-444c-8a97-42e6559267dd.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/a/d/8/dataset_ad80c889-7171-4ea2-ad7f-a83839c5db8e.dat' 'bwa-mem-fastq_mispaired2_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    -A 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_fq_gz.fq.gz' 'bwa-mem-fastq_mispaired2_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 198, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 199, \"src\": \"hda\"}]}, \"pair_adapters\": false, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "7f1fbfd1e72a71ff", "src": "hda", "uuid": "8ec15a14-30ce-444c-8a97-42e6559267dd"}, "library|input_2": {"id": "46ba0608f1c4e49a", "src": "hda", "uuid": "ad80c889-7171-4ea2-ad7f-a83839c5db8e"}}, "outputs": {"out1": {"id": "c9dc4f06fdc599e2", "src": "hda", "uuid": "5967da73-687f-4dc8-b9f4-73557e83c8a3"}, "out2": {"id": "bf93efad016dbf47", "src": "hda", "uuid": "be0662d4-c654-4de5-9278-ebbd97997c79"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\n", "tool_stderr": "Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.\n", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\n", "stderr": "Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.\n", "job_messages": [{"code_desc": "", "desc": "Fatal error: Exit code 1 ()", "error_level": 3, "exit_code": 1, "type": "exit_code"}], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:49:16", "plugin": "core", "name": "end_epoch", "raw_value": "1754228956.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:49:15", "plugin": "core", "name": "start_epoch", "raw_value": "1754228955.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-5", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 5, "time_seconds": 33.44687843322754, "inputs": {"library|input_1": {"src": "hda", "id": "8d16cb7739ab4607"}, "library|r1|adapters_0|adapter_source|adapter": "TTAGACATATCTCCGTCG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "filter_options|discard_trimmed": true}, "job": {"model_class": "Job", "id": "87b868466ac51bc7", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:28:28.706466", "update_time": "2025-08-03T13:28:42.589396", "galaxy_version": "24.1", "external_id": "gxy-6wgzk", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/c/6/c/dataset_c6ceae7d-01d6-4e19-8751-01ca11cfad2b.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'TTAGACATATCTCCGTCG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim      --discard-trimmed   --minimum-length=1      -o 'out1.fq'  'cutadapt_small_fastq.fq'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": true, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 94, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"TTAGACATATCTCCGTCG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "8d16cb7739ab4607", "src": "hda", "uuid": "c6ceae7d-01d6-4e19-8751-01ca11cfad2b"}}, "outputs": {"out1": {"id": "798ff8675b25048b", "src": "hda", "uuid": "72efef17-0292-41ba-8b54-e9d69e40dbed"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (15018.304 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         2 (66.7%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             34 bp (33.3%)\n\n=== Adapter 1 ===\n\nSequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-18 bp: 1\n\nBases preceding removed adapters:\n  A: 50.0%\n  C: 50.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n10\t1\t0.0\t1\t0 1\n12\t1\t0.0\t1\t0 1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 8 cores ...\nFinished in 0.045 s (15018.304 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         2 (66.7%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             34 bp (33.3%)\n\n=== Adapter 1 ===\n\nSequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-18 bp: 1\n\nBases preceding removed adapters:\n  A: 50.0%\n  C: 50.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n10\t1\t0.0\t1\t0 1\n12\t1\t0.0\t1\t0 1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:28:31", "plugin": "core", "name": "end_epoch", "raw_value": "1754227711.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:28:31", "plugin": "core", "name": "start_epoch", "raw_value": "1754227711.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-6", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 6, "time_seconds": 27.665887594223022, "inputs": {"library|input_1": {"src": "hda", "id": "539e0e7ce3543747"}, "library|input_2": {"src": "hda", "id": "3de66a2082a80daf"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source|adapter_source_list": "user", "library|pair_adapters": true, "library|type": "paired"}, "job": {"model_class": "Job", "id": "539e0e7ce3543747", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:29:04.173272", "update_time": "2025-08-03T13:29:10.196491", "galaxy_version": "24.1", "external_id": "gxy-4bxrj", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/c/0/4/dataset_c0496ccf-4f26-405a-a603-cc85a46c36d5.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' && ln -f -s '/galaxy/server/database/objects/0/5/3/dataset_05365a55-e9ae-4c9f-b40c-803e7297c9f1.dat' 'bwa-mem-fastq2_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    -A 'AGATCGGAAGAGC'  --pair-adapters  --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o 'out1.fq.gz' -p 'out2.fq.gz'  'bwa-mem-fastq1_fq_gz.fq.gz' 'bwa-mem-fastq2_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 96, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 97, \"src\": \"hda\"}]}, \"pair_adapters\": true, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters2\": [], \"front_adapters2\": []}, \"type\": \"paired\"}"}, "inputs": {"library|input_1": {"id": "539e0e7ce3543747", "src": "hda", "uuid": "c0496ccf-4f26-405a-a603-cc85a46c36d5"}, "library|input_2": {"id": "3de66a2082a80daf", "src": "hda", "uuid": "05365a55-e9ae-4c9f-b40c-803e7297c9f1"}}, "outputs": {"out1": {"id": "9435266d50b55de8", "src": "hda", "uuid": "50e0bf5d-a74c-4df9-bf71-e1a20d9551b5"}, "out2": {"id": "86a503c24fc6a830", "src": "hda", "uuid": "92e874b6-cc8e-48e5-8bfd-120f34e74ec0"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.179 s (1810.539 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       1 (1.0%)\n  Read 2 with adapter:                       1 (1.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,692 bp (100.0%)\n  Read 1:        24,846 bp\n  Read 2:        24,846 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 8 cores ...\nFinished in 0.179 s (1810.539 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       1 (1.0%)\n  Read 2 with adapter:                       1 (1.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,692 bp (100.0%)\n  Read 1:        24,846 bp\n  Read 2:        24,846 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "cutadapt/4.9+galaxy1-7", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 7, "time_seconds": 39.83084750175476, "inputs": {"library|input_1": {"src": "hda", "id": "fece739a01b97b65"}, "library|r1|adapters_0|adapter_source|adapter": "AAAGATG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "output_selector": ["rest_file", "json_stats"]}, "job": {"model_class": "Job", "id": "9435266d50b55de8", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:29:30.323656", "update_time": "2025-08-03T13:29:44.294186", "galaxy_version": "24.1", "external_id": "gxy-w4ww8", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/2/c/5/dataset_2c5ff1bd-d5c6-4f46-bb31-f8bd32e25a25.dat' 'cutadapt_rest_fa.fa' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AAAGATG'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      --json=stats.json -r='rest_output.fa' -o 'out1.fa'  'cutadapt_rest_fa.fa'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "[\"rest_file\", \"json_stats\"]", "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 100, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AAAGATG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "fece739a01b97b65", "src": "hda", "uuid": "2c5ff1bd-d5c6-4f46-bb31-f8bd32e25a25"}}, "outputs": {"out1": {"id": "e5b1361faa6cc9c9", "src": "hda", "uuid": "13de6911-de0b-41bd-8a48-875c0a3e4b85"}, "rest_output": {"id": "871b4a391700d15a", "src": "hda", "uuid": "9e791e23-b59f-4405-8ac7-350a9d0db35e"}, "json_stats": {"id": "47f0b5ad3ecad825", "src": "hda", "uuid": "8c9f9b22-97d1-4d19-9a33-e32ab46349fc"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.049 s (9829.617 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       5\nReads with adapters:                         5 (100.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             5 (100.0%)\n\nTotal basepairs processed:            97 bp\nTotal written (filtered):             35 bp (36.1%)\n\n=== Adapter 1 ===\n\nSequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n7\t1\t0.0\t0\t1\n12\t1\t0.0\t0\t1\n14\t2\t0.0\t0\t2\n15\t1\t0.0\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.fa\nProcessing single-end reads on 8 cores ...\nFinished in 0.049 s (9829.617 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       5\nReads with adapters:                         5 (100.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             5 (100.0%)\n\nTotal basepairs processed:            97 bp\nTotal written (filtered):             35 bp (36.1%)\n\n=== Adapter 1 ===\n\nSequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n7\t1\t0.0\t0\t1\n12\t1\t0.0\t0\t1\n14\t2\t0.0\t0\t2\n15\t1\t0.0\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:29:33", "plugin": "core", "name": "end_epoch", "raw_value": "1754227773.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:29:32", "plugin": "core", "name": "start_epoch", "raw_value": "1754227772.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-8", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 8, "time_seconds": 34.0031943321228, "inputs": {"library|input_1": {"src": "hda", "id": "b0a8fce3d941d564"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "other_trimming_options|nextseq_trim": "20"}, "job": {"model_class": "Job", "id": "fece739a01b97b65", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:30:09.929054", "update_time": "2025-08-03T13:30:24.014892", "galaxy_version": "24.1", "external_id": "gxy-485vn", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/2/0/2/dataset_202372c2-ce8f-444f-8983-4161d3c00051.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim   --nextseq-trim=20       --minimum-length=1      -o 'out1.fq.gz'  'bwa-mem-fastq1_fq_gz.fq.gz'", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"20\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 104, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "b0a8fce3d941d564", "src": "hda", "uuid": "202372c2-ce8f-444f-8983-4161d3c00051"}}, "outputs": {"out1": {"id": "bc8eb5cd1051b5d8", "src": "hda", "uuid": "a56d6845-abac-461d-a4b6-d80cc706ed33"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.105 s (1058.152 \u00b5s/read; 0.06 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         4 (4.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     286 bp (1.2%)\nTotal written (filtered):         24,550 bp (98.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 75.0%\n  G: 25.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t3\t1.5\t0\t3\n4\t1\t0.4\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "This is cutadapt 4.9 with Python 3.12.8\nCommand line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 8 cores ...\nFinished in 0.105 s (1058.152 \u00b5s/read; 0.06 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         4 (4.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     286 bp (1.2%)\nTotal written (filtered):         24,550 bp (98.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 75.0%\n  G: 25.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t3\t1.5\t0\t3\n4\t1\t0.4\t0\t1\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:30:11", "plugin": "core", "name": "end_epoch", "raw_value": "1754227811.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:30:11", "plugin": "core", "name": "start_epoch", "raw_value": "1754227811.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.9+galaxy1-9", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.9+galaxy1", "test_index": 9, "time_seconds": 32.72322130203247, "inputs": {"library|input_1": {"src": "hda", "id": "4386aa5317a6c1f3"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "output_selector": ["report", "info_file"]}, "job": {"model_class": "Job", "id": "871b4a391700d15a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:30:43.386015", "update_time": "2025-08-03T13:30:56.230162", "galaxy_version": "24.1", "external_id": "gxy-5gf5l", "handler": null, "job_runner_name": null, "command_line": "ln -f -s '/galaxy/server/database/objects/c/e/e/dataset_cee2af80-48fa-4197-acbf-921e7e7ec061.dat' 'cutadapt_small_fastq.fq' &&  cutadapt  -j=${GALAXY_SLOTS:-4}   -a 'AGATCGGAAGAGC'    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      --info-file='/galaxy/server/database/objects/0/8/4/dataset_0845325c-d645-4be4-a598-dff2fe8f544c.dat' -o 'out1.fq'  'cutadapt_small_fastq.fq'  > report.txt", "user_email": "tests@fake.org", "command_version": "4.9", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "[\"report\", \"info_file\"]", "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}", "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}", "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 106, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"library|input_1": {"id": "4386aa5317a6c1f3", "src": "hda", "uuid": "cee2af80-48fa-4197-acbf-921e7e7ec061"}}, "outputs": {"out1": {"id": "ade45e1b6769beb6", "src": "hda", "uuid": "f8371f00-1649-4694-be24-359868a1cfda"}, "report": {"id": "d3fb06f7f826512b", "src": "hda", "uuid": "1febbe80-63c1-4db6-a902-fb9b26066005"}, "info_file": {"id": "175bcf8c62cecf96", "src": "hda", "uuid": "0845325c-d645-4be4-a598-dff2fe8f544c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:30:45", "plugin": "core", "name": "end_epoch", "raw_value": "1754227845.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:30:45", "plugin": "core", "name": "start_epoch", "raw_value": "1754227845.0000000"}, {"title": "Memory Allocated (MB)", "value": "30064", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "30064.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "deeptools_bigwig_compare/3.5.4+galaxy0-0", "has_data": true, "data": {"tool_id": "deeptools_bigwig_compare", "tool_version": "3.5.4+galaxy0", "test_index": 0, "time_seconds": 53.08083128929138, "inputs": {"bigwigFile1": {"src": "hda", "id": "7ee745adf7267eae"}, "bigwigFile2": {"src": "hda", "id": "7ee745adf7267eae"}, "comparison|comparison_select": "ratio", "outFileFormat": "bigwig", "advancedOpt|showAdvancedOpt": "no"}, "job": {"model_class": "Job", "id": "29a3214a2873bb35", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_bigwig_compare/deeptools_bigwig_compare/3.5.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:04:20.630969", "update_time": "2025-08-03T14:04:54.387753", "galaxy_version": "24.1", "external_id": "gxy-thpqb", "handler": null, "job_runner_name": null, "command_line": "bigwigCompare --numberOfProcessors \"${GALAXY_SLOTS:-4}\" --bigwig1 '/galaxy/server/database/objects/d/c/c/dataset_dcc6e722-562c-4666-9d63-0e8dce60ed84.dat' --bigwig2 '/galaxy/server/database/objects/d/c/c/dataset_dcc6e722-562c-4666-9d63-0e8dce60ed84.dat'  --outFileName '/galaxy/server/database/objects/2/3/d/dataset_23d0b39e-a131-4281-ae7c-af61cae86a30.dat' --outFileFormat 'bigwig'  --operation ratio  --pseudocount 1 1", "user_email": "tests@fake.org", "command_version": "bigwigCompare 3.5.4", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "region": "\"\"", "outFileFormat": "\"bigwig\"", "comparison": "{\"__current_case__\": 1, \"comparison_select\": \"ratio\", \"pseudocount\": \"1 1\"}"}, "inputs": {"bigwigFile1": {"id": "7ee745adf7267eae", "src": "hda", "uuid": "dcc6e722-562c-4666-9d63-0e8dce60ed84"}, "bigwigFile2": {"id": "7ee745adf7267eae", "src": "hda", "uuid": "dcc6e722-562c-4666-9d63-0e8dce60ed84"}}, "outputs": {"outFileName": {"id": "1d38d04bcca36fc6", "src": "hda", "uuid": "23d0b39e-a131-4281-ae7c-af61cae86a30"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:04:39", "plugin": "core", "name": "end_epoch", "raw_value": "1754229879.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:04:38", "plugin": "core", "name": "start_epoch", "raw_value": "1754229878.0000000"}, {"title": "Memory Allocated (MB)", "value": "25769", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "25769.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "deeptools_bigwig_compare/3.5.4+galaxy0-1", "has_data": true, "data": {"tool_id": "deeptools_bigwig_compare", "tool_version": "3.5.4+galaxy0", "test_index": 1, "time_seconds": 59.83657193183899, "inputs": {"bigwigFile1": {"src": "hda", "id": "383362c4c86e32c5"}, "bigwigFile2": {"src": "hda", "id": "383362c4c86e32c5"}, "comparison|comparison_select": "ratio", "outFileFormat": "bedgraph", "advancedOpt|showAdvancedOpt": "no"}, "job": {"model_class": "Job", "id": "b47529a48fba3c72", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_bigwig_compare/deeptools_bigwig_compare/3.5.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:05:14.073952", "update_time": "2025-08-03T14:05:54.066666", "galaxy_version": "24.1", "external_id": "gxy-7rxm6", "handler": null, "job_runner_name": null, "command_line": "bigwigCompare --numberOfProcessors \"${GALAXY_SLOTS:-4}\" --bigwig1 '/galaxy/server/database/objects/1/a/9/dataset_1a958cc3-1e8d-4f05-a7a4-23d8f6522fcf.dat' --bigwig2 '/galaxy/server/database/objects/1/a/9/dataset_1a958cc3-1e8d-4f05-a7a4-23d8f6522fcf.dat'  --outFileName '/galaxy/server/database/objects/4/6/5/dataset_4654a5df-e76e-49c8-b9ca-947a7457a233.dat' --outFileFormat 'bedgraph'  --operation ratio  --pseudocount 1 1", "user_email": "tests@fake.org", "command_version": "bigwigCompare 3.5.4", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "region": "\"\"", "outFileFormat": "\"bedgraph\"", "comparison": "{\"__current_case__\": 1, \"comparison_select\": \"ratio\", \"pseudocount\": \"1 1\"}"}, "inputs": {"bigwigFile1": {"id": "383362c4c86e32c5", "src": "hda", "uuid": "1a958cc3-1e8d-4f05-a7a4-23d8f6522fcf"}, "bigwigFile2": {"id": "383362c4c86e32c5", "src": "hda", "uuid": "1a958cc3-1e8d-4f05-a7a4-23d8f6522fcf"}}, "outputs": {"outFileName": {"id": "2c01434590616e61", "src": "hda", "uuid": "4654a5df-e76e-49c8-b9ca-947a7457a233"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:05:42", "plugin": "core", "name": "end_epoch", "raw_value": "1754229942.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:05:41", "plugin": "core", "name": "start_epoch", "raw_value": "1754229941.0000000"}, {"title": "Memory Allocated (MB)", "value": "25769", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "25769.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-0", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 0, "time_seconds": 119.60132360458374, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "24ad16fd3ea1fbda"}, {"src": "hda", "id": "862ee4a030f0a393"}, {"src": "hda", "id": "bed6b1a11bdfce41"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "2e52bc2e00a2e9ab"}, {"src": "hda", "id": "befd75ef0805c6f9"}, {"src": "hda", "id": "52c825045f6b5b40"}, {"src": "hda", "id": "aa66f1f4eff1e3fc"}], "advanced_options|use_beta_priors": true, "output_options|output_selector": ["normCounts", "normRLog", "normVST"]}, "job": {"model_class": "Job", "id": "5ad96e35c19badfa", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:12:43.934816", "update_time": "2025-08-03T14:13:59.957378", "galaxy_version": "24.1", "external_id": "gxy-t4n2k", "handler": null, "job_runner_name": null, "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/5/6/dataset_e56c2ac9-66b4-4d7b-b7a7-b01624796b0d.dat' -A 0.1 -n '/galaxy/server/database/objects/9/a/5/dataset_9a5a6f56-9327-4b12-8e01-4fa8443e3105.dat' -r '/galaxy/server/database/objects/f/1/e/dataset_f1e02abb-6cdc-402b-8a9d-b7f681e77fc1.dat' -v '/galaxy/server/database/objects/4/f/8/dataset_4f8c4898-47a7-462d-b150-70fd6980bbf7.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/7/c/1/dataset_7c13b3bc-a0ee-465b-9da5-7f67e58dfdc6.dat\", \"/galaxy/server/database/objects/7/f/7/dataset_7f78eedc-10d6-4ba7-b8f3-e9ccb31145fa.dat\", \"/galaxy/server/database/objects/b/3/3/dataset_b33f15d2-5f2c-4a61-b7d8-7d45f253c49e.dat\", \"/galaxy/server/database/objects/f/c/0/dataset_fc043d1d-7b5c-48d0-bd40-fd825b311974.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/f/0/d/dataset_f0d8adc3-0bd7-4306-8ec2-6e903848a9c1.dat\", \"/galaxy/server/database/objects/1/f/b/dataset_1fb9b107-2f86-4705-9df7-b48c001376c3.dat\", \"/galaxy/server/database/objects/5/e/a/dataset_5eaf808f-aab8-484c-85ab-e34978804c66.dat\"]}]]]' -l '{\"dataset_f0d8adc3-0bd7-4306-8ec2-6e903848a9c1.dat\": \"GSM461179_treat_single.counts\", \"dataset_1fb9b107-2f86-4705-9df7-b48c001376c3.dat\": \"GSM461180_treat_paired.counts\", \"dataset_5eaf808f-aab8-484c-85ab-e34978804c66.dat\": \"GSM461181_treat_paired.counts\", \"dataset_7c13b3bc-a0ee-465b-9da5-7f67e58dfdc6.dat\": \"GSM461176_untreat_single.counts\", \"dataset_7f78eedc-10d6-4ba7-b8f3-e9ccb31145fa.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_b33f15d2-5f2c-4a61-b7d8-7d45f253c49e.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_fc043d1d-7b5c-48d0-bd40-fd825b311974.dat\": \"GSM461182_untreat_single.counts\"}' -t 1     -d", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": [\"normCounts\", \"normRLog\", \"normVST\"]}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": true}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 363, \"src\": \"hda\"}, {\"id\": 364, \"src\": \"hda\"}, {\"id\": 365, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 366, \"src\": \"hda\"}, {\"id\": 367, \"src\": \"hda\"}, {\"id\": 368, \"src\": \"hda\"}, {\"id\": 369, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "24ad16fd3ea1fbda", "src": "hda", "uuid": "f0d8adc3-0bd7-4306-8ec2-6e903848a9c1"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "24ad16fd3ea1fbda", "src": "hda", "uuid": "f0d8adc3-0bd7-4306-8ec2-6e903848a9c1"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "862ee4a030f0a393", "src": "hda", "uuid": "1fb9b107-2f86-4705-9df7-b48c001376c3"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "bed6b1a11bdfce41", "src": "hda", "uuid": "5eaf808f-aab8-484c-85ab-e34978804c66"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "2e52bc2e00a2e9ab", "src": "hda", "uuid": "7c13b3bc-a0ee-465b-9da5-7f67e58dfdc6"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "2e52bc2e00a2e9ab", "src": "hda", "uuid": "7c13b3bc-a0ee-465b-9da5-7f67e58dfdc6"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "befd75ef0805c6f9", "src": "hda", "uuid": "7f78eedc-10d6-4ba7-b8f3-e9ccb31145fa"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "52c825045f6b5b40", "src": "hda", "uuid": "b33f15d2-5f2c-4a61-b7d8-7d45f253c49e"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "aa66f1f4eff1e3fc", "src": "hda", "uuid": "fc043d1d-7b5c-48d0-bd40-fd825b311974"}}, "outputs": {"vst_out": {"id": "9d76ed6ef763b8fd", "src": "hda", "uuid": "4f8c4898-47a7-462d-b150-70fd6980bbf7"}, "rlog_out": {"id": "f994e0ff6b646bea", "src": "hda", "uuid": "f1e02abb-6cdc-402b-8a9d-b7f681e77fc1"}, "counts_out": {"id": "594b6b216d2706e7", "src": "hda", "uuid": "9a5a6f56-9327-4b12-8e01-4fa8443e3105"}, "deseq_out": {"id": "72e1c091ece08cba", "src": "hda", "uuid": "e56c2ac9-66b4-4d7b-b7a7-b01624796b0d"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 148, 4.3%\nLFC < 0 (down)     : 152, 4.4%\noutliers [1]       : 2, 0.058%\nlow counts [2]     : 659, 19%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.21                gplots_3.1.3               \n [3] RColorBrewer_1.1-3          DESeq2_1.40.2              \n [5] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] Matrix_1.6-0            fansi_1.0.4             scales_1.2.1           \n[13] codetools_0.2-19        cli_3.6.1               rlang_1.1.1            \n[16] crayon_1.5.2            XVector_0.40.0          munsell_0.5.0          \n[19] DelayedArray_0.26.6     S4Arrays_1.0.4          parallel_4.3.1         \n[22] BiocParallel_1.34.2     dplyr_1.1.2             colorspace_2.1-0       \n[25] ggplot2_3.4.2           locfit_1.5-9.8          GenomeInfoDbData_1.2.10\n[28] vctrs_0.6.3             R6_2.5.1                lifecycle_1.0.3        \n[31] zlibbioc_1.46.0         pkgconfig_2.0.3         pillar_1.9.0           \n[34] gtable_0.3.3            glue_1.6.2              Rcpp_1.0.11            \n[37] tibble_3.2.1            tidyselect_1.2.0        compiler_4.3.1         \n[40] RCurl_1.98-1.12        \n", "tool_stderr": "estimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 148, 4.3%\nLFC < 0 (down)     : 152, 4.4%\noutliers [1]       : 2, 0.058%\nlow counts [2]     : 659, 19%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.21                gplots_3.1.3               \n [3] RColorBrewer_1.1-3          DESeq2_1.40.2              \n [5] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] Matrix_1.6-0            fansi_1.0.4             scales_1.2.1           \n[13] codetools_0.2-19        cli_3.6.1               rlang_1.1.1            \n[16] crayon_1.5.2            XVector_0.40.0          munsell_0.5.0          \n[19] DelayedArray_0.26.6     S4Arrays_1.0.4          parallel_4.3.1         \n[22] BiocParallel_1.34.2     dplyr_1.1.2             colorspace_2.1-0       \n[25] ggplot2_3.4.2           locfit_1.5-9.8          GenomeInfoDbData_1.2.10\n[28] vctrs_0.6.3             R6_2.5.1                lifecycle_1.0.3        \n[31] zlibbioc_1.46.0         pkgconfig_2.0.3         pillar_1.9.0           \n[34] gtable_0.3.3            glue_1.6.2              Rcpp_1.0.11            \n[37] tibble_3.2.1            tidyselect_1.2.0        compiler_4.3.1         \n[40] RCurl_1.98-1.12        \n", "stderr": "estimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:13:40", "plugin": "core", "name": "end_epoch", "raw_value": "1754230420.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:13:21", "plugin": "core", "name": "start_epoch", "raw_value": "1754230401.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-1", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 1, "time_seconds": 32.40919852256775, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "deseq2/2.11.40.8+galaxy0-10", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 10, "time_seconds": 75.23604989051819, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "3e7f5ed597737fcf"}, {"src": "hda", "id": "4fdfaf5fbdb2bb08"}, {"src": "hda", "id": "6cd5b06d1e7f3b62"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "d9db0b0a78d726db"}, {"src": "hda", "id": "c737d2217fbd0bbc"}, {"src": "hda", "id": "ab1c1ad670467cd9"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "793b582e96bb3825"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "output_options|output_selector": "sizefactors", "output_options|alpha_ma": "0.05"}, "job": {"model_class": "Job", "id": "594b6b216d2706e7", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:22:23.521694", "update_time": "2025-08-03T14:22:56.704130", "galaxy_version": "24.1", "external_id": "gxy-g4lqg", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/3/0/e/dataset_30e5d61f-833c-4c08-b266-ec308e23a739.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/3/0/dataset_9305e06c-1d72-4702-8ffc-596c7cbd0156.dat' -A 0.05 -F '/galaxy/server/database/objects/5/5/e/dataset_55ea70e8-e82a-465b-9288-a6f764204df9.dat'                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/4/c/e/dataset_4ce23aee-015b-45f9-b2cc-d68c12e72e3d.dat\", \"/galaxy/server/database/objects/1/7/e/dataset_17e089df-5b1a-4b2b-8bf3-9879af6fd668.dat\", \"/galaxy/server/database/objects/f/c/2/dataset_fc267bae-8cb7-44fb-8cd2-51a2db868669.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/9/0/4/dataset_904f1ca8-b59a-49d1-841d-e2e3438450df.dat\", \"/galaxy/server/database/objects/4/f/0/dataset_4f0674f3-d1e9-4c36-87e3-58dfbe9e988c.dat\", \"/galaxy/server/database/objects/3/1/2/dataset_31231dcc-2272-4964-9bb7-e4d5dc34ba59.dat\"]}]]]' -l '{\"dataset_904f1ca8-b59a-49d1-841d-e2e3438450df.dat\": \"sailfish_quant.sf1.tab\", \"dataset_4f0674f3-d1e9-4c36-87e3-58dfbe9e988c.dat\": \"sailfish_quant.sf2.tab\", \"dataset_31231dcc-2272-4964-9bb7-e4d5dc34ba59.dat\": \"sailfish_quant.sf3.tab\", \"dataset_4ce23aee-015b-45f9-b2cc-d68c12e72e3d.dat\": \"sailfish_quant.sf4.tab\", \"dataset_17e089df-5b1a-4b2b-8bf3-9879af6fd668.dat\": \"sailfish_quant.sf5.tab\", \"dataset_fc267bae-8cb7-44fb-8cd2-51a2db868669.dat\": \"sailfish_quant.sf6.tab\"}' -t 1       -i -y sailfish -x mapping.gff", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.05\", \"output_selector\": \"sizefactors\"}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": false}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 450, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 444, \"src\": \"hda\"}, {\"id\": 445, \"src\": \"hda\"}, {\"id\": 446, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 447, \"src\": \"hda\"}, {\"id\": 448, \"src\": \"hda\"}, {\"id\": 449, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "3e7f5ed597737fcf", "src": "hda", "uuid": "904f1ca8-b59a-49d1-841d-e2e3438450df"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "3e7f5ed597737fcf", "src": "hda", "uuid": "904f1ca8-b59a-49d1-841d-e2e3438450df"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "4fdfaf5fbdb2bb08", "src": "hda", "uuid": "4f0674f3-d1e9-4c36-87e3-58dfbe9e988c"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "6cd5b06d1e7f3b62", "src": "hda", "uuid": "31231dcc-2272-4964-9bb7-e4d5dc34ba59"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "d9db0b0a78d726db", "src": "hda", "uuid": "4ce23aee-015b-45f9-b2cc-d68c12e72e3d"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "d9db0b0a78d726db", "src": "hda", "uuid": "4ce23aee-015b-45f9-b2cc-d68c12e72e3d"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "c737d2217fbd0bbc", "src": "hda", "uuid": "17e089df-5b1a-4b2b-8bf3-9879af6fd668"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "ab1c1ad670467cd9", "src": "hda", "uuid": "fc267bae-8cb7-44fb-8cd2-51a2db868669"}, "tximport|mapping_format|gtf_file": {"id": "793b582e96bb3825", "src": "hda", "uuid": "30e5d61f-833c-4c08-b266-ec308e23a739"}}, "outputs": {"sizefactors_out": {"id": "de52191655c4f385", "src": "hda", "uuid": "55ea70e8-e82a-465b-9288-a6f764204df9"}, "deseq_out": {"id": "6b37ebe2cfb2b94e", "src": "hda", "uuid": "9305e06c-1d72-4702-8ffc-596c7cbd0156"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.52.1      AnnotationDbi_1.62.2       \n [3] tximport_1.28.0             rjson_0.2.21               \n [5] gplots_3.1.3                RColorBrewer_1.1-3         \n [7] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              MatrixGenerics_1.12.2      \n[11] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0         dplyr_1.1.2              blob_1.2.4              \n [4] filelock_1.0.2           Biostrings_2.68.1        bitops_1.0-7            \n [7] fastmap_1.1.1            RCurl_1.98-1.12          BiocFileCache_2.8.0     \n[10] GenomicAlignments_1.36.0 XML_3.99-0.14            digest_0.6.33           \n[13] lifecycle_1.0.3          KEGGREST_1.40.0          RSQLite_2.3.1           \n[16] magrittr_2.0.3           compiler_4.3.1           rlang_1.1.1             \n[19] progress_1.2.2           yaml_2.3.7               utf8_1.2.3              \n[22] rtracklayer_1.60.0       prettyunits_1.1.1        S4Arrays_1.0.4          \n[25] bit_4.0.5                curl_5.0.1               DelayedArray_0.26.6     \n[28] xml2_1.3.5               BiocParallel_1.34.2      KernSmooth_2.23-22      \n[31] grid_4.3.1               fansi_1.0.4              caTools_1.18.2          \n[34] colorspace_2.1-0         ggplot2_3.4.2            scales_1.2.1            \n[37] gtools_3.9.4             biomaRt_2.56.1           cli_3.6.1               \n[40] crayon_1.5.2             generics_0.1.3           httr_1.4.6              \n[43] DBI_1.1.3                cachem_1.0.8             stringr_1.5.0           \n[46] zlibbioc_1.46.0          parallel_4.3.1           restfulr_0.0.15         \n[49] XVector_0.40.0           vctrs_0.6.3              Matrix_1.6-0            \n[52] jsonlite_1.8.7           hms_1.1.3                bit64_4.0.5             \n[55] locfit_1.5-9.8           glue_1.6.2               codetools_0.2-19        \n[58] stringi_1.7.12           gtable_0.3.3             BiocIO_1.10.0           \n[61] munsell_0.5.0            tibble_3.2.1             pillar_1.9.0            \n[64] rappdirs_0.3.3           GenomeInfoDbData_1.2.10  R6_2.5.1                \n[67] dbplyr_2.3.3             lattice_0.21-8           Rsamtools_2.16.0        \n[70] png_0.1-8                memoise_2.0.1            Rcpp_1.0.11             \n[73] pkgconfig_2.0.3         \n", "tool_stderr": "Import genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.52.1      AnnotationDbi_1.62.2       \n [3] tximport_1.28.0             rjson_0.2.21               \n [5] gplots_3.1.3                RColorBrewer_1.1-3         \n [7] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              MatrixGenerics_1.12.2      \n[11] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0         dplyr_1.1.2              blob_1.2.4              \n [4] filelock_1.0.2           Biostrings_2.68.1        bitops_1.0-7            \n [7] fastmap_1.1.1            RCurl_1.98-1.12          BiocFileCache_2.8.0     \n[10] GenomicAlignments_1.36.0 XML_3.99-0.14            digest_0.6.33           \n[13] lifecycle_1.0.3          KEGGREST_1.40.0          RSQLite_2.3.1           \n[16] magrittr_2.0.3           compiler_4.3.1           rlang_1.1.1             \n[19] progress_1.2.2           yaml_2.3.7               utf8_1.2.3              \n[22] rtracklayer_1.60.0       prettyunits_1.1.1        S4Arrays_1.0.4          \n[25] bit_4.0.5                curl_5.0.1               DelayedArray_0.26.6     \n[28] xml2_1.3.5               BiocParallel_1.34.2      KernSmooth_2.23-22      \n[31] grid_4.3.1               fansi_1.0.4              caTools_1.18.2          \n[34] colorspace_2.1-0         ggplot2_3.4.2            scales_1.2.1            \n[37] gtools_3.9.4             biomaRt_2.56.1           cli_3.6.1               \n[40] crayon_1.5.2             generics_0.1.3           httr_1.4.6              \n[43] DBI_1.1.3                cachem_1.0.8             stringr_1.5.0           \n[46] zlibbioc_1.46.0          parallel_4.3.1           restfulr_0.0.15         \n[49] XVector_0.40.0           vctrs_0.6.3              Matrix_1.6-0            \n[52] jsonlite_1.8.7           hms_1.1.3                bit64_4.0.5             \n[55] locfit_1.5-9.8           glue_1.6.2               codetools_0.2-19        \n[58] stringi_1.7.12           gtable_0.3.3             BiocIO_1.10.0           \n[61] munsell_0.5.0            tibble_3.2.1             pillar_1.9.0            \n[64] rappdirs_0.3.3           GenomeInfoDbData_1.2.10  R6_2.5.1                \n[67] dbplyr_2.3.3             lattice_0.21-8           Rsamtools_2.16.0        \n[70] png_0.1-8                memoise_2.0.1            Rcpp_1.0.11             \n[73] pkgconfig_2.0.3         \n", "stderr": "Import genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:22:46", "plugin": "core", "name": "end_epoch", "raw_value": "1754230966.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:22:27", "plugin": "core", "name": "start_epoch", "raw_value": "1754230947.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-11", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 11, "time_seconds": 30.97076416015625, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "deseq2/2.11.40.8+galaxy0-12", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 12, "time_seconds": 74.91336679458618, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "20254e959a6b3287"}, {"src": "hda", "id": "df5f02927981462e"}, {"src": "hda", "id": "3eca21875dc255fa"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "f4d981541f33a6a7"}, {"src": "hda", "id": "c0d90d0cf3277da1"}, {"src": "hda", "id": "f41096ec2ac169d3"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "59f54b5e12a29506"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "output_options|output_selector": "sizefactors", "output_options|alpha_ma": "0.05"}, "job": {"model_class": "Job", "id": "73f5503749cf9665", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:24:10.518379", "update_time": "2025-08-03T14:24:42.846086", "galaxy_version": "24.1", "external_id": "gxy-tprd8", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/b/6/f/dataset_b6fc8d77-be3a-4f2b-b7bf-8f7b00747df6.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/a/2/8/dataset_a284d846-b58a-4ce3-8879-ea4b1d756377.dat' -A 0.05 -F '/galaxy/server/database/objects/3/b/b/dataset_3bb3e324-2e2b-4e8e-bd66-191f809518fb.dat'                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/7/3/7/dataset_737acfe2-9875-4df0-8d62-e6bedb59573f.dat\", \"/galaxy/server/database/objects/9/3/1/dataset_931f29a2-8a22-4240-99ff-b94ef0721ec7.dat\", \"/galaxy/server/database/objects/4/5/5/dataset_455e2c0d-84f6-40a6-8c73-2afea0bfb4f2.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/5/4/a/dataset_54a13134-96cf-4d3c-89d6-f9e2dbb0a60e.dat\", \"/galaxy/server/database/objects/8/7/f/dataset_87f7985f-edcb-4211-980f-9edcc7e27d03.dat\", \"/galaxy/server/database/objects/4/b/5/dataset_4b55a829-db5e-4d2f-9138-ba2d1a630a3f.dat\"]}]]]' -l '{\"dataset_54a13134-96cf-4d3c-89d6-f9e2dbb0a60e.dat\": \"sailfish_quant.sf1.tab\", \"dataset_87f7985f-edcb-4211-980f-9edcc7e27d03.dat\": \"sailfish_quant.sf2.tab\", \"dataset_4b55a829-db5e-4d2f-9138-ba2d1a630a3f.dat\": \"sailfish_quant.sf3.tab\", \"dataset_737acfe2-9875-4df0-8d62-e6bedb59573f.dat\": \"sailfish_quant.sf4.tab\", \"dataset_931f29a2-8a22-4240-99ff-b94ef0721ec7.dat\": \"sailfish_quant.sf5.tab\", \"dataset_455e2c0d-84f6-40a6-8c73-2afea0bfb4f2.dat\": \"sailfish_quant.sf6.tab\"}' -t 1       -i -y sailfish -x mapping.gff", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.05\", \"output_selector\": \"sizefactors\"}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": false}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 467, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 461, \"src\": \"hda\"}, {\"id\": 462, \"src\": \"hda\"}, {\"id\": 463, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 464, \"src\": \"hda\"}, {\"id\": 465, \"src\": \"hda\"}, {\"id\": 466, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "20254e959a6b3287", "src": "hda", "uuid": "54a13134-96cf-4d3c-89d6-f9e2dbb0a60e"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "20254e959a6b3287", "src": "hda", "uuid": "54a13134-96cf-4d3c-89d6-f9e2dbb0a60e"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "df5f02927981462e", "src": "hda", "uuid": "87f7985f-edcb-4211-980f-9edcc7e27d03"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "3eca21875dc255fa", "src": "hda", "uuid": "4b55a829-db5e-4d2f-9138-ba2d1a630a3f"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "f4d981541f33a6a7", "src": "hda", "uuid": "737acfe2-9875-4df0-8d62-e6bedb59573f"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "f4d981541f33a6a7", "src": "hda", "uuid": "737acfe2-9875-4df0-8d62-e6bedb59573f"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "c0d90d0cf3277da1", "src": "hda", "uuid": "931f29a2-8a22-4240-99ff-b94ef0721ec7"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "f41096ec2ac169d3", "src": "hda", "uuid": "455e2c0d-84f6-40a6-8c73-2afea0bfb4f2"}, "tximport|mapping_format|gtf_file": {"id": "59f54b5e12a29506", "src": "hda", "uuid": "b6fc8d77-be3a-4f2b-b7bf-8f7b00747df6"}}, "outputs": {"sizefactors_out": {"id": "4780d5e226bc7573", "src": "hda", "uuid": "3bb3e324-2e2b-4e8e-bd66-191f809518fb"}, "deseq_out": {"id": "fdf6d9cd82c79945", "src": "hda", "uuid": "a284d846-b58a-4ce3-8879-ea4b1d756377"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.52.1      AnnotationDbi_1.62.2       \n [3] tximport_1.28.0             rjson_0.2.21               \n [5] gplots_3.1.3                RColorBrewer_1.1-3         \n [7] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              MatrixGenerics_1.12.2      \n[11] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0         dplyr_1.1.2              blob_1.2.4              \n [4] filelock_1.0.2           Biostrings_2.68.1        bitops_1.0-7            \n [7] fastmap_1.1.1            RCurl_1.98-1.12          BiocFileCache_2.8.0     \n[10] GenomicAlignments_1.36.0 XML_3.99-0.14            digest_0.6.33           \n[13] lifecycle_1.0.3          KEGGREST_1.40.0          RSQLite_2.3.1           \n[16] magrittr_2.0.3           compiler_4.3.1           rlang_1.1.1             \n[19] progress_1.2.2           yaml_2.3.7               utf8_1.2.3              \n[22] rtracklayer_1.60.0       prettyunits_1.1.1        S4Arrays_1.0.4          \n[25] bit_4.0.5                curl_5.0.1               DelayedArray_0.26.6     \n[28] xml2_1.3.5               BiocParallel_1.34.2      KernSmooth_2.23-22      \n[31] grid_4.3.1               fansi_1.0.4              caTools_1.18.2          \n[34] colorspace_2.1-0         ggplot2_3.4.2            scales_1.2.1            \n[37] gtools_3.9.4             biomaRt_2.56.1           cli_3.6.1               \n[40] crayon_1.5.2             generics_0.1.3           httr_1.4.6              \n[43] DBI_1.1.3                cachem_1.0.8             stringr_1.5.0           \n[46] zlibbioc_1.46.0          parallel_4.3.1           restfulr_0.0.15         \n[49] XVector_0.40.0           vctrs_0.6.3              Matrix_1.6-0            \n[52] jsonlite_1.8.7           hms_1.1.3                bit64_4.0.5             \n[55] locfit_1.5-9.8           glue_1.6.2               codetools_0.2-19        \n[58] stringi_1.7.12           gtable_0.3.3             BiocIO_1.10.0           \n[61] munsell_0.5.0            tibble_3.2.1             pillar_1.9.0            \n[64] rappdirs_0.3.3           GenomeInfoDbData_1.2.10  R6_2.5.1                \n[67] dbplyr_2.3.3             lattice_0.21-8           Rsamtools_2.16.0        \n[70] png_0.1-8                memoise_2.0.1            Rcpp_1.0.11             \n[73] pkgconfig_2.0.3         \n", "tool_stderr": "Import genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.52.1      AnnotationDbi_1.62.2       \n [3] tximport_1.28.0             rjson_0.2.21               \n [5] gplots_3.1.3                RColorBrewer_1.1-3         \n [7] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              MatrixGenerics_1.12.2      \n[11] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0         dplyr_1.1.2              blob_1.2.4              \n [4] filelock_1.0.2           Biostrings_2.68.1        bitops_1.0-7            \n [7] fastmap_1.1.1            RCurl_1.98-1.12          BiocFileCache_2.8.0     \n[10] GenomicAlignments_1.36.0 XML_3.99-0.14            digest_0.6.33           \n[13] lifecycle_1.0.3          KEGGREST_1.40.0          RSQLite_2.3.1           \n[16] magrittr_2.0.3           compiler_4.3.1           rlang_1.1.1             \n[19] progress_1.2.2           yaml_2.3.7               utf8_1.2.3              \n[22] rtracklayer_1.60.0       prettyunits_1.1.1        S4Arrays_1.0.4          \n[25] bit_4.0.5                curl_5.0.1               DelayedArray_0.26.6     \n[28] xml2_1.3.5               BiocParallel_1.34.2      KernSmooth_2.23-22      \n[31] grid_4.3.1               fansi_1.0.4              caTools_1.18.2          \n[34] colorspace_2.1-0         ggplot2_3.4.2            scales_1.2.1            \n[37] gtools_3.9.4             biomaRt_2.56.1           cli_3.6.1               \n[40] crayon_1.5.2             generics_0.1.3           httr_1.4.6              \n[43] DBI_1.1.3                cachem_1.0.8             stringr_1.5.0           \n[46] zlibbioc_1.46.0          parallel_4.3.1           restfulr_0.0.15         \n[49] XVector_0.40.0           vctrs_0.6.3              Matrix_1.6-0            \n[52] jsonlite_1.8.7           hms_1.1.3                bit64_4.0.5             \n[55] locfit_1.5-9.8           glue_1.6.2               codetools_0.2-19        \n[58] stringi_1.7.12           gtable_0.3.3             BiocIO_1.10.0           \n[61] munsell_0.5.0            tibble_3.2.1             pillar_1.9.0            \n[64] rappdirs_0.3.3           GenomeInfoDbData_1.2.10  R6_2.5.1                \n[67] dbplyr_2.3.3             lattice_0.21-8           Rsamtools_2.16.0        \n[70] png_0.1-8                memoise_2.0.1            Rcpp_1.0.11             \n[73] pkgconfig_2.0.3         \n", "stderr": "Import genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "20 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "20.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:24:32", "plugin": "core", "name": "end_epoch", "raw_value": "1754231072.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:24:12", "plugin": "core", "name": "start_epoch", "raw_value": "1754231052.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-13", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 13, "time_seconds": 72.45768284797668, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "112e5dc542af1900"}, {"src": "hda", "id": "bc75dfb9c8fbaa1f"}, {"src": "hda", "id": "434364fc23328682"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "f7c369483c407924"}, {"src": "hda", "id": "49e0aa90ac1af029"}, {"src": "hda", "id": "ab0dcc644c9a33ff"}, {"src": "hda", "id": "32cf3d07ce637f35"}], "advanced_options|prefilter_conditional|prefilter_value": "10", "advanced_options|prefilter_conditional|prefilter": "-P", "output_options|output_selector": "normCounts"}, "job": {"model_class": "Job", "id": "331d38515de6f9cb", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:25:25.906752", "update_time": "2025-08-03T14:25:54.964732", "galaxy_version": "24.1", "external_id": "gxy-8rdcw", "handler": null, "job_runner_name": null, "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/1/b/9/dataset_1b9f0e51-2e38-4896-8f61-f55ba5f29b4d.dat' -A 0.1 -n '/galaxy/server/database/objects/1/5/4/dataset_1541cc5a-0652-4efa-8eab-835998eec02c.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/c/e/5/dataset_ce5c3a08-b351-4e97-bf4d-580c019851e9.dat\", \"/galaxy/server/database/objects/6/b/0/dataset_6b017aa3-7337-4d0c-9f37-b2e2f348656c.dat\", \"/galaxy/server/database/objects/1/8/5/dataset_185c6c94-bdb4-42ba-8e92-1873f82ea179.dat\", \"/galaxy/server/database/objects/6/8/3/dataset_683b430d-5e02-41ee-b075-54ea28483235.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/7/1/e/dataset_71e94a6a-8cfe-4d12-a540-f8453982df5a.dat\", \"/galaxy/server/database/objects/0/a/6/dataset_0a6f4ae5-f9cc-4398-a95c-0638c3f85523.dat\", \"/galaxy/server/database/objects/4/1/a/dataset_41aeac4f-47ad-4435-8de9-93bcf317b591.dat\"]}]]]' -l '{\"dataset_71e94a6a-8cfe-4d12-a540-f8453982df5a.dat\": \"GSM461179_treat_single.counts\", \"dataset_0a6f4ae5-f9cc-4398-a95c-0638c3f85523.dat\": \"GSM461180_treat_paired.counts\", \"dataset_41aeac4f-47ad-4435-8de9-93bcf317b591.dat\": \"GSM461181_treat_paired.counts\", \"dataset_ce5c3a08-b351-4e97-bf4d-580c019851e9.dat\": \"GSM461176_untreat_single.counts\", \"dataset_6b017aa3-7337-4d0c-9f37-b2e2f348656c.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_185c6c94-bdb4-42ba-8e92-1873f82ea179.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_683b430d-5e02-41ee-b075-54ea28483235.dat\": \"GSM461182_untreat_single.counts\"}' -t 1 -P -V 10", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": \"normCounts\"}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 0, \"prefilter\": \"-P\", \"prefilter_value\": \"10\"}, \"use_beta_priors\": false}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 470, \"src\": \"hda\"}, {\"id\": 471, \"src\": \"hda\"}, {\"id\": 472, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 473, \"src\": \"hda\"}, {\"id\": 474, \"src\": \"hda\"}, {\"id\": 475, \"src\": \"hda\"}, {\"id\": 476, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "112e5dc542af1900", "src": "hda", "uuid": "71e94a6a-8cfe-4d12-a540-f8453982df5a"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "112e5dc542af1900", "src": "hda", "uuid": "71e94a6a-8cfe-4d12-a540-f8453982df5a"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "bc75dfb9c8fbaa1f", "src": "hda", "uuid": "0a6f4ae5-f9cc-4398-a95c-0638c3f85523"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "434364fc23328682", "src": "hda", "uuid": "41aeac4f-47ad-4435-8de9-93bcf317b591"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "f7c369483c407924", "src": "hda", "uuid": "ce5c3a08-b351-4e97-bf4d-580c019851e9"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "f7c369483c407924", "src": "hda", "uuid": "ce5c3a08-b351-4e97-bf4d-580c019851e9"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "49e0aa90ac1af029", "src": "hda", "uuid": "6b017aa3-7337-4d0c-9f37-b2e2f348656c"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "ab0dcc644c9a33ff", "src": "hda", "uuid": "185c6c94-bdb4-42ba-8e92-1873f82ea179"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "32cf3d07ce637f35", "src": "hda", "uuid": "683b430d-5e02-41ee-b075-54ea28483235"}}, "outputs": {"counts_out": {"id": "26e9b50a70eecdfb", "src": "hda", "uuid": "1541cc5a-0652-4efa-8eab-835998eec02c"}, "deseq_out": {"id": "09d49099bfc9c499", "src": "hda", "uuid": "1b9f0e51-2e38-4896-8f61-f55ba5f29b4d"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 2921 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 149, 5.1%\nLFC < 0 (down)     : 155, 5.3%\noutliers [1]       : 2, 0.068%\nlow counts [2]     : 170, 5.8%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.21                gplots_3.1.3               \n [3] RColorBrewer_1.1-3          DESeq2_1.40.2              \n [5] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] Matrix_1.6-0            fansi_1.0.4             scales_1.2.1           \n[13] codetools_0.2-19        cli_3.6.1               rlang_1.1.1            \n[16] crayon_1.5.2            XVector_0.40.0          munsell_0.5.0          \n[19] DelayedArray_0.26.6     S4Arrays_1.0.4          parallel_4.3.1         \n[22] BiocParallel_1.34.2     dplyr_1.1.2             colorspace_2.1-0       \n[25] ggplot2_3.4.2           locfit_1.5-9.8          GenomeInfoDbData_1.2.10\n[28] vctrs_0.6.3             R6_2.5.1                lifecycle_1.0.3        \n[31] zlibbioc_1.46.0         pkgconfig_2.0.3         pillar_1.9.0           \n[34] gtable_0.3.3            glue_1.6.2              Rcpp_1.0.11            \n[37] tibble_3.2.1            tidyselect_1.2.0        compiler_4.3.1         \n[40] RCurl_1.98-1.12        \n", "tool_stderr": "estimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 2921 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 149, 5.1%\nLFC < 0 (down)     : 155, 5.3%\noutliers [1]       : 2, 0.068%\nlow counts [2]     : 170, 5.8%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.21                gplots_3.1.3               \n [3] RColorBrewer_1.1-3          DESeq2_1.40.2              \n [5] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] Matrix_1.6-0            fansi_1.0.4             scales_1.2.1           \n[13] codetools_0.2-19        cli_3.6.1               rlang_1.1.1            \n[16] crayon_1.5.2            XVector_0.40.0          munsell_0.5.0          \n[19] DelayedArray_0.26.6     S4Arrays_1.0.4          parallel_4.3.1         \n[22] BiocParallel_1.34.2     dplyr_1.1.2             colorspace_2.1-0       \n[25] ggplot2_3.4.2           locfit_1.5-9.8          GenomeInfoDbData_1.2.10\n[28] vctrs_0.6.3             R6_2.5.1                lifecycle_1.0.3        \n[31] zlibbioc_1.46.0         pkgconfig_2.0.3         pillar_1.9.0           \n[34] gtable_0.3.3            glue_1.6.2              Rcpp_1.0.11            \n[37] tibble_3.2.1            tidyselect_1.2.0        compiler_4.3.1         \n[40] RCurl_1.98-1.12        \n", "stderr": "estimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "15 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "15.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:25:43", "plugin": "core", "name": "end_epoch", "raw_value": "1754231143.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:25:28", "plugin": "core", "name": "start_epoch", "raw_value": "1754231128.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-2", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 2, "time_seconds": 77.90744376182556, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "569cf92df3929191"}, {"src": "hda", "id": "b485aa8c21bfde6f"}, {"src": "hda", "id": "a26910761711e4bb"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "e913a092117d2eef"}, {"src": "hda", "id": "f63a378c8373fd81"}, {"src": "hda", "id": "73f5503749cf9665"}, {"src": "hda", "id": "0af035515b6bf7f7"}], "batch_factors": {"src": "hda", "id": "9115d5fba9892f65"}, "advanced_options|use_beta_priors": false, "output_options|output_selector": "normCounts"}, "job": {"model_class": "Job", "id": "f841449a1691d100", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:15:21.030026", "update_time": "2025-08-03T14:15:51.456560", "galaxy_version": "24.1", "external_id": "gxy-lz6lk", "handler": null, "job_runner_name": null, "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/e/9/dataset_7e9e99dd-c125-481a-a6ca-882dc0e02cee.dat' -A 0.1 -n '/galaxy/server/database/objects/8/c/1/dataset_8c17d4f1-6e65-45c1-b035-fc4c5a6dd6cf.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/4/8/0/dataset_4806c6e7-88f3-410f-9b51-d4357408279c.dat\", \"/galaxy/server/database/objects/b/5/9/dataset_b596c8e9-a110-495d-b28c-0b187e049ab2.dat\", \"/galaxy/server/database/objects/8/c/d/dataset_8cda6e5e-9c0a-457e-8670-1c0f3010678e.dat\", \"/galaxy/server/database/objects/8/6/7/dataset_8678eb14-b841-40ca-b24a-f2b910fbac8b.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/a/0/0/dataset_a00e7f45-45f2-4dc4-bd4f-d85394c762bb.dat\", \"/galaxy/server/database/objects/6/3/3/dataset_633b4d03-7fc8-4ced-8420-b2387bf65906.dat\", \"/galaxy/server/database/objects/b/c/5/dataset_bc559485-1ce4-4811-86d3-9558cfe70033.dat\"]}]]]' -l '{\"dataset_a00e7f45-45f2-4dc4-bd4f-d85394c762bb.dat\": \"GSM461179_treat_single.counts\", \"dataset_633b4d03-7fc8-4ced-8420-b2387bf65906.dat\": \"GSM461180_treat_paired.counts\", \"dataset_bc559485-1ce4-4811-86d3-9558cfe70033.dat\": \"GSM461181_treat_paired.counts\", \"dataset_4806c6e7-88f3-410f-9b51-d4357408279c.dat\": \"GSM461176_untreat_single.counts\", \"dataset_b596c8e9-a110-495d-b28c-0b187e049ab2.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_8cda6e5e-9c0a-457e-8670-1c0f3010678e.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_8678eb14-b841-40ca-b24a-f2b910fbac8b.dat\": \"GSM461182_untreat_single.counts\"}' -t 1 --batch_factors '/galaxy/server/database/objects/5/3/8/dataset_538d7252-dbf9-420a-8f8b-9d3bd6422d61.dat'", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": \"normCounts\"}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": false}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "true", "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 382, \"src\": \"hda\"}, {\"id\": 383, \"src\": \"hda\"}, {\"id\": 384, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 385, \"src\": \"hda\"}, {\"id\": 386, \"src\": \"hda\"}, {\"id\": 387, \"src\": \"hda\"}, {\"id\": 388, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "569cf92df3929191", "src": "hda", "uuid": "a00e7f45-45f2-4dc4-bd4f-d85394c762bb"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "569cf92df3929191", "src": "hda", "uuid": "a00e7f45-45f2-4dc4-bd4f-d85394c762bb"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "b485aa8c21bfde6f", "src": "hda", "uuid": "633b4d03-7fc8-4ced-8420-b2387bf65906"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "a26910761711e4bb", "src": "hda", "uuid": "bc559485-1ce4-4811-86d3-9558cfe70033"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "e913a092117d2eef", "src": "hda", "uuid": "4806c6e7-88f3-410f-9b51-d4357408279c"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "e913a092117d2eef", "src": "hda", "uuid": "4806c6e7-88f3-410f-9b51-d4357408279c"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "f63a378c8373fd81", "src": "hda", "uuid": "b596c8e9-a110-495d-b28c-0b187e049ab2"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "73f5503749cf9665", "src": "hda", "uuid": "8cda6e5e-9c0a-457e-8670-1c0f3010678e"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "0af035515b6bf7f7", "src": "hda", "uuid": "8678eb14-b841-40ca-b24a-f2b910fbac8b"}, "batch_factors": {"id": "9115d5fba9892f65", "src": "hda", "uuid": "538d7252-dbf9-420a-8f8b-9d3bd6422d61"}}, "outputs": {"counts_out": {"id": "b590024b8272c0e9", "src": "hda", "uuid": "8c17d4f1-6e65-45c1-b035-fc4c5a6dd6cf"}, "deseq_out": {"id": "e4d24e2b27ce5ed9", "src": "hda", "uuid": "7e9e99dd-c125-481a-a6ca-882dc0e02cee"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~W_1 + Treatment\n\n\n7 samples with counts over 3999 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 177, 5.2%\nLFC < 0 (down)     : 206, 6%\noutliers [1]       : 0, 0%\nlow counts [2]     : 725, 21%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.21                gplots_3.1.3               \n [3] RColorBrewer_1.1-3          DESeq2_1.40.2              \n [5] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] Matrix_1.6-0            fansi_1.0.4             scales_1.2.1           \n[13] codetools_0.2-19        cli_3.6.1               rlang_1.1.1            \n[16] crayon_1.5.2            XVector_0.40.0          munsell_0.5.0          \n[19] DelayedArray_0.26.6     S4Arrays_1.0.4          parallel_4.3.1         \n[22] BiocParallel_1.34.2     dplyr_1.1.2             colorspace_2.1-0       \n[25] ggplot2_3.4.2           locfit_1.5-9.8          GenomeInfoDbData_1.2.10\n[28] vctrs_0.6.3             R6_2.5.1                lifecycle_1.0.3        \n[31] zlibbioc_1.46.0         pkgconfig_2.0.3         pillar_1.9.0           \n[34] gtable_0.3.3            glue_1.6.2              Rcpp_1.0.11            \n[37] tibble_3.2.1            tidyselect_1.2.0        compiler_4.3.1         \n[40] RCurl_1.98-1.12        \n", "tool_stderr": "estimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~W_1 + Treatment\n\n\n7 samples with counts over 3999 genes\nApplied default - beta prior off\n[1] \"use_beta_prior is set to FALSE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 177, 5.2%\nLFC < 0 (down)     : 206, 6%\noutliers [1]       : 0, 0%\nlow counts [2]     : 725, 21%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.21                gplots_3.1.3               \n [3] RColorBrewer_1.1-3          DESeq2_1.40.2              \n [5] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] Matrix_1.6-0            fansi_1.0.4             scales_1.2.1           \n[13] codetools_0.2-19        cli_3.6.1               rlang_1.1.1            \n[16] crayon_1.5.2            XVector_0.40.0          munsell_0.5.0          \n[19] DelayedArray_0.26.6     S4Arrays_1.0.4          parallel_4.3.1         \n[22] BiocParallel_1.34.2     dplyr_1.1.2             colorspace_2.1-0       \n[25] ggplot2_3.4.2           locfit_1.5-9.8          GenomeInfoDbData_1.2.10\n[28] vctrs_0.6.3             R6_2.5.1                lifecycle_1.0.3        \n[31] zlibbioc_1.46.0         pkgconfig_2.0.3         pillar_1.9.0           \n[34] gtable_0.3.3            glue_1.6.2              Rcpp_1.0.11            \n[37] tibble_3.2.1            tidyselect_1.2.0        compiler_4.3.1         \n[40] RCurl_1.98-1.12        \n", "stderr": "estimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "16 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "16.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:15:39", "plugin": "core", "name": "end_epoch", "raw_value": "1754230539.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:15:23", "plugin": "core", "name": "start_epoch", "raw_value": "1754230523.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-3", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 3, "time_seconds": 40.195064067840576, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "deseq2/2.11.40.8+galaxy0-4", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 4, "time_seconds": 71.47188925743103, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "e0667d7899150507"}, {"src": "hda", "id": "aa2ee63d20e28757"}, {"src": "hda", "id": "abbb7effad9d3b11"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "6543a00330cfb69a"}, {"src": "hda", "id": "c60eaca4a237f2ee"}, {"src": "hda", "id": "fe25e5f01c9e7a7a"}], "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "76036dc7158f051c"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "advanced_options|use_beta_priors": true, "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "8d629ed78320417a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:17:14.684711", "update_time": "2025-08-03T14:17:43.487130", "galaxy_version": "24.1", "external_id": "gxy-958ff", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/1/5/5/dataset_155c1ddd-fad6-4c60-b469-57d3c928286d.dat' mapping.txt &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/3/5/dataset_e354b54f-c16e-48a3-b1cb-4937872ea366.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/d/a/d/dataset_dadb2a5a-484e-42bd-9fd4-24368a7acbf6.dat\", \"/galaxy/server/database/objects/9/6/d/dataset_96d08100-6f57-4496-8009-9e405a2546da.dat\", \"/galaxy/server/database/objects/f/6/0/dataset_f6007a75-9755-4b59-abef-7694906ce7d1.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/1/c/6/dataset_1c640afb-c75d-4296-91da-b7e0884a258a.dat\", \"/galaxy/server/database/objects/9/b/d/dataset_9bd64c9c-5813-4976-ac60-91e92bf08371.dat\", \"/galaxy/server/database/objects/9/8/b/dataset_98bcc644-a8f0-4954-8c64-d5a33d687eef.dat\"]}]]]' -l '{\"dataset_1c640afb-c75d-4296-91da-b7e0884a258a.dat\": \"sailfish_quant.sf1.tab\", \"dataset_9bd64c9c-5813-4976-ac60-91e92bf08371.dat\": \"sailfish_quant.sf2.tab\", \"dataset_98bcc644-a8f0-4954-8c64-d5a33d687eef.dat\": \"sailfish_quant.sf3.tab\", \"dataset_dadb2a5a-484e-42bd-9fd4-24368a7acbf6.dat\": \"sailfish_quant.sf4.tab\", \"dataset_96d08100-6f57-4496-8009-9e405a2546da.dat\": \"sailfish_quant.sf5.tab\", \"dataset_f6007a75-9755-4b59-abef-7694906ce7d1.dat\": \"sailfish_quant.sf6.tab\"}' -t 1     -d  -i -y sailfish -x mapping.txt", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": true}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 1, \"mapping_format_selector\": \"tabular\", \"tabular_file\": {\"values\": [{\"id\": 405, \"src\": \"hda\"}]}}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 399, \"src\": \"hda\"}, {\"id\": 400, \"src\": \"hda\"}, {\"id\": 401, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 402, \"src\": \"hda\"}, {\"id\": 403, \"src\": \"hda\"}, {\"id\": 404, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "e0667d7899150507", "src": "hda", "uuid": "1c640afb-c75d-4296-91da-b7e0884a258a"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "e0667d7899150507", "src": "hda", "uuid": "1c640afb-c75d-4296-91da-b7e0884a258a"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "aa2ee63d20e28757", "src": "hda", "uuid": "9bd64c9c-5813-4976-ac60-91e92bf08371"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "abbb7effad9d3b11", "src": "hda", "uuid": "98bcc644-a8f0-4954-8c64-d5a33d687eef"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "6543a00330cfb69a", "src": "hda", "uuid": "dadb2a5a-484e-42bd-9fd4-24368a7acbf6"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "6543a00330cfb69a", "src": "hda", "uuid": "dadb2a5a-484e-42bd-9fd4-24368a7acbf6"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "c60eaca4a237f2ee", "src": "hda", "uuid": "96d08100-6f57-4496-8009-9e405a2546da"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "fe25e5f01c9e7a7a", "src": "hda", "uuid": "f6007a75-9755-4b59-abef-7694906ce7d1"}, "tximport|mapping_format|tabular_file": {"id": "76036dc7158f051c", "src": "hda", "uuid": "155c1ddd-fad6-4c60-b469-57d3c928286d"}}, "outputs": {"deseq_out": {"id": "ce05036015f894ca", "src": "hda", "uuid": "e354b54f-c16e-48a3-b1cb-4937872ea366"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.28.0             rjson_0.2.21               \n [3] gplots_3.1.3                RColorBrewer_1.1-3         \n [5] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [7] Biobase_2.60.0              MatrixGenerics_1.12.2      \n [9] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] jsonlite_1.8.7          Matrix_1.6-0            fansi_1.0.4            \n[13] scales_1.2.1            codetools_0.2-19        cli_3.6.1              \n[16] rlang_1.1.1             crayon_1.5.2            XVector_0.40.0         \n[19] munsell_0.5.0           DelayedArray_0.26.6     S4Arrays_1.0.4         \n[22] parallel_4.3.1          BiocParallel_1.34.2     dplyr_1.1.2            \n[25] colorspace_2.1-0        ggplot2_3.4.2           locfit_1.5-9.8         \n[28] GenomeInfoDbData_1.2.10 vctrs_0.6.3             R6_2.5.1               \n[31] lifecycle_1.0.3         zlibbioc_1.46.0         pkgconfig_2.0.3        \n[34] pillar_1.9.0            gtable_0.3.3            glue_1.6.2             \n[37] Rcpp_1.0.11             tibble_3.2.1            tidyselect_1.2.0       \n[40] compiler_4.3.1          RCurl_1.98-1.12        \n", "tool_stderr": "reading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.28.0             rjson_0.2.21               \n [3] gplots_3.1.3                RColorBrewer_1.1-3         \n [5] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [7] Biobase_2.60.0              MatrixGenerics_1.12.2      \n [9] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] jsonlite_1.8.7          Matrix_1.6-0            fansi_1.0.4            \n[13] scales_1.2.1            codetools_0.2-19        cli_3.6.1              \n[16] rlang_1.1.1             crayon_1.5.2            XVector_0.40.0         \n[19] munsell_0.5.0           DelayedArray_0.26.6     S4Arrays_1.0.4         \n[22] parallel_4.3.1          BiocParallel_1.34.2     dplyr_1.1.2            \n[25] colorspace_2.1-0        ggplot2_3.4.2           locfit_1.5-9.8         \n[28] GenomeInfoDbData_1.2.10 vctrs_0.6.3             R6_2.5.1               \n[31] lifecycle_1.0.3         zlibbioc_1.46.0         pkgconfig_2.0.3        \n[34] pillar_1.9.0            gtable_0.3.3            glue_1.6.2             \n[37] Rcpp_1.0.11             tibble_3.2.1            tidyselect_1.2.0       \n[40] compiler_4.3.1          RCurl_1.98-1.12        \n", "stderr": "reading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "15 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "15.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:17:32", "plugin": "core", "name": "end_epoch", "raw_value": "1754230652.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:17:17", "plugin": "core", "name": "start_epoch", "raw_value": "1754230637.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-5", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 5, "time_seconds": 30.535562992095947, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "deseq2/2.11.40.8+galaxy0-6", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 6, "time_seconds": 76.98636484146118, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "ae74547c3bc6a088"}, {"src": "hda", "id": "8f9c6c4030f9d87f"}, {"src": "hda", "id": "152bb751e0c20b0c"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "c8d7a209f4e0d3c8"}, {"src": "hda", "id": "c51aea264e51e9b7"}, {"src": "hda", "id": "7839ce2921652e5f"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "5022212d5648ecc9"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "advanced_options|use_beta_priors": true, "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "ccdb9d8033408a5a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:18:57.009062", "update_time": "2025-08-03T14:19:30.850884", "galaxy_version": "24.1", "external_id": "gxy-xhrfw", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/7/d/5/dataset_7d59b9dd-3e72-44fb-a4d2-9e317d45118c.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/c/f/dataset_2cf181d2-dc66-4948-a14f-d9782ba72aa9.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/0/0/d/dataset_00d5b5ce-735e-46e3-a2c9-0450bc008d8c.dat\", \"/galaxy/server/database/objects/3/c/c/dataset_3cc4075c-67d8-4cce-bd7a-c7b017b4d303.dat\", \"/galaxy/server/database/objects/1/2/2/dataset_1229d296-6fb1-48b4-b4d4-a4caa4882e49.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/3/5/3/dataset_353ed5f9-6017-424a-9cc5-07f867abc983.dat\", \"/galaxy/server/database/objects/f/a/4/dataset_fa4cf990-6f34-4f66-95d4-b1eb3a7c1aa9.dat\", \"/galaxy/server/database/objects/f/1/e/dataset_f1e2d064-14db-439d-83d6-12fd64a03586.dat\"]}]]]' -l '{\"dataset_353ed5f9-6017-424a-9cc5-07f867abc983.dat\": \"sailfish_quant.sf1.tab\", \"dataset_fa4cf990-6f34-4f66-95d4-b1eb3a7c1aa9.dat\": \"sailfish_quant.sf2.tab\", \"dataset_f1e2d064-14db-439d-83d6-12fd64a03586.dat\": \"sailfish_quant.sf3.tab\", \"dataset_00d5b5ce-735e-46e3-a2c9-0450bc008d8c.dat\": \"sailfish_quant.sf4.tab\", \"dataset_3cc4075c-67d8-4cce-bd7a-c7b017b4d303.dat\": \"sailfish_quant.sf5.tab\", \"dataset_1229d296-6fb1-48b4-b4d4-a4caa4882e49.dat\": \"sailfish_quant.sf6.tab\"}' -t 1     -d  -i -y sailfish -x mapping.gff", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": true}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 420, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 414, \"src\": \"hda\"}, {\"id\": 415, \"src\": \"hda\"}, {\"id\": 416, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 417, \"src\": \"hda\"}, {\"id\": 418, \"src\": \"hda\"}, {\"id\": 419, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "ae74547c3bc6a088", "src": "hda", "uuid": "353ed5f9-6017-424a-9cc5-07f867abc983"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "ae74547c3bc6a088", "src": "hda", "uuid": "353ed5f9-6017-424a-9cc5-07f867abc983"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "8f9c6c4030f9d87f", "src": "hda", "uuid": "fa4cf990-6f34-4f66-95d4-b1eb3a7c1aa9"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "152bb751e0c20b0c", "src": "hda", "uuid": "f1e2d064-14db-439d-83d6-12fd64a03586"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "c8d7a209f4e0d3c8", "src": "hda", "uuid": "00d5b5ce-735e-46e3-a2c9-0450bc008d8c"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "c8d7a209f4e0d3c8", "src": "hda", "uuid": "00d5b5ce-735e-46e3-a2c9-0450bc008d8c"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "c51aea264e51e9b7", "src": "hda", "uuid": "3cc4075c-67d8-4cce-bd7a-c7b017b4d303"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "7839ce2921652e5f", "src": "hda", "uuid": "1229d296-6fb1-48b4-b4d4-a4caa4882e49"}, "tximport|mapping_format|gtf_file": {"id": "5022212d5648ecc9", "src": "hda", "uuid": "7d59b9dd-3e72-44fb-a4d2-9e317d45118c"}}, "outputs": {"deseq_out": {"id": "3daf7ae37b7e9b69", "src": "hda", "uuid": "2cf181d2-dc66-4948-a14f-d9782ba72aa9"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.52.1      AnnotationDbi_1.62.2       \n [3] tximport_1.28.0             rjson_0.2.21               \n [5] gplots_3.1.3                RColorBrewer_1.1-3         \n [7] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              MatrixGenerics_1.12.2      \n[11] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0         dplyr_1.1.2              blob_1.2.4              \n [4] filelock_1.0.2           Biostrings_2.68.1        bitops_1.0-7            \n [7] fastmap_1.1.1            RCurl_1.98-1.12          BiocFileCache_2.8.0     \n[10] GenomicAlignments_1.36.0 XML_3.99-0.14            digest_0.6.33           \n[13] lifecycle_1.0.3          KEGGREST_1.40.0          RSQLite_2.3.1           \n[16] magrittr_2.0.3           compiler_4.3.1           rlang_1.1.1             \n[19] progress_1.2.2           yaml_2.3.7               utf8_1.2.3              \n[22] rtracklayer_1.60.0       prettyunits_1.1.1        S4Arrays_1.0.4          \n[25] bit_4.0.5                curl_5.0.1               DelayedArray_0.26.6     \n[28] xml2_1.3.5               BiocParallel_1.34.2      KernSmooth_2.23-22      \n[31] grid_4.3.1               fansi_1.0.4              caTools_1.18.2          \n[34] colorspace_2.1-0         ggplot2_3.4.2            scales_1.2.1            \n[37] gtools_3.9.4             biomaRt_2.56.1           cli_3.6.1               \n[40] crayon_1.5.2             generics_0.1.3           httr_1.4.6              \n[43] DBI_1.1.3                cachem_1.0.8             stringr_1.5.0           \n[46] zlibbioc_1.46.0          parallel_4.3.1           restfulr_0.0.15         \n[49] XVector_0.40.0           vctrs_0.6.3              Matrix_1.6-0            \n[52] jsonlite_1.8.7           hms_1.1.3                bit64_4.0.5             \n[55] locfit_1.5-9.8           glue_1.6.2               codetools_0.2-19        \n[58] stringi_1.7.12           gtable_0.3.3             BiocIO_1.10.0           \n[61] munsell_0.5.0            tibble_3.2.1             pillar_1.9.0            \n[64] rappdirs_0.3.3           GenomeInfoDbData_1.2.10  R6_2.5.1                \n[67] dbplyr_2.3.3             lattice_0.21-8           Rsamtools_2.16.0        \n[70] png_0.1-8                memoise_2.0.1            Rcpp_1.0.11             \n[73] pkgconfig_2.0.3         \n", "tool_stderr": "Import genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.52.1      AnnotationDbi_1.62.2       \n [3] tximport_1.28.0             rjson_0.2.21               \n [5] gplots_3.1.3                RColorBrewer_1.1-3         \n [7] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              MatrixGenerics_1.12.2      \n[11] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0         dplyr_1.1.2              blob_1.2.4              \n [4] filelock_1.0.2           Biostrings_2.68.1        bitops_1.0-7            \n [7] fastmap_1.1.1            RCurl_1.98-1.12          BiocFileCache_2.8.0     \n[10] GenomicAlignments_1.36.0 XML_3.99-0.14            digest_0.6.33           \n[13] lifecycle_1.0.3          KEGGREST_1.40.0          RSQLite_2.3.1           \n[16] magrittr_2.0.3           compiler_4.3.1           rlang_1.1.1             \n[19] progress_1.2.2           yaml_2.3.7               utf8_1.2.3              \n[22] rtracklayer_1.60.0       prettyunits_1.1.1        S4Arrays_1.0.4          \n[25] bit_4.0.5                curl_5.0.1               DelayedArray_0.26.6     \n[28] xml2_1.3.5               BiocParallel_1.34.2      KernSmooth_2.23-22      \n[31] grid_4.3.1               fansi_1.0.4              caTools_1.18.2          \n[34] colorspace_2.1-0         ggplot2_3.4.2            scales_1.2.1            \n[37] gtools_3.9.4             biomaRt_2.56.1           cli_3.6.1               \n[40] crayon_1.5.2             generics_0.1.3           httr_1.4.6              \n[43] DBI_1.1.3                cachem_1.0.8             stringr_1.5.0           \n[46] zlibbioc_1.46.0          parallel_4.3.1           restfulr_0.0.15         \n[49] XVector_0.40.0           vctrs_0.6.3              Matrix_1.6-0            \n[52] jsonlite_1.8.7           hms_1.1.3                bit64_4.0.5             \n[55] locfit_1.5-9.8           glue_1.6.2               codetools_0.2-19        \n[58] stringi_1.7.12           gtable_0.3.3             BiocIO_1.10.0           \n[61] munsell_0.5.0            tibble_3.2.1             pillar_1.9.0            \n[64] rappdirs_0.3.3           GenomeInfoDbData_1.2.10  R6_2.5.1                \n[67] dbplyr_2.3.3             lattice_0.21-8           Rsamtools_2.16.0        \n[70] png_0.1-8                memoise_2.0.1            Rcpp_1.0.11             \n[73] pkgconfig_2.0.3         \n", "stderr": "Import genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "21 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "21.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:19:19", "plugin": "core", "name": "end_epoch", "raw_value": "1754230759.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:18:58", "plugin": "core", "name": "start_epoch", "raw_value": "1754230738.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-7", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 7, "time_seconds": 69.90661430358887, "inputs": {"select_data|countsFile": {"src": "hdca", "id": "edcf8d2972a2c03f"}, "select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|groups": "primary:treated", "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|groups": "primary:untreated", "select_data|how": "group_tags", "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "c76a6f2c54b4b67d"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "advanced_options|use_beta_priors": true, "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "a19ede4f99458d2f", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.8+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:20:13.566950", "update_time": "2025-08-03T14:20:40.902876", "galaxy_version": "24.1", "external_id": "gxy-8qpbk", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/9/6/e/dataset_96e2e89e-0c72-4fdc-ac7f-eef8098588c5.dat' mapping.txt &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/9a882d108833/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/f/2/4/dataset_f246143a-14be-4300-bf75-3acc6ab5d2c7.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/8/8/e/dataset_88e02fa5-c3c1-4596-97a0-dc7709eeacd6.dat\", \"/galaxy/server/database/objects/0/d/a/dataset_0dabbf23-efeb-40dd-837f-625404bb7f9d.dat\", \"/galaxy/server/database/objects/6/d/6/dataset_6d627dcf-e69c-4407-8d21-e4415b1e5337.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/0/7/1/dataset_07130763-dcee-4082-a96a-66c5351cbc8c.dat\", \"/galaxy/server/database/objects/f/5/6/dataset_f565c05b-b380-4b8b-9050-412966d27207.dat\", \"/galaxy/server/database/objects/5/9/c/dataset_59c7a9f6-f142-4070-a9a1-1f5d92d4413c.dat\"]}]]]' -l '{\"dataset_07130763-dcee-4082-a96a-66c5351cbc8c.dat\": \"1\", \"dataset_f565c05b-b380-4b8b-9050-412966d27207.dat\": \"2\", \"dataset_59c7a9f6-f142-4070-a9a1-1f5d92d4413c.dat\": \"3\", \"dataset_88e02fa5-c3c1-4596-97a0-dc7709eeacd6.dat\": \"4\", \"dataset_0dabbf23-efeb-40dd-837f-625404bb7f9d.dat\": \"5\", \"dataset_6d627dcf-e69c-4407-8d21-e4415b1e5337.dat\": \"6\"}' -t 1     -d  -i -y sailfish -x mapping.txt", "user_email": "tests@fake.org", "command_version": "R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\", DESeq2 version 1.40.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": false, \"esf_cond\": {\"__current_case__\": 0, \"esf\": \"\"}, \"fit_type\": \"1\", \"outlier_filter_off\": false, \"outlier_replace_off\": false, \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}, \"use_beta_priors\": true}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 1, \"mapping_format_selector\": \"tabular\", \"tabular_file\": {\"values\": [{\"id\": 428, \"src\": \"hda\"}]}}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 0, \"countsFile\": {\"values\": [{\"id\": 14, \"src\": \"hdca\"}]}, \"how\": \"group_tags\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"factorLevel\": \"Treated\", \"groups\": [\"primary:treated\"]}, {\"__index__\": 1, \"factorLevel\": \"Untreated\", \"groups\": [\"primary:untreated\"]}]}]}"}, "inputs": {"select_data|countsFile1": {"id": "0490400e232dd632", "src": "hda", "uuid": "07130763-dcee-4082-a96a-66c5351cbc8c"}, "select_data|countsFile2": {"id": "3a28ab7c4c4987b2", "src": "hda", "uuid": "f565c05b-b380-4b8b-9050-412966d27207"}, "select_data|countsFile3": {"id": "026430fb297449b2", "src": "hda", "uuid": "59c7a9f6-f142-4070-a9a1-1f5d92d4413c"}, "select_data|countsFile4": {"id": "bf716582f4ec8bb1", "src": "hda", "uuid": "88e02fa5-c3c1-4596-97a0-dc7709eeacd6"}, "select_data|countsFile5": {"id": "ca2ee1546d6fe740", "src": "hda", "uuid": "0dabbf23-efeb-40dd-837f-625404bb7f9d"}, "select_data|countsFile6": {"id": "3d3f2db2c8e7c757", "src": "hda", "uuid": "6d627dcf-e69c-4407-8d21-e4415b1e5337"}, "tximport|mapping_format|tabular_file": {"id": "c76a6f2c54b4b67d", "src": "hda", "uuid": "96e2e89e-0c72-4fdc-ac7f-eef8098588c5"}}, "outputs": {"deseq_out": {"id": "feb1a62993c35132", "src": "hda", "uuid": "f246143a-14be-4300-bf75-3acc6ab5d2c7"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n  Treatment\n4 Untreated\n5 Untreated\n6 Untreated\n1   Treated\n2   Treated\n3   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.28.0             rjson_0.2.21               \n [3] gplots_3.1.3                RColorBrewer_1.1-3         \n [5] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [7] Biobase_2.60.0              MatrixGenerics_1.12.2      \n [9] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] jsonlite_1.8.7          Matrix_1.6-0            fansi_1.0.4            \n[13] scales_1.2.1            codetools_0.2-19        cli_3.6.1              \n[16] rlang_1.1.1             crayon_1.5.2            XVector_0.40.0         \n[19] munsell_0.5.0           DelayedArray_0.26.6     S4Arrays_1.0.4         \n[22] parallel_4.3.1          BiocParallel_1.34.2     dplyr_1.1.2            \n[25] colorspace_2.1-0        ggplot2_3.4.2           locfit_1.5-9.8         \n[28] GenomeInfoDbData_1.2.10 vctrs_0.6.3             R6_2.5.1               \n[31] lifecycle_1.0.3         zlibbioc_1.46.0         pkgconfig_2.0.3        \n[34] pillar_1.9.0            gtable_0.3.3            glue_1.6.2             \n[37] Rcpp_1.0.11             tibble_3.2.1            tidyselect_1.2.0       \n[40] compiler_4.3.1          RCurl_1.98-1.12        \n", "tool_stderr": "reading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stdout": "primary factor: Treatment \n\n---------------------\nNo size factor was used\nDESeq2 run information\n\nsample table:\n  Treatment\n4 Untreated\n5 Untreated\n6 Untreated\n1   Treated\n2   Treated\n3   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\n[1] \"use_beta_prior is set to TRUE\"\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: NA\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.28.0             rjson_0.2.21               \n [3] gplots_3.1.3                RColorBrewer_1.1-3         \n [5] DESeq2_1.40.2               SummarizedExperiment_1.30.2\n [7] Biobase_2.60.0              MatrixGenerics_1.12.2      \n [9] matrixStats_1.0.0           GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3              generics_0.1.3          bitops_1.0-7           \n [4] KernSmooth_2.23-22      gtools_3.9.4            lattice_0.21-8         \n [7] caTools_1.18.2          magrittr_2.0.3          grid_4.3.1             \n[10] jsonlite_1.8.7          Matrix_1.6-0            fansi_1.0.4            \n[13] scales_1.2.1            codetools_0.2-19        cli_3.6.1              \n[16] rlang_1.1.1             crayon_1.5.2            XVector_0.40.0         \n[19] munsell_0.5.0           DelayedArray_0.26.6     S4Arrays_1.0.4         \n[22] parallel_4.3.1          BiocParallel_1.34.2     dplyr_1.1.2            \n[25] colorspace_2.1-0        ggplot2_3.4.2           locfit_1.5-9.8         \n[28] GenomeInfoDbData_1.2.10 vctrs_0.6.3             R6_2.5.1               \n[31] lifecycle_1.0.3         zlibbioc_1.46.0         pkgconfig_2.0.3        \n[34] pillar_1.9.0            gtable_0.3.3            glue_1.6.2             \n[37] Rcpp_1.0.11             tibble_3.2.1            tidyselect_1.2.0       \n[40] compiler_4.3.1          RCurl_1.98-1.12        \n", "stderr": "reading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "15 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "15.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:20:30", "plugin": "core", "name": "end_epoch", "raw_value": "1754230830.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:20:15", "plugin": "core", "name": "start_epoch", "raw_value": "1754230815.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.8+galaxy0-8", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 8, "time_seconds": 29.368590354919434, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "deseq2/2.11.40.8+galaxy0-9", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.8+galaxy0", "test_index": 9, "time_seconds": 31.01310968399048, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "mummer_mummer/4.0.0rc1+galaxy3-0", "has_data": true, "data": {"tool_id": "mummer_mummer", "tool_version": "4.0.0rc1+galaxy3", "test_index": 0, "time_seconds": 13.513083696365356, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "poretools_yield_plot/0.6.1a1.1-0", "has_data": true, "data": {"tool_id": "poretools_yield_plot", "tool_version": "0.6.1a1.1", "test_index": 0, "time_seconds": 61.95611119270325, "inputs": {"input": {"src": "hda", "id": "7793dbabfc3a285e"}, "plot_type": "reads", "extension": "png"}, "job": {"model_class": "Job", "id": "0e4f0490208dd6b8", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_yield_plot/poretools_yield_plot/0.6.1a1.1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:02:43.380575", "update_time": "2025-08-03T14:03:23.912167", "galaxy_version": "24.1", "external_id": "gxy-l67w4", "handler": null, "job_runner_name": null, "command_line": "export MPLBACKEND=\"agg\" && poretools yield_plot '/galaxy/server/database/objects/5/e/a/dataset_5ea12f76-0519-43ee-9a3f-81d6d69033bc.dat' --saveas plot.png --plot-type reads  --skip 1 && mv plot.png '/galaxy/server/database/objects/8/2/3/dataset_823334b7-64c1-4a40-b138-9a442b552fc9.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "theme_bw": "false", "extension": "\"png\"", "skip": "\"1\"", "plot_type": "\"reads\""}, "inputs": {"input": {"id": "7793dbabfc3a285e", "src": "hda", "uuid": "5ea12f76-0519-43ee-9a3f-81d6d69033bc"}}, "outputs": {"output": {"id": "a20471df045a5926", "src": "hda", "uuid": "823334b7-64c1-4a40-b138-9a442b552fc9"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:03:05", "plugin": "core", "name": "end_epoch", "raw_value": "1754229785.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:03:03", "plugin": "core", "name": "start_epoch", "raw_value": "1754229783.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_yield_plot/0.6.1a1.1-1", "has_data": true, "data": {"tool_id": "poretools_yield_plot", "tool_version": "0.6.1a1.1", "test_index": 1, "time_seconds": 35.7108154296875, "inputs": {"input": {"src": "hda", "id": "26aafcd492e66556"}, "plot_type": "basepairs", "extension": "svg"}, "job": {"model_class": "Job", "id": "6ff5e5d1df93d808", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_yield_plot/poretools_yield_plot/0.6.1a1.1", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:03:44.459668", "update_time": "2025-08-03T14:03:59.725377", "galaxy_version": "24.1", "external_id": "gxy-n6552", "handler": null, "job_runner_name": null, "command_line": "export MPLBACKEND=\"agg\" && poretools yield_plot '/galaxy/server/database/objects/6/9/2/dataset_6921c547-9579-4066-bfa8-673269f31640.dat' --saveas plot.svg --plot-type basepairs  --skip 1 && mv plot.svg '/galaxy/server/database/objects/d/4/a/dataset_d4af7d73-0069-4f48-b328-04bab5e83dff.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "theme_bw": "false", "extension": "\"svg\"", "skip": "\"1\"", "plot_type": "\"basepairs\""}, "inputs": {"input": {"id": "26aafcd492e66556", "src": "hda", "uuid": "6921c547-9579-4066-bfa8-673269f31640"}}, "outputs": {"output": {"id": "5aa4b4a971da362a", "src": "hda", "uuid": "d4af7d73-0069-4f48-b328-04bab5e83dff"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2025-08-03 14:03:48", "plugin": "core", "name": "end_epoch", "raw_value": "1754229828.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:03:46", "plugin": "core", "name": "start_epoch", "raw_value": "1754229826.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.3+galaxy0-0", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.3+galaxy0", "test_index": 0, "time_seconds": 80.99067759513855, "inputs": {"input1": {"src": "hda", "id": "aa1f57c20ed719ea"}}, "job": {"model_class": "Job", "id": "6efb4b79516b2c49", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:49:49.271552", "update_time": "2025-08-03T13:50:49.688751", "galaxy_version": "24.1", "external_id": "gxy-bzwql", "handler": null, "job_runner_name": null, "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&    ln -s '/galaxy/server/database/objects/0/3/6/dataset_03665ebd-632c-4702-997b-bfa1fbde6ab5.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&   sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/3/3/8/dataset_338266bf-c8d7-4fc3-9719-565292681eb5.dat' && mkdir '/galaxy/server/database/objects/3/3/8/dataset_338266bf-c8d7-4fc3-9719-565292681eb5_files' && mv results/css/*.css '/galaxy/server/database/objects/3/3/8/dataset_338266bf-c8d7-4fc3-9719-565292681eb5_files' && mv results/css/*.png '/galaxy/server/database/objects/3/3/8/dataset_338266bf-c8d7-4fc3-9719-565292681eb5_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/objects/3/3/8/dataset_338266bf-c8d7-4fc3-9719-565292681eb5_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "user_email": "tests@fake.org", "command_version": "2.3", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": true}", "duplicate_skipping": "\"0\"", "per_base_coverage": "false", "stats_regions": "{\"__current_case__\": 0, \"region_select\": \"all\"}"}, "inputs": {"input1": {"id": "aa1f57c20ed719ea", "src": "hda", "uuid": "03665ebd-632c-4702-997b-bfa1fbde6ab5"}}, "outputs": {"raw_data|__part__|genome_results": {"id": "30a9ffe9846d31c6", "src": "hda", "uuid": "246e5f4b-42a4-440e-960f-33f48c371b2f"}, "raw_data|__part__|coverage_across_reference": {"id": "38f7102f27190ad9", "src": "hda", "uuid": "cf5ab355-47b7-40ae-8974-da7aa5e87232"}, "raw_data|__part__|coverage_histogram": {"id": "1aeaffca14ec8e47", "src": "hda", "uuid": "14fa1703-1c9c-4238-b168-f2597d3f8747"}, "raw_data|__part__|genome_fraction_coverage": {"id": "852980940f530681", "src": "hda", "uuid": "3ee282f9-7a87-4066-93d4-b1dc8fa128f4"}, "raw_data|__part__|duplication_rate_histogram": {"id": "64912b4ad03cddb9", "src": "hda", "uuid": "bb3515d1-bdd7-41db-8255-23963931474d"}, "raw_data|__part__|homopolymer_indels": {"id": "0135b9472f1cf304", "src": "hda", "uuid": "bef93bcf-e79b-4cce-a2ae-ae193301b3c8"}, "raw_data|__part__|insert_size_across_reference": {"id": "c5dc945124747a7a", "src": "hda", "uuid": "99af7040-0e94-4dea-9126-68e79aff4b7b"}, "raw_data|__part__|insert_size_histogram": {"id": "d77d633cc961a89a", "src": "hda", "uuid": "52ccdd1f-0b87-4bd5-bf64-e695d8781584"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "d34517d25b540e53", "src": "hda", "uuid": "70fae997-9195-48f0-8825-6ed8fb8752bc"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "748c3e0940cdadcc", "src": "hda", "uuid": "2e68e793-badc-4bf0-9b03-572b514a5129"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "2334aa0c3a84a2f1", "src": "hda", "uuid": "a199264e-9266-4d17-b1c2-ddda12b63c72"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "eab726481461fda4", "src": "hda", "uuid": "8ae5a56f-9dc5-4b56-a9cd-e01c6721beb1"}, "raw_data|__part__|mapping_quality_histogram": {"id": "949412f8b6e5b3fd", "src": "hda", "uuid": "943d9bbb-4713-406d-94b9-f493f1ac53e7"}, "output_html": {"id": "216053e67b5b7f31", "src": "hda", "uuid": "338266bf-c8d7-4fc3-9719-565292681eb5"}}, "copied_from_job_id": null, "output_collections": {"raw_data": {"src": "hdca", "id": "ea2781cb7d10ee87"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:50:27", "plugin": "core", "name": "end_epoch", "raw_value": "1754229027.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:50:25", "plugin": "core", "name": "start_epoch", "raw_value": "1754229025.0000000"}, {"title": "Memory Allocated (MB)", "value": "25769", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "25769.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.3+galaxy0-1", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.3+galaxy0", "test_index": 1, "time_seconds": 38.21819615364075, "inputs": {"input1": {"src": "hda", "id": "3f9f99e76ae171e4"}, "per_base_coverage": true}, "job": {"model_class": "Job", "id": "4f48cc430fa7e4d6", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:51:10.294035", "update_time": "2025-08-03T13:51:27.469817", "galaxy_version": "24.1", "external_id": "gxy-vvk2b", "handler": null, "job_runner_name": null, "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&    ln -s '/galaxy/server/database/objects/7/2/4/dataset_7243b469-e9ee-4a9f-91a0-4e75aeea59c5.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs --output-genome-coverage results/coverage.txt -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&  mv results/coverage.txt '/galaxy/server/database/objects/8/0/0/dataset_8001ed07-e935-4cb3-bf5b-0b3c3e285328.dat' &&  sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/4/1/3/dataset_4134fd33-80a4-482f-a25a-320ffeae8e56.dat' && mkdir '/galaxy/server/database/objects/4/1/3/dataset_4134fd33-80a4-482f-a25a-320ffeae8e56_files' && mv results/css/*.css '/galaxy/server/database/objects/4/1/3/dataset_4134fd33-80a4-482f-a25a-320ffeae8e56_files' && mv results/css/*.png '/galaxy/server/database/objects/4/1/3/dataset_4134fd33-80a4-482f-a25a-320ffeae8e56_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/objects/4/1/3/dataset_4134fd33-80a4-482f-a25a-320ffeae8e56_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "user_email": "tests@fake.org", "command_version": "2.3", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": true}", "duplicate_skipping": "\"0\"", "per_base_coverage": "true", "stats_regions": "{\"__current_case__\": 0, \"region_select\": \"all\"}"}, "inputs": {"input1": {"id": "3f9f99e76ae171e4", "src": "hda", "uuid": "7243b469-e9ee-4a9f-91a0-4e75aeea59c5"}}, "outputs": {"raw_data|__part__|genome_results": {"id": "76f73d716a5cc1c7", "src": "hda", "uuid": "54e0313b-55ed-4745-b3a3-b4574ee57a4d"}, "raw_data|__part__|coverage_across_reference": {"id": "755ce9efcb3f08ac", "src": "hda", "uuid": "cc0c416f-3ba8-41f8-bb26-ed24bf3198f2"}, "raw_data|__part__|coverage_histogram": {"id": "f894e4b19bdefb32", "src": "hda", "uuid": "72d7f474-33c6-42f5-9562-44facdabb955"}, "raw_data|__part__|genome_fraction_coverage": {"id": "cd70a7fed8b291f9", "src": "hda", "uuid": "8802c618-ee60-44fa-8204-c36758439e97"}, "raw_data|__part__|duplication_rate_histogram": {"id": "c777aea6edd4c07a", "src": "hda", "uuid": "bdf53014-b619-498c-bd40-e904e4374886"}, "raw_data|__part__|homopolymer_indels": {"id": "7fff694b0165339d", "src": "hda", "uuid": "822f542f-40ce-4179-9ab9-9b8d9057ff42"}, "raw_data|__part__|insert_size_across_reference": {"id": "e9e2ce9f1dcf278f", "src": "hda", "uuid": "a5c07468-3349-43b3-9d19-05d341b3c9f6"}, "raw_data|__part__|insert_size_histogram": {"id": "c187b7546c20ad50", "src": "hda", "uuid": "5113eb58-2cab-4299-b0c8-f70b3fb488f2"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "b80c8a8b711c0dc3", "src": "hda", "uuid": "6b356ec6-66aa-448f-b635-c2b223c6fb39"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "8426bb06eedf2630", "src": "hda", "uuid": "0345b5a3-ed2d-4661-875c-12e7552df3e9"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "77683db53c47e309", "src": "hda", "uuid": "5927fae9-be5a-40d8-aeac-fcde74cecff4"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "34a94df67f4e944b", "src": "hda", "uuid": "6dfc51e1-0670-4f8c-be6a-a8d1a30c247d"}, "raw_data|__part__|mapping_quality_histogram": {"id": "ae63332daddfd696", "src": "hda", "uuid": "16a0cc08-079f-440a-9e83-c42b738c6e9f"}, "output_html": {"id": "062bc6242a78ed2f", "src": "hda", "uuid": "4134fd33-80a4-482f-a25a-320ffeae8e56"}, "output_per_base_coverage": {"id": "196ba4b0f1abd656", "src": "hda", "uuid": "8001ed07-e935-4cb3-bf5b-0b3c3e285328"}}, "copied_from_job_id": null, "output_collections": {"raw_data": {"src": "hdca", "id": "d9017bb4eb327f0f"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:51:14", "plugin": "core", "name": "end_epoch", "raw_value": "1754229074.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:51:12", "plugin": "core", "name": "start_epoch", "raw_value": "1754229072.0000000"}, {"title": "Memory Allocated (MB)", "value": "25769", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "25769.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.3+galaxy0-2", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.3+galaxy0", "test_index": 2, "time_seconds": 38.23495006561279, "inputs": {"input1": {"src": "hda", "id": "a9d023ce58385e6d"}, "stats_regions|regions": {"src": "hda", "id": "75694e3bd9fbeac3"}, "stats_regions|region_select": "custom_regions"}, "job": {"model_class": "Job", "id": "39c08c1b379ff476", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:51:48.841140", "update_time": "2025-08-03T13:52:06.051756", "galaxy_version": "24.1", "external_id": "gxy-fhlwc", "handler": null, "job_runner_name": null, "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&   ln -s '/galaxy/server/database/objects/3/d/3/dataset_3d35115c-4973-42fb-9481-55c7494bff9b.dat' regions.gtf &&   ln -s '/galaxy/server/database/objects/0/7/0/dataset_07090b3d-a45e-4435-a3c0-eba36760364e.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -gff regions.gtf -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&   sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/1/8/e/dataset_18e7dad8-8d2a-420d-8aaf-e05d6c78057b.dat' && mkdir '/galaxy/server/database/objects/1/8/e/dataset_18e7dad8-8d2a-420d-8aaf-e05d6c78057b_files' && mv results/css/*.css '/galaxy/server/database/objects/1/8/e/dataset_18e7dad8-8d2a-420d-8aaf-e05d6c78057b_files' && mv results/css/*.png '/galaxy/server/database/objects/1/8/e/dataset_18e7dad8-8d2a-420d-8aaf-e05d6c78057b_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/objects/1/8/e/dataset_18e7dad8-8d2a-420d-8aaf-e05d6c78057b_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "user_email": "tests@fake.org", "command_version": "2.3", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": true}", "duplicate_skipping": "\"0\"", "per_base_coverage": "false", "stats_regions": "{\"__current_case__\": 1, \"outside_stats\": false, \"region_select\": \"custom_regions\", \"regions\": {\"values\": [{\"id\": 234, \"src\": \"hda\"}]}}"}, "inputs": {"input1": {"id": "a9d023ce58385e6d", "src": "hda", "uuid": "07090b3d-a45e-4435-a3c0-eba36760364e"}, "stats_regions|regions": {"id": "75694e3bd9fbeac3", "src": "hda", "uuid": "3d35115c-4973-42fb-9481-55c7494bff9b"}}, "outputs": {"raw_data|__part__|duplication_rate_histogram": {"id": "193ef765d9f0bc89", "src": "hda", "uuid": "c7e6f761-c019-4816-a4b7-d501516426eb"}, "raw_data|__part__|homopolymer_indels": {"id": "8fd41935733af45c", "src": "hda", "uuid": "dfb2f58c-9ef4-4cd4-bf7b-ab33242e9eaf"}, "raw_data|__part__|insert_size_across_reference": {"id": "aae6a8657a82b2ac", "src": "hda", "uuid": "6225b792-ff81-4c44-993f-55a612e6b8c7"}, "raw_data|__part__|insert_size_histogram": {"id": "0e4f0490208dd6b8", "src": "hda", "uuid": "99aa5bf5-6b70-4be3-8f57-b2a99097a255"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "6c946ca77c9582b2", "src": "hda", "uuid": "15e5d6d2-71f4-4d28-9c27-85012567a99f"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "6ff5e5d1df93d808", "src": "hda", "uuid": "4a0109f0-0a47-4375-82d1-6fdd0605d90d"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "c360f2b6cbe43619", "src": "hda", "uuid": "050c2601-6904-4f8b-9139-2bd9fbe9fa42"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "29a3214a2873bb35", "src": "hda", "uuid": "23b8a3fb-f692-4e63-88b2-4fe0904f021e"}, "raw_data|__part__|genome_results": {"id": "e4dc1e1648fd53a0", "src": "hda", "uuid": "f4b30de1-23d7-4d46-a735-10a28710ed18"}, "raw_data|__part__|coverage_across_reference": {"id": "3ee2c49f3640eda1", "src": "hda", "uuid": "325573aa-7b78-4993-aa1c-efe82c2e5f05"}, "raw_data|__part__|coverage_histogram": {"id": "af14d013de4c917a", "src": "hda", "uuid": "dfd00739-95f0-4e7b-8eb1-718bfea31aca"}, "raw_data|__part__|genome_fraction_coverage": {"id": "dda86c0adc48b6bf", "src": "hda", "uuid": "cbfd9699-fdba-4dbd-baed-b8ce71ec754f"}, "raw_data|__part__|mapping_quality_histogram": {"id": "8bf93a57164709e0", "src": "hda", "uuid": "73a5553d-2051-4276-a766-bb5503f94e24"}, "output_html": {"id": "b47529a48fba3c72", "src": "hda", "uuid": "18e7dad8-8d2a-420d-8aaf-e05d6c78057b"}}, "copied_from_job_id": null, "output_collections": {"raw_data": {"src": "hdca", "id": "5a2a6b2a5a0f7e55"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:51:53", "plugin": "core", "name": "end_epoch", "raw_value": "1754229113.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:51:51", "plugin": "core", "name": "start_epoch", "raw_value": "1754229111.0000000"}, {"title": "Memory Allocated (MB)", "value": "25769", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "25769.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.3+galaxy0-3", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.3+galaxy0", "test_index": 3, "time_seconds": 37.45225811004639, "inputs": {"input1": {"src": "hda", "id": "6af07f8cce2e973b"}, "stats_regions|regions": {"src": "hda", "id": "2b537882ac3f7042"}, "stats_regions|region_select": "custom_regions", "per_base_coverage": true}, "job": {"model_class": "Job", "id": "bd3be8fbde992751", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:52:27.753597", "update_time": "2025-08-03T13:52:43.097456", "galaxy_version": "24.1", "external_id": "gxy-pn859", "handler": null, "job_runner_name": null, "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&   ln -s '/galaxy/server/database/objects/b/1/1/dataset_b1184410-8ec5-4055-8500-beeb42114e31.dat' regions.gtf &&   ln -s '/galaxy/server/database/objects/7/c/3/dataset_7c370109-7846-40f0-a702-156d387a7383.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -gff regions.gtf --output-genome-coverage results/coverage.txt -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&  mv results/coverage.txt '/galaxy/server/database/objects/3/a/c/dataset_3ac55d11-4ad5-4683-ab87-ae3bfd1cef72.dat' &&  sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/3/9/e/dataset_39ec2788-2f87-4894-a7ca-e4cee86404e1.dat' && mkdir '/galaxy/server/database/objects/3/9/e/dataset_39ec2788-2f87-4894-a7ca-e4cee86404e1_files' && mv results/css/*.css '/galaxy/server/database/objects/3/9/e/dataset_39ec2788-2f87-4894-a7ca-e4cee86404e1_files' && mv results/css/*.png '/galaxy/server/database/objects/3/9/e/dataset_39ec2788-2f87-4894-a7ca-e4cee86404e1_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/objects/3/9/e/dataset_39ec2788-2f87-4894-a7ca-e4cee86404e1_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "user_email": "tests@fake.org", "command_version": "2.3", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": true}", "duplicate_skipping": "\"0\"", "per_base_coverage": "true", "stats_regions": "{\"__current_case__\": 1, \"outside_stats\": false, \"region_select\": \"custom_regions\", \"regions\": {\"values\": [{\"id\": 250, \"src\": \"hda\"}]}}"}, "inputs": {"input1": {"id": "6af07f8cce2e973b", "src": "hda", "uuid": "7c370109-7846-40f0-a702-156d387a7383"}, "stats_regions|regions": {"id": "2b537882ac3f7042", "src": "hda", "uuid": "b1184410-8ec5-4055-8500-beeb42114e31"}}, "outputs": {"raw_data|__part__|genome_results": {"id": "a6597e854340c46a", "src": "hda", "uuid": "611eec30-667c-4b6e-8698-7da3b2f143b5"}, "raw_data|__part__|coverage_across_reference": {"id": "6fbbb1586fd3b0cc", "src": "hda", "uuid": "5fc2ebf7-74ce-47db-bf60-6d5e2877e635"}, "raw_data|__part__|coverage_histogram": {"id": "59fdcc25cc8be4c2", "src": "hda", "uuid": "1a9b45b5-571e-466b-a2b4-2aa3a2b07b55"}, "raw_data|__part__|genome_fraction_coverage": {"id": "e0d1b1305a3f1c6e", "src": "hda", "uuid": "9eb435dc-2fbe-4717-b26e-b96f339664c4"}, "raw_data|__part__|duplication_rate_histogram": {"id": "2d69ad28e75bd84b", "src": "hda", "uuid": "397e23f8-b4f9-49b5-a85a-b22088aad746"}, "raw_data|__part__|homopolymer_indels": {"id": "998bf322422db15f", "src": "hda", "uuid": "4202b1b3-c2ff-42f6-82ae-90f82fdcb6d5"}, "raw_data|__part__|insert_size_across_reference": {"id": "9794161935cfbc35", "src": "hda", "uuid": "7ac39510-a883-40d7-b52a-70de2c101feb"}, "raw_data|__part__|insert_size_histogram": {"id": "4e571b5085544452", "src": "hda", "uuid": "8c969dc2-993e-460f-8909-1e251b9be864"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "597fa5ef9a85c940", "src": "hda", "uuid": "419c54b6-85b9-4691-b8f0-607e580225d1"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "31bcd1bf94c6ceec", "src": "hda", "uuid": "de472ab1-0939-4e1f-aa70-2d4216be2723"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "ca63263577bfda6e", "src": "hda", "uuid": "01747061-2a4c-45a7-893b-3b8c8d8ee089"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "d8e2999796adbe63", "src": "hda", "uuid": "3ee6f6f7-08cc-449e-b58c-5b1e3b6941eb"}, "raw_data|__part__|mapping_quality_histogram": {"id": "1ec024e6345b7f04", "src": "hda", "uuid": "61a0f31c-cdc5-4b16-9e1c-850be0cfdd62"}, "output_html": {"id": "831dd87d71a86966", "src": "hda", "uuid": "39ec2788-2f87-4894-a7ca-e4cee86404e1"}, "output_per_base_coverage": {"id": "feb6c0be121c5261", "src": "hda", "uuid": "3ac55d11-4ad5-4683-ab87-ae3bfd1cef72"}}, "copied_from_job_id": null, "output_collections": {"raw_data": {"src": "hdca", "id": "95749743f61679bb"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx25769m\nQualiMap v.2.3\nBuilt on 2023-05-19 16:57\n\nSelected tool: bamqc\nAvailable memory (Mb): 419\nMax memory (Mb): 27028\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 6\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:52:31", "plugin": "core", "name": "end_epoch", "raw_value": "1754229151.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:52:29", "plugin": "core", "name": "start_epoch", "raw_value": "1754229149.0000000"}, {"title": "Memory Allocated (MB)", "value": "25769", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "25769.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.3+galaxy0-4", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.3+galaxy0", "test_index": 4, "time_seconds": 19.853474378585815, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "samtools_stats/2.0.5-0", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 0, "time_seconds": 35.74614667892456, "inputs": {"input": {"src": "hda", "id": "c6fe1eeadbea0645"}, "addref_cond|ref": {"src": "hda", "id": "f9f7b21df7777170"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "7fb46569801d1c76", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:53:25.635694", "update_time": "2025-08-03T13:53:41.028419", "galaxy_version": "24.1", "external_id": "gxy-4vtk7", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/f/b/1/dataset_fb1b6420-9bb2-4c9a-9ead-39e3d9723fca.dat' infile &&      reffa=\"reference.fa\" && ln -s '/galaxy/server/database/objects/f/4/5/dataset_f45da68a-a725-4ace-8c52-39d09f9e8788.dat' $reffa && samtools faidx $reffa && reffai=$reffa.fai &&  samtools stats   --ref-seq \"$reffa\"     -@ $addthreads infile   > '/galaxy/server/database/objects/b/2/d/dataset_b2d3c6f3-d211-4243-9e83-a49f8100700a.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 269, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "c6fe1eeadbea0645", "src": "hda", "uuid": "fb1b6420-9bb2-4c9a-9ead-39e3d9723fca"}, "addref_cond|ref": {"id": "f9f7b21df7777170", "src": "hda", "uuid": "f45da68a-a725-4ace-8c52-39d09f9e8788"}}, "outputs": {"output": {"id": "52470f34259660ac", "src": "hda", "uuid": "b2d3c6f3-d211-4243-9e83-a49f8100700a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:53:29", "plugin": "core", "name": "end_epoch", "raw_value": "1754229209.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:53:29", "plugin": "core", "name": "start_epoch", "raw_value": "1754229209.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-1", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 1, "time_seconds": 31.386940717697144, "inputs": {"input": {"src": "hda", "id": "2617102a7ba098c4"}, "addref_cond|ref": {"src": "hda", "id": "cd20fa56f0bc0412"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "c9dc4f06fdc599e2", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:54:01.010498", "update_time": "2025-08-03T13:54:12.568977", "galaxy_version": "24.1", "external_id": "gxy-kqhvf", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/0/f/8/dataset_0f88d4aa-875e-4593-b6b7-f497603090e8.dat' infile &&      reffa=\"reference.fa\" && ln -s '/galaxy/server/database/objects/f/4/4/dataset_f44bbd3e-6359-4c19-a401-a3417e0ee632.dat' $reffa && samtools faidx $reffa && reffai=$reffa.fai &&  samtools stats   --ref-seq \"$reffa\"     -@ $addthreads infile   > '/galaxy/server/database/objects/6/2/8/dataset_62884810-6061-44ee-95cf-6e1fc78ec22f.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 272, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "2617102a7ba098c4", "src": "hda", "uuid": "0f88d4aa-875e-4593-b6b7-f497603090e8"}, "addref_cond|ref": {"id": "cd20fa56f0bc0412", "src": "hda", "uuid": "f44bbd3e-6359-4c19-a401-a3417e0ee632"}}, "outputs": {"output": {"id": "5ca60ca541efea20", "src": "hda", "uuid": "62884810-6061-44ee-95cf-6e1fc78ec22f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:54:02", "plugin": "core", "name": "end_epoch", "raw_value": "1754229242.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:54:02", "plugin": "core", "name": "start_epoch", "raw_value": "1754229242.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-10", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 10, "time_seconds": 36.53913593292236, "inputs": {"input": {"src": "hda", "id": "a4381d3b614730d5"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "f4a957fcb345574a"}, "cond_region|select_region": "tab", "remove_overlaps": true}, "job": {"model_class": "Job", "id": "e9e2ce9f1dcf278f", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:58:52.641784", "update_time": "2025-08-03T13:59:07.105751", "galaxy_version": "24.1", "external_id": "gxy-nbr5q", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/4/3/3/dataset_433ac8cd-dc89-465f-b90e-955d1fbcd49e.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/a/3/a/metadata_a3a273b4-b2c2-4ef1-896d-b8761abf2539.dat' infile.bai &&       samtools stats     -t '/galaxy/server/database/objects/9/c/a/dataset_9caebddf-f7fe-4d8f-9e4f-a41cf23fbc3e.dat'  -p -@ $addthreads infile   > '/galaxy/server/database/objects/4/a/f/dataset_4af6e069-a3df-4a6a-88ea-af0b79371feb.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "true", "sparse": "false", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 296, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "a4381d3b614730d5", "src": "hda", "uuid": "433ac8cd-dc89-465f-b90e-955d1fbcd49e"}, "cond_region|targetregions": {"id": "f4a957fcb345574a", "src": "hda", "uuid": "9caebddf-f7fe-4d8f-9e4f-a41cf23fbc3e"}}, "outputs": {"output": {"id": "010235cdac0167fa", "src": "hda", "uuid": "4af6e069-a3df-4a6a-88ea-af0b79371feb"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:58:55", "plugin": "core", "name": "end_epoch", "raw_value": "1754229535.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:58:55", "plugin": "core", "name": "start_epoch", "raw_value": "1754229535.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-11", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 11, "time_seconds": 35.06485843658447, "inputs": {"input": {"src": "hda", "id": "1c859098c9c1c0ac"}, "addref_cond|ref": {"src": "hda", "id": "01e5e56135919918"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "8426bb06eedf2630", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:59:29.089421", "update_time": "2025-08-03T13:59:42.162679", "galaxy_version": "24.1", "external_id": "gxy-j2xct", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/d/d/9/dataset_dd9ee748-edaf-4862-a2a0-28dbc9d5d899.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/5/e/0/metadata_5e080dc1-5494-46fb-a04e-1bb698c32b1d.dat' infile.bai &&      reffa=\"reference.fa\" && ln -s '/galaxy/server/database/objects/f/a/8/dataset_fa893ee1-df4e-44e7-a8af-94f5d3bf2f8a.dat' $reffa && samtools faidx $reffa && reffai=$reffa.fai &&  samtools stats   --ref-seq \"$reffa\"     -@ $addthreads infile   > '/galaxy/server/database/objects/a/9/9/dataset_a9990de3-b5a7-41fc-ab2c-a9f54e02a2a4.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 299, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "1c859098c9c1c0ac", "src": "hda", "uuid": "dd9ee748-edaf-4862-a2a0-28dbc9d5d899"}, "addref_cond|ref": {"id": "01e5e56135919918", "src": "hda", "uuid": "fa893ee1-df4e-44e7-a8af-94f5d3bf2f8a"}}, "outputs": {"output": {"id": "45caaaeab8d56ec4", "src": "hda", "uuid": "a9990de3-b5a7-41fc-ab2c-a9f54e02a2a4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:59:31", "plugin": "core", "name": "end_epoch", "raw_value": "1754229571.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:59:31", "plugin": "core", "name": "start_epoch", "raw_value": "1754229571.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-12", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 12, "time_seconds": 12.491834163665771, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "samtools_stats/2.0.5-2", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 2, "time_seconds": 18.626291513442993, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "samtools_stats/2.0.5-3", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 3, "time_seconds": 34.33278155326843, "inputs": {"input": {"src": "hda", "id": "0201cf2ae333599c"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "5950b89c75d5621e"}, "cond_region|select_region": "tab"}, "job": {"model_class": "Job", "id": "1aeaffca14ec8e47", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:54:51.801510", "update_time": "2025-08-03T13:55:05.479951", "galaxy_version": "24.1", "external_id": "gxy-tw5gm", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/e/d/d/dataset_edd582b1-fbe6-4750-a38a-70b4e5c93867.dat' infile &&       samtools stats     -t '/galaxy/server/database/objects/8/a/5/dataset_8a5a1b3b-5f27-4a05-9fa7-f0ff1ea07da1.dat'   -@ $addthreads infile   > '/galaxy/server/database/objects/8/5/6/dataset_856c1d4b-33cc-4d9d-9e75-9c0f7dbdefbd.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 277, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "0201cf2ae333599c", "src": "hda", "uuid": "edd582b1-fbe6-4750-a38a-70b4e5c93867"}, "cond_region|targetregions": {"id": "5950b89c75d5621e", "src": "hda", "uuid": "8a5a1b3b-5f27-4a05-9fa7-f0ff1ea07da1"}}, "outputs": {"output": {"id": "1bda2726d2fc2415", "src": "hda", "uuid": "856c1d4b-33cc-4d9d-9e75-9c0f7dbdefbd"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:54:53", "plugin": "core", "name": "end_epoch", "raw_value": "1754229293.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:54:53", "plugin": "core", "name": "start_epoch", "raw_value": "1754229293.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-4", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 4, "time_seconds": 33.27761507034302, "inputs": {"input": {"src": "hda", "id": "c5d5a24ca2cff33e"}, "addref_cond|addref_select": "no", "cond_region|regions_repeat_0|region": "ref1:10-24", "cond_region|regions_repeat_1|region": "ref1:30-46", "cond_region|regions_repeat_2|region": "ref1:39-56", "cond_region|select_region": "text"}, "job": {"model_class": "Job", "id": "64912b4ad03cddb9", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:55:26.343835", "update_time": "2025-08-03T13:55:39.046828", "galaxy_version": "24.1", "external_id": "gxy-ndcgd", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/3/1/3/dataset_3139ed0f-15c0-4ee4-9652-695652b31ac2.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/c/c/b/metadata_ccbe9c91-968a-48ba-8e88-4ae9baabcfeb.dat' infile.bai &&       samtools stats       -@ $addthreads infile  'ref1:10-24' 'ref1:30-46' 'ref1:39-56'  > '/galaxy/server/database/objects/9/f/6/dataset_9f684b6c-0760-4e63-a951-a931ac61156e.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 1, \"regions_repeat\": [{\"__index__\": 0, \"region\": \"ref1:10-24\"}, {\"__index__\": 1, \"region\": \"ref1:30-46\"}, {\"__index__\": 2, \"region\": \"ref1:39-56\"}], \"select_region\": \"text\"}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "c5d5a24ca2cff33e", "src": "hda", "uuid": "3139ed0f-15c0-4ee4-9652-695652b31ac2"}}, "outputs": {"output": {"id": "8ff00f4054476694", "src": "hda", "uuid": "9f684b6c-0760-4e63-a951-a931ac61156e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:55:28", "plugin": "core", "name": "end_epoch", "raw_value": "1754229328.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:55:28", "plugin": "core", "name": "start_epoch", "raw_value": "1754229328.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-5", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 5, "time_seconds": 34.32101321220398, "inputs": {"input": {"src": "hda", "id": "641064cf0d6d2ca4"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "beeee6091d6fe51a"}, "cond_region|select_region": "tab", "cov_threshold": "4"}, "job": {"model_class": "Job", "id": "d77d633cc961a89a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:56:00.350687", "update_time": "2025-08-03T13:56:13.354074", "galaxy_version": "24.1", "external_id": "gxy-7gnt7", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/c/b/f/dataset_cbfebee3-02ea-4b97-ac8f-be6a597c5c32.dat' infile &&       samtools stats     -t '/galaxy/server/database/objects/9/9/3/dataset_9934a896-c02f-49fa-a4f8-c6ad2b90f8f7.dat'   -g 4 -@ $addthreads infile   > '/galaxy/server/database/objects/1/d/3/dataset_1d332613-ec3e-4e9b-a185-721fcafa3b80.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"4\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 282, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "641064cf0d6d2ca4", "src": "hda", "uuid": "cbfebee3-02ea-4b97-ac8f-be6a597c5c32"}, "cond_region|targetregions": {"id": "beeee6091d6fe51a", "src": "hda", "uuid": "9934a896-c02f-49fa-a4f8-c6ad2b90f8f7"}}, "outputs": {"output": {"id": "5a210d65b01acc2b", "src": "hda", "uuid": "1d332613-ec3e-4e9b-a185-721fcafa3b80"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:56:02", "plugin": "core", "name": "end_epoch", "raw_value": "1754229362.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:56:01", "plugin": "core", "name": "start_epoch", "raw_value": "1754229361.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-6", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 6, "time_seconds": 33.463250160217285, "inputs": {"input": {"src": "hda", "id": "7c199fd33d7fa867"}, "addref_cond|addref_select": "no", "cond_region|regions_repeat_0|region": "ref1:10-24", "cond_region|regions_repeat_1|region": "ref1:30-46", "cond_region|regions_repeat_2|region": "ref1:39-56", "cond_region|select_region": "text", "cov_threshold": "4"}, "job": {"model_class": "Job", "id": "748c3e0940cdadcc", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:56:33.925865", "update_time": "2025-08-03T13:56:46.955716", "galaxy_version": "24.1", "external_id": "gxy-srjbc", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/1/0/1/dataset_10114e59-3f11-4e0e-ad96-69f7514ffe84.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/2/5/5/metadata_255ac50e-5073-44aa-a057-b722df301c0b.dat' infile.bai &&       samtools stats       -g 4 -@ $addthreads infile  'ref1:10-24' 'ref1:30-46' 'ref1:39-56'  > '/galaxy/server/database/objects/b/7/d/dataset_b7db6268-2837-436a-9c8f-fc3462972cb6.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"4\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 1, \"regions_repeat\": [{\"__index__\": 0, \"region\": \"ref1:10-24\"}, {\"__index__\": 1, \"region\": \"ref1:30-46\"}, {\"__index__\": 2, \"region\": \"ref1:39-56\"}], \"select_region\": \"text\"}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "7c199fd33d7fa867", "src": "hda", "uuid": "10114e59-3f11-4e0e-ad96-69f7514ffe84"}}, "outputs": {"output": {"id": "d552fcf5fc25e098", "src": "hda", "uuid": "b7db6268-2837-436a-9c8f-fc3462972cb6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Barcodes with tag BC differ in length at sequence 'ref1_grp1_p002'\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:56:35", "plugin": "core", "name": "end_epoch", "raw_value": "1754229395.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:56:35", "plugin": "core", "name": "start_epoch", "raw_value": "1754229395.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-7", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 7, "time_seconds": 34.99115991592407, "inputs": {"input": {"src": "hda", "id": "7457ec34a955af14"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "215e0c34f7b1736a"}, "cond_region|select_region": "tab"}, "job": {"model_class": "Job", "id": "949412f8b6e5b3fd", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:57:08.323646", "update_time": "2025-08-03T13:57:21.785442", "galaxy_version": "24.1", "external_id": "gxy-vhsw4", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/7/2/0/dataset_720be70c-9d7c-4499-b98d-c94a8d230cf0.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/1/4/3/metadata_143659ec-44d8-4ff8-a41b-97d80ee3f0e7.dat' infile.bai &&       samtools stats     -t '/galaxy/server/database/objects/c/4/d/dataset_c4dd5c41-4161-4151-bffe-b2cd00d7fc75.dat'   -@ $addthreads infile   > '/galaxy/server/database/objects/4/d/9/dataset_4d960135-9f79-433e-b3a0-08db46a540ee.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 287, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "7457ec34a955af14", "src": "hda", "uuid": "720be70c-9d7c-4499-b98d-c94a8d230cf0"}, "cond_region|targetregions": {"id": "215e0c34f7b1736a", "src": "hda", "uuid": "c4dd5c41-4161-4151-bffe-b2cd00d7fc75"}}, "outputs": {"output": {"id": "12d06774dc19357a", "src": "hda", "uuid": "4d960135-9f79-433e-b3a0-08db46a540ee"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:57:11", "plugin": "core", "name": "end_epoch", "raw_value": "1754229431.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:57:10", "plugin": "core", "name": "start_epoch", "raw_value": "1754229430.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-8", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 8, "time_seconds": 34.85838842391968, "inputs": {"input": {"src": "hda", "id": "8532ae5cf5e6a37f"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "46cbb68434312fed"}, "cond_region|select_region": "tab", "remove_overlaps": true}, "job": {"model_class": "Job", "id": "76f73d716a5cc1c7", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:57:43.596968", "update_time": "2025-08-03T13:57:56.867074", "galaxy_version": "24.1", "external_id": "gxy-pwc5k", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/8/e/3/dataset_8e3d994f-1919-4bea-906c-c2664f61c122.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/d/4/3/metadata_d43f07f2-25f9-449f-b701-728a9fa8c305.dat' infile.bai &&       samtools stats     -t '/galaxy/server/database/objects/b/b/f/dataset_bbfab167-2c55-4747-a520-c6ae5d3fa5a0.dat'  -p -@ $addthreads infile   > '/galaxy/server/database/objects/7/a/b/dataset_7ab8ff86-397c-44b9-b902-54605e58715f.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "true", "sparse": "false", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 290, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "8532ae5cf5e6a37f", "src": "hda", "uuid": "8e3d994f-1919-4bea-906c-c2664f61c122"}, "cond_region|targetregions": {"id": "46cbb68434312fed", "src": "hda", "uuid": "bbfab167-2c55-4747-a520-c6ae5d3fa5a0"}}, "outputs": {"output": {"id": "d135d09709241403", "src": "hda", "uuid": "7ab8ff86-397c-44b9-b902-54605e58715f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:57:45", "plugin": "core", "name": "end_epoch", "raw_value": "1754229465.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:57:45", "plugin": "core", "name": "start_epoch", "raw_value": "1754229465.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.5-9", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.5", "test_index": 9, "time_seconds": 33.764588356018066, "inputs": {"input": {"src": "hda", "id": "602c605939c7f907"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "a5faf9594d388ac8"}, "cond_region|select_region": "tab"}, "job": {"model_class": "Job", "id": "cd70a7fed8b291f9", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.5", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:58:18.329401", "update_time": "2025-08-03T13:58:30.699964", "galaxy_version": "24.1", "external_id": "gxy-58q8x", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/1/3/3/dataset_13349c43-5c91-410b-92aa-25309ef1edb4.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/5/8/8/metadata_588b822a-3ed0-4900-ae74-271d0fde20bb.dat' infile.bai &&       samtools stats     -t '/galaxy/server/database/objects/3/e/3/dataset_3e3d81f1-d87b-4ca6-8245-81c750da096c.dat'   -@ $addthreads infile   > '/galaxy/server/database/objects/4/1/3/dataset_413917ce-0ed2-40e4-bc9d-458d23c226cc.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.20 (using htslib 1.20)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "false", "sparse": "false", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 293, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "read_group": null, "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "false", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "602c605939c7f907", "src": "hda", "uuid": "13349c43-5c91-410b-92aa-25309ef1edb4"}, "cond_region|targetregions": {"id": "a5faf9594d388ac8", "src": "hda", "uuid": "3e3d81f1-d87b-4ca6-8245-81c750da096c"}}, "outputs": {"output": {"id": "5ad96e35c19badfa", "src": "hda", "uuid": "413917ce-0ed2-40e4-bc9d-458d23c226cc"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 13:58:20", "plugin": "core", "name": "end_epoch", "raw_value": "1754229500.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:58:20", "plugin": "core", "name": "start_epoch", "raw_value": "1754229500.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-0", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 0, "time_seconds": 79.32280969619751, "inputs": {"singtabop|input": {"src": "hda", "id": "0df8122e5adbfb24"}, "singtabop|user|select_cols_wanted": "2:4,2,2", "singtabop|user|select_rows_wanted": "2:5,3,3", "singtabop|user|select_keepdupe": "select_cols_keepdupe", "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "54b568464022653e", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:04:14.657971", "update_time": "2025-08-03T13:05:07.724421", "galaxy_version": "24.1", "external_id": "gxy-kz4f7", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/2/configs/tmp7l4o1g1e' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 1, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"2:4,2,2\", \"select_keepdupe\": \"select_cols_keepdupe\", \"select_rows_wanted\": \"2:5,3,3\"}}"}, "inputs": {"singtabop|input": {"id": "0df8122e5adbfb24", "src": "hda", "uuid": "a10b6bbd-8dce-47d3-89c1-2b69ab4dda2f"}}, "outputs": {"table": {"id": "54b568464022653e", "src": "hda", "uuid": "3dc2b099-972c-4ede-8386-03920ad79a32"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:04:54", "plugin": "core", "name": "end_epoch", "raw_value": "1754226294.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:04:53", "plugin": "core", "name": "start_epoch", "raw_value": "1754226293.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-1", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 1, "time_seconds": 31.992981433868408, "inputs": {"singtabop|input": {"src": "hda", "id": "8d7b01394d3438f0"}, "singtabop|user|select_cols_wanted": "2:4,2,2", "singtabop|user|select_keepdupe": ["select_cols_keepdupe", "select_rows_keepdupe"], "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "fd2eaf0dcd112521", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:05:27.255510", "update_time": "2025-08-03T13:05:39.841241", "galaxy_version": "24.1", "external_id": "gxy-9p7zh", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/4/configs/tmp0z9pvo4k' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 3, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"2:4,2,2\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": null}}"}, "inputs": {"singtabop|input": {"id": "8d7b01394d3438f0", "src": "hda", "uuid": "a0ed8676-5fed-4ab5-be68-2e0ecb53da5d"}}, "outputs": {"table": {"id": "fd2eaf0dcd112521", "src": "hda", "uuid": "4d3a04dc-684d-4190-a8c5-93c479c64f81"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:05:29", "plugin": "core", "name": "end_epoch", "raw_value": "1754226329.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:05:28", "plugin": "core", "name": "start_epoch", "raw_value": "1754226328.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-10", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 10, "time_seconds": 33.840983390808105, "inputs": {"singtabop|input": {"src": "hda", "id": "4135f8b1fd532fcc"}, "singtabop|user|element|scale_op": "mod", "singtabop|user|element|scale_value": "5", "singtabop|user|element|mode": "scale", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "df7cc2563c659672", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:10:08.538874", "update_time": "2025-08-03T13:10:22.559183", "galaxy_version": "24.1", "external_id": "gxy-2wlhq", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/21/configs/tmpkdtz3tut' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 2, \"mode\": \"scale\", \"scale_op\": \"mod\", \"scale_value\": \"5.0\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "4135f8b1fd532fcc", "src": "hda", "uuid": "66c3b76f-2aac-4374-8157-4be812f55fea"}}, "outputs": {"table": {"id": "df7cc2563c659672", "src": "hda", "uuid": "8723a2fa-56e4-43d3-b6e7-26ad33c15ccc"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:10:10", "plugin": "core", "name": "start_epoch", "raw_value": "1754226610.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:10:11", "plugin": "core", "name": "end_epoch", "raw_value": "1754226611.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-11", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 11, "time_seconds": 34.34222984313965, "inputs": {"singtabop|input": {"src": "hda", "id": "7e74cc76ec84da0d"}, "singtabop|user|matrixapply_func|custom_func": "vec.sum()+vec.median()", "singtabop|user|matrixapply_func|vector_op": "custom", "singtabop|user|dimension": "0", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_row"], "precision": "2"}, "job": {"model_class": "Job", "id": "ed1d11a6efdbfb52", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:10:43.174748", "update_time": "2025-08-03T13:10:57.036553", "galaxy_version": "24.1", "external_id": "gxy-pxnlc", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/23/configs/tmpix2j90ix' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 22, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"0\", \"matrixapply_func\": {\"__current_case__\": 0, \"custom_func\": \"vec.sum()+vec.median()\", \"vector_op\": \"custom\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"singtabop|input": {"id": "7e74cc76ec84da0d", "src": "hda", "uuid": "89b5df05-70c3-4605-8765-49b7363f9fd4"}}, "outputs": {"table": {"id": "ed1d11a6efdbfb52", "src": "hda", "uuid": "263d9de8-0a93-4ac3-93c6-201eba9efb80"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:10:44", "plugin": "core", "name": "start_epoch", "raw_value": "1754226644.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:10:46", "plugin": "core", "name": "end_epoch", "raw_value": "1754226646.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-12", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 12, "time_seconds": 32.319708585739136, "inputs": {"singtabop|input": {"src": "hda", "id": "cb98a061788f655d"}, "singtabop|user|element|custom_expr": "(math.log10(elem)+elem)/elem if (elem < math.inf) else 1.0", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_value": "0", "singtabop|user|elem_val|element_op": "gt", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "0aa9cd16baf42450", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:11:15.631252", "update_time": "2025-08-03T13:11:29.375830", "galaxy_version": "24.1", "external_id": "gxy-czf6t", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/25/configs/tmp2bej69qy' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 24, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 3, \"element_op\": \"gt\", \"element_value\": \"0\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"(math.log10(elem)+elem)/elem if (elem < math.inf) else 1.0\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "cb98a061788f655d", "src": "hda", "uuid": "a88ce190-f936-4074-88fc-59f888cf1040"}}, "outputs": {"table": {"id": "0aa9cd16baf42450", "src": "hda", "uuid": "5d76e2b9-6471-4191-902a-fa43a42b322c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:11:17", "plugin": "core", "name": "start_epoch", "raw_value": "1754226677.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:11:18", "plugin": "core", "name": "end_epoch", "raw_value": "1754226678.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-13", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 13, "time_seconds": 33.642906665802, "inputs": {"singtabop|input": {"src": "hda", "id": "b0cfa207f1442278"}, "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element"}, "job": {"model_class": "Job", "id": "d89a29de44c760a7", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:11:48.980115", "update_time": "2025-08-03T13:12:02.966450", "galaxy_version": "24.1", "external_id": "gxy-gbn9m", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/27/configs/tmp6wuzf7w0' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 26, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "b0cfa207f1442278", "src": "hda", "uuid": "3f96e0f3-32c9-41c4-b852-f1c4590776fa"}}, "outputs": {"table": {"id": "d89a29de44c760a7", "src": "hda", "uuid": "e14bd289-9ad4-4592-bb0a-58d94fb0eb86"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:11:50", "plugin": "core", "name": "start_epoch", "raw_value": "1754226710.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:11:51", "plugin": "core", "name": "end_epoch", "raw_value": "1754226711.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-14", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 14, "time_seconds": 33.32627820968628, "inputs": {"singtabop|input": {"src": "hda", "id": "4ea9b4a22a7abbe2"}, "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element"}, "job": {"model_class": "Job", "id": "8e6afca81f57fa32", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:12:22.357788", "update_time": "2025-08-03T13:12:36.435770", "galaxy_version": "24.1", "external_id": "gxy-zmjmc", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/29/configs/tmpjcs27an_' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 28, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "4ea9b4a22a7abbe2", "src": "hda", "uuid": "ae2ddcc1-fbff-4cb1-b314-cdd4c9fcb758"}}, "outputs": {"table": {"id": "8e6afca81f57fa32", "src": "hda", "uuid": "4da8b7f4-9f89-4501-a6a4-c9421e935a40"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:12:24", "plugin": "core", "name": "start_epoch", "raw_value": "1754226744.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:12:25", "plugin": "core", "name": "end_epoch", "raw_value": "1754226745.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-15", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 15, "time_seconds": 34.6181960105896, "inputs": {"singtabop|input": {"src": "hda", "id": "7e2076a0cceb92e1"}, "singtabop|user|general|fulltable_custom_expr": "table - table.mean(0) / table.std(0)", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "68fbbe7f0358a7fb", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:12:56.701750", "update_time": "2025-08-03T13:13:11.194352", "galaxy_version": "24.1", "external_id": "gxy-rsw5k", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/31/configs/tmpbyzkj18q' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 30, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table - table.mean(0) / table.std(0)\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "7e2076a0cceb92e1", "src": "hda", "uuid": "bdbc9f82-4941-4fcb-99de-663c31919793"}}, "outputs": {"table": {"id": "68fbbe7f0358a7fb", "src": "hda", "uuid": "dc51993b-7f1a-43fc-9f4d-25ca94b84720"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:12:59", "plugin": "core", "name": "start_epoch", "raw_value": "1754226779.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:13:00", "plugin": "core", "name": "end_epoch", "raw_value": "1754226780.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-16", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 16, "time_seconds": 33.66377854347229, "inputs": {"singtabop|tables_0|input": {"src": "hda", "id": "2bcbb1ce8c10ff70"}, "singtabop|tables_1|input": {"src": "hda", "id": "2bcbb1ce8c10ff70"}, "singtabop|tables_2|input": {"src": "hda", "id": "2bcbb1ce8c10ff70"}, "singtabop|fulltable_custom_expr": "(3 * table1) + np.log(table3 + 20) - table2", "singtabop|use_type": "multiple"}, "job": {"model_class": "Job", "id": "7144078cfab9170a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:13:30.720774", "update_time": "2025-08-03T13:13:44.765668", "galaxy_version": "24.1", "external_id": "gxy-l76g8", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/33/configs/tmplgkiqgnv' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 1, \"fulltable_custom_expr\": \"(3 * table1) + np.log(table3 + 20) - table2\", \"tables\": [{\"__index__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 32, \"src\": \"hda\"}]}}, {\"__index__\": 1, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 32, \"src\": \"hda\"}]}}, {\"__index__\": 2, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 32, \"src\": \"hda\"}]}}], \"use_type\": \"multiple\"}"}, "inputs": {"singtabop|tables_0|input": {"id": "2bcbb1ce8c10ff70", "src": "hda", "uuid": "24c4bb9a-a5f5-43c5-824a-3c9e3ce7402a"}, "singtabop|tables_1|input": {"id": "2bcbb1ce8c10ff70", "src": "hda", "uuid": "24c4bb9a-a5f5-43c5-824a-3c9e3ce7402a"}, "singtabop|tables_2|input": {"id": "2bcbb1ce8c10ff70", "src": "hda", "uuid": "24c4bb9a-a5f5-43c5-824a-3c9e3ce7402a"}}, "outputs": {"table": {"id": "7144078cfab9170a", "src": "hda", "uuid": "cc87a30e-39da-4f1d-ad14-daaf7b4605cf"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:13:32", "plugin": "core", "name": "start_epoch", "raw_value": "1754226812.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:13:33", "plugin": "core", "name": "end_epoch", "raw_value": "1754226813.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-17", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 17, "time_seconds": 32.31592392921448, "inputs": {"singtabop|input": {"src": "hda", "id": "4babdf7f237363ad"}, "singtabop|user|general|fulltable_custom_expr": "table * 2", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "c20fbcfc2da8f521", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:14:03.530189", "update_time": "2025-08-03T13:14:17.299731", "galaxy_version": "24.1", "external_id": "gxy-5tb77", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/35/configs/tmpnpe7rpmh' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 34, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table * 2\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "4babdf7f237363ad", "src": "hda", "uuid": "61e1b2a0-0808-416b-b34a-af3261f049e5"}}, "outputs": {"table": {"id": "c20fbcfc2da8f521", "src": "hda", "uuid": "627c4242-8b56-45bb-bffe-b55a35ab156b"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:14:05", "plugin": "core", "name": "start_epoch", "raw_value": "1754226845.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:14:06", "plugin": "core", "name": "end_epoch", "raw_value": "1754226846.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-18", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 18, "time_seconds": 32.25826358795166, "inputs": {"singtabop|input": {"src": "hda", "id": "d7b87e0f60848a9c"}, "singtabop|user|general|fulltable_custom_expr": "table == 5", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "112fb7b88038090e", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:14:36.822803", "update_time": "2025-08-03T13:14:49.569667", "galaxy_version": "24.1", "external_id": "gxy-cpgs4", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/37/configs/tmpqfxeuhte' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table == 5\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "d7b87e0f60848a9c", "src": "hda", "uuid": "3c0e49df-6c26-4a35-b0f2-a1369ecfb753"}}, "outputs": {"table": {"id": "112fb7b88038090e", "src": "hda", "uuid": "26341fb0-693f-4849-be4c-8179aa29867b"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:14:37", "plugin": "core", "name": "start_epoch", "raw_value": "1754226877.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:14:39", "plugin": "core", "name": "end_epoch", "raw_value": "1754226879.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-19", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 19, "time_seconds": 18.38204574584961, "inputs": {"singtabop|input": {"src": "hda", "id": "5f50a673bc648679"}, "singtabop|user|general|fulltable_custom_expr": "for n in table: n = n + 1", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "execution_problem": "Parameter fulltable_custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-2", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 2, "time_seconds": 33.54939365386963, "inputs": {"singtabop|input": {"src": "hda", "id": "49eb6e6961cbae01"}, "singtabop|user|select_rows_wanted": "2:5,3,3", "singtabop|user|select_keepdupe": "select_cols_keepdupe", "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "531a6ca6ecd998ee", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:05:58.644305", "update_time": "2025-08-03T13:06:13.293187", "galaxy_version": "24.1", "external_id": "gxy-kkkbq", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/6/configs/tmp49o8nh88' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": null, \"select_keepdupe\": \"select_cols_keepdupe\", \"select_rows_wanted\": \"2:5,3,3\"}}"}, "inputs": {"singtabop|input": {"id": "49eb6e6961cbae01", "src": "hda", "uuid": "f6849cc7-e8f6-482c-82a8-8957679105b3"}}, "outputs": {"table": {"id": "531a6ca6ecd998ee", "src": "hda", "uuid": "0c700adf-3706-405d-8d67-34a51cf74a0c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:06:02", "plugin": "core", "name": "end_epoch", "raw_value": "1754226362.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:06:01", "plugin": "core", "name": "start_epoch", "raw_value": "1754226361.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-20", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 20, "time_seconds": 19.369590759277344, "inputs": {"singtabop|input": {"src": "hda", "id": "c236803fc9a7f15d"}, "singtabop|user|general|fulltable_custom_expr": "table + table[0,0]", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "execution_problem": "Parameter fulltable_custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-21", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 21, "time_seconds": 34.907065629959106, "inputs": {"singtabop|input": {"src": "hda", "id": "6f8ab1c320d9a032"}, "singtabop|user|general|use": "transpose", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_col"]}, "job": {"model_class": "Job", "id": "46673548a3836a1b", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:15:47.334018", "update_time": "2025-08-03T13:16:02.262313", "galaxy_version": "24.1", "external_id": "gxy-cst78", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/41/configs/tmp4n655xis' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 40, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 0, \"use\": \"transpose\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "6f8ab1c320d9a032", "src": "hda", "uuid": "03bbdbf3-7b5b-4246-8ac7-c8b9c24d3040"}}, "outputs": {"table": {"id": "46673548a3836a1b", "src": "hda", "uuid": "ee33d866-6321-4394-9301-57ff4c411d64"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:15:51", "plugin": "core", "name": "end_epoch", "raw_value": "1754226951.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:15:50", "plugin": "core", "name": "start_epoch", "raw_value": "1754226950.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-22", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 22, "time_seconds": 32.299720287323, "inputs": {"singtabop|input": {"src": "hda", "id": "a91004c72325a4f4"}, "singtabop|user|general|id_vars": "cell1,cell3", "singtabop|user|general|value_vars": "cell5,cell6", "singtabop|user|general|use": "melt", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_col"]}, "job": {"model_class": "Job", "id": "f90b9516e9bbee60", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:16:21.633979", "update_time": "2025-08-03T13:16:34.766674", "galaxy_version": "24.1", "external_id": "gxy-brs6q", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/43/configs/tmpifoyonx_' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 42, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 1, \"id_vars\": \"cell1,cell3\", \"use\": \"melt\", \"value_vars\": \"cell5,cell6\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "a91004c72325a4f4", "src": "hda", "uuid": "81045414-8bc6-48f9-bab4-9a20d67d76e8"}}, "outputs": {"table": {"id": "f90b9516e9bbee60", "src": "hda", "uuid": "b7490a11-1d11-4126-af84-073b228ccd6a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:16:24", "plugin": "core", "name": "end_epoch", "raw_value": "1754226984.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:16:23", "plugin": "core", "name": "start_epoch", "raw_value": "1754226983.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-23", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 23, "time_seconds": 32.3277485370636, "inputs": {"singtabop|input": {"src": "hda", "id": "de42eb4728530320"}, "singtabop|user|general|index": "cell1", "singtabop|user|general|column": "cell2", "singtabop|user|general|values": "cell3,cell7,cell9", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "c312d3c448f62892", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:16:53.404882", "update_time": "2025-08-03T13:17:07.299630", "galaxy_version": "24.1", "external_id": "gxy-b2hcq", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/45/configs/tmpu2rjeyf3' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 44, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [], \"column\": \"cell2\", \"index\": \"cell1\", \"use\": \"pivot\", \"values\": \"cell3,cell7,cell9\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "de42eb4728530320", "src": "hda", "uuid": "e5b2d375-4505-474f-9c07-3bf7dde43ce8"}}, "outputs": {"table": {"id": "c312d3c448f62892", "src": "hda", "uuid": "4d544b1d-6b61-4167-b1c5-2885f29299f5"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:16:56", "plugin": "core", "name": "end_epoch", "raw_value": "1754227016.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:16:55", "plugin": "core", "name": "start_epoch", "raw_value": "1754227015.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-24", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 24, "time_seconds": 32.33863162994385, "inputs": {"singtabop|input": {"src": "hda", "id": "d6e736d6d8309889"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|select_cols_wanted": "1,1,3", "singtabop|user|select_rows_wanted": "1:3,2", "singtabop|user|select_keepdupe": ["select_cols_keepdupe", "select_rows_keepdupe"], "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "7b5035f8cb503988", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:17:26.076893", "update_time": "2025-08-03T13:17:39.691481", "galaxy_version": "24.1", "external_id": "gxy-6rjx7", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/47/configs/tmpwfwgpefo' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 46, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"1,1,3\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": \"1:3,2\"}}"}, "inputs": {"singtabop|input": {"id": "d6e736d6d8309889", "src": "hda", "uuid": "f700d093-2c5b-4c1f-8f56-c8662ef005a1"}}, "outputs": {"table": {"id": "7b5035f8cb503988", "src": "hda", "uuid": "30a1dfeb-2cfd-4499-a184-a747ecc59dad"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:17:29", "plugin": "core", "name": "end_epoch", "raw_value": "1754227049.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:17:28", "plugin": "core", "name": "start_epoch", "raw_value": "1754227048.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-25", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 25, "time_seconds": 26.507033348083496, "inputs": {"singtabop|input": {"src": "hda", "id": "5078cdad111f98ac"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "lt", "singtabop|user|filtersumval_mode|against": "50", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "1433b7347d5c084a", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:17:59.462436", "update_time": "2025-08-03T13:18:06.248544", "galaxy_version": "24.1", "external_id": "gxy-4wh9c", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/49/configs/tmp9p9ycr_c' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"50.0\", \"compare_op\": \"lt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "5078cdad111f98ac", "src": "hda", "uuid": "c1fe67ec-06e4-475d-a2c8-9fb04847e0d5"}}, "outputs": {"table": {"id": "1433b7347d5c084a", "src": "hda", "uuid": "ab4afe72-13e0-4491-9e5c-4bf4ad3b15d0"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "table_compute/1.2.4+galaxy0-26", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 26, "time_seconds": 34.492931604385376, "inputs": {"singtabop|input": {"src": "hda", "id": "1a56743325f7a750"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "elem < 10", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "827bd9dc97101b57", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:18:26.938727", "update_time": "2025-08-03T13:18:40.685955", "galaxy_version": "24.1", "external_id": "gxy-n4ddt", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/51/configs/tmps8vyfl4g' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"elem < 10\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "1a56743325f7a750", "src": "hda", "uuid": "c7248bf5-2a67-44ce-869f-3c8748325373"}}, "outputs": {"table": {"id": "827bd9dc97101b57", "src": "hda", "uuid": "3fde81cf-8300-4ffe-aa9d-365b5af4156e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:18:29", "plugin": "core", "name": "end_epoch", "raw_value": "1754227109.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:18:28", "plugin": "core", "name": "start_epoch", "raw_value": "1754227108.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-27", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 27, "time_seconds": 33.29213070869446, "inputs": {"singtabop|input": {"src": "hda", "id": "fdf46c7a8d2aa947"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|matrixapply_func|vector_op": "sum", "singtabop|user|dimension": "1", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "b12b6d2166c815dd", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:18:59.853186", "update_time": "2025-08-03T13:19:14.033725", "galaxy_version": "24.1", "external_id": "gxy-t7lkb", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/53/configs/tmpx0tw8uiw' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 52, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"1\", \"matrixapply_func\": {\"__current_case__\": 3, \"vector_op\": \"sum\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"singtabop|input": {"id": "fdf46c7a8d2aa947", "src": "hda", "uuid": "62c74fb3-6c52-4dfc-bf13-0f16558dca19"}}, "outputs": {"table": {"id": "b12b6d2166c815dd", "src": "hda", "uuid": "2f52b295-2b87-4e7f-82cd-7c7062100175"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:19:02", "plugin": "core", "name": "end_epoch", "raw_value": "1754227142.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:19:01", "plugin": "core", "name": "start_epoch", "raw_value": "1754227141.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-28", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 28, "time_seconds": 35.924582719802856, "inputs": {"singtabop|input": {"src": "hda", "id": "413e83bacd1e345e"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "(math.log(elem) / elem) if (elem > 5) else 1", "singtabop|user|element|mode": "custom", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "aedfc8ac8339d938", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:19:36.176915", "update_time": "2025-08-03T13:19:50.090844", "galaxy_version": "24.1", "external_id": "gxy-4hbfm", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/55/configs/tmp5jkqkj_5' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 54, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"(math.log(elem) / elem) if (elem > 5) else 1\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "413e83bacd1e345e", "src": "hda", "uuid": "bcc1a16c-7ba5-460e-9108-6ba36e6215b9"}}, "outputs": {"table": {"id": "aedfc8ac8339d938", "src": "hda", "uuid": "c6142270-d293-4ba7-9d14-4c816b703d65"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:19:39", "plugin": "core", "name": "end_epoch", "raw_value": "1754227179.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:19:38", "plugin": "core", "name": "start_epoch", "raw_value": "1754227178.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-29", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 29, "time_seconds": 33.14505696296692, "inputs": {"singtabop|input": {"src": "hda", "id": "c05817ec5d733ee3"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|fulltable_custom_expr": "table - table.mean(0)/table.std(0)", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "cd365441a1be153e", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:20:09.011350", "update_time": "2025-08-03T13:20:23.089864", "galaxy_version": "24.1", "external_id": "gxy-fw9c2", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/57/configs/tmpt3v8rki8' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 56, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table - table.mean(0)/table.std(0)\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "c05817ec5d733ee3", "src": "hda", "uuid": "8b190a5c-25f3-48ec-98b9-3179a58b1afa"}}, "outputs": {"table": {"id": "cd365441a1be153e", "src": "hda", "uuid": "5c6da6dc-a277-4358-be3d-51557b6f6365"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:20:12", "plugin": "core", "name": "end_epoch", "raw_value": "1754227212.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:20:11", "plugin": "core", "name": "start_epoch", "raw_value": "1754227211.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-3", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 3, "time_seconds": 33.47556114196777, "inputs": {"singtabop|input": {"src": "hda", "id": "b44f757e8340cc24"}, "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "gt", "singtabop|user|filtersumval_mode|against": "50", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "a0e31ec39a5d5253", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:06:32.898740", "update_time": "2025-08-03T13:06:46.994978", "galaxy_version": "24.1", "external_id": "gxy-2mpbl", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/8/configs/tmpzbm2vy9j' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 7, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"50.0\", \"compare_op\": \"gt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "b44f757e8340cc24", "src": "hda", "uuid": "f34f8f9d-b6c6-409c-b12b-e06c88a4de7a"}}, "outputs": {"table": {"id": "a0e31ec39a5d5253", "src": "hda", "uuid": "7ec76f93-2b4b-4e54-bf47-0895cfdf6d44"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:06:35", "plugin": "core", "name": "end_epoch", "raw_value": "1754226395.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:06:34", "plugin": "core", "name": "start_epoch", "raw_value": "1754226394.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-30", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 30, "time_seconds": 13.010023593902588, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-31", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 31, "time_seconds": 25.919724702835083, "inputs": {"singtabop|input": {"src": "hda", "id": "7f6c907d6b63fe27"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|id_vars": "A", "singtabop|user|general|value_vars": "B,C", "singtabop|user|general|use": "melt", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "87cf5ece3b1e98eb", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:20:56.851363", "update_time": "2025-08-03T13:21:02.135517", "galaxy_version": "24.1", "external_id": "gxy-srqtk", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/62/configs/tmpge266o5g' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 61, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 1, \"id_vars\": \"A\", \"use\": \"melt\", \"value_vars\": \"B,C\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "7f6c907d6b63fe27", "src": "hda", "uuid": "5e986409-992f-4948-87ff-20016bfda39d"}}, "outputs": {"table": {"id": "87cf5ece3b1e98eb", "src": "hda", "uuid": "464191ba-ba65-474f-81c3-fc21f3b5f23a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "table_compute/1.2.4+galaxy0-32", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 32, "time_seconds": 33.16518425941467, "inputs": {"singtabop|input": {"src": "hda", "id": "f28cf9c7ace7cc22"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|index": "foo", "singtabop|user|general|column": "bar", "singtabop|user|general|values": "baz", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "14ae2d320b345cea", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:21:21.220776", "update_time": "2025-08-03T13:21:35.476140", "galaxy_version": "24.1", "external_id": "gxy-m5hjl", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/64/configs/tmpcuksczx9' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 63, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [], \"column\": \"bar\", \"index\": \"foo\", \"use\": \"pivot\", \"values\": \"baz\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "f28cf9c7ace7cc22", "src": "hda", "uuid": "ab085e1c-d147-47f0-8a0f-05a63e13e8ab"}}, "outputs": {"table": {"id": "14ae2d320b345cea", "src": "hda", "uuid": "dcfda1e7-3b27-43c4-b020-25a0ca67cf20"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:21:24", "plugin": "core", "name": "end_epoch", "raw_value": "1754227284.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:21:23", "plugin": "core", "name": "start_epoch", "raw_value": "1754227283.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-33", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 33, "time_seconds": 25.96143651008606, "inputs": {"singtabop|input": {"src": "hda", "id": "3ffc06f5d6b81823"}, "singtabop|user|select_cols_wanted": "-2:2,1,-1", "singtabop|user|select_rows_wanted": "1,3:-3,1", "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "bcca247b0ecca5e4", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "error", "exit_code": null, "create_time": "2025-08-03T13:21:55.740517", "update_time": "2025-08-03T13:22:01.385105", "galaxy_version": "24.1", "external_id": "gxy-zg8pd", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/66/configs/tmpq163rayk' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 65, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"-2:2,1,-1\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": \"1,3:-3,1\"}}"}, "inputs": {"singtabop|input": {"id": "3ffc06f5d6b81823", "src": "hda", "uuid": "6afe58d7-d2aa-43bd-bece-ca3b52f68730"}}, "outputs": {"table": {"id": "bcca247b0ecca5e4", "src": "hda", "uuid": "d468e4f4-7f5e-4670-8258-b7746ddc1bde"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stdout": "", "stderr": "", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "table_compute/1.2.4+galaxy0-34", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 34, "time_seconds": 33.030433893203735, "inputs": {"singtabop|input": {"src": "hda", "id": "b8d21cf465a929a3"}, "singtabop|user|select_cols_wanted": "-1,-3,3:-3,2", "singtabop|user|select_rows_wanted": "3:-1", "singtabop|user|select_keepdupe": "", "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "2523543ad5b966b2", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:22:20.418357", "update_time": "2025-08-03T13:22:34.615216", "galaxy_version": "24.1", "external_id": "gxy-dwxf7", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/68/configs/tmpj012pemc' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 67, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"-1,-3,3:-3,2\", \"select_keepdupe\": [], \"select_rows_wanted\": \"3:-1\"}}"}, "inputs": {"singtabop|input": {"id": "b8d21cf465a929a3", "src": "hda", "uuid": "b6e698d0-e802-45a8-8519-6527b17bfa6d"}}, "outputs": {"table": {"id": "2523543ad5b966b2", "src": "hda", "uuid": "5b26e1cf-d0ff-4694-9760-46e57c5e4ecd"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:22:23", "plugin": "core", "name": "end_epoch", "raw_value": "1754227343.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:22:22", "plugin": "core", "name": "start_epoch", "raw_value": "1754227342.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-35", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 35, "time_seconds": 11.647993803024292, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-36", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 36, "time_seconds": 32.14458966255188, "inputs": {"singtabop|input": {"src": "hda", "id": "12051669613774c8"}, "singtabop|adv|header": "2", "singtabop|adv|skipfooter": "2", "singtabop|adv|skip_blank_lines": false, "singtabop|user|mode": "precision", "singtabop|use_type": "single", "out_opts": "", "precision": "2"}, "job": {"model_class": "Job", "id": "d3cb02f3f396269d", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:23:05.603362", "update_time": "2025-08-03T13:23:18.606139", "galaxy_version": "24.1", "external_id": "gxy-fp5x5", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/71/configs/tmpm0p0_aeh' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"2\", \"nrows\": \"\", \"skip_blank_lines\": false, \"skipfooter\": \"2\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 0, \"mode\": \"precision\"}}"}, "inputs": {"singtabop|input": {"id": "12051669613774c8", "src": "hda", "uuid": "86486065-9fe3-4449-b9d7-887527d546ef"}}, "outputs": {"table": {"id": "d3cb02f3f396269d", "src": "hda", "uuid": "d39633f9-eb9d-41a5-98e5-8e9557f8a685"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:23:08", "plugin": "core", "name": "end_epoch", "raw_value": "1754227388.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:23:07", "plugin": "core", "name": "start_epoch", "raw_value": "1754227387.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-37", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 37, "time_seconds": 34.57781505584717, "inputs": {"singtabop|input": {"src": "hda", "id": "290638e173a1d779"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "chr{elem:.0f}", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|select_cols_wanted": "2", "singtabop|user|elem_val|select_rows_wanted": "2,4", "singtabop|user|elem_val|inclusive_selection": true, "singtabop|user|elem_val|element_op": "rowcol", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "c0f18a8117751a1f", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:23:38.029062", "update_time": "2025-08-03T13:23:52.997044", "galaxy_version": "24.1", "external_id": "gxy-fqqz4", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/73/configs/tmp7qzgr4cr' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 7, \"element_op\": \"rowcol\", \"inclusive_selection\": true, \"select_cols_wanted\": \"2\", \"select_rows_wanted\": \"2,4\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"chr{elem:.0f}\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "290638e173a1d779", "src": "hda", "uuid": "959ace22-8c2b-431d-b27c-defab70626a5"}}, "outputs": {"table": {"id": "c0f18a8117751a1f", "src": "hda", "uuid": "6f41c03a-5c3e-42e7-86bd-3b8c9618328f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:23:41", "plugin": "core", "name": "end_epoch", "raw_value": "1754227421.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:23:40", "plugin": "core", "name": "start_epoch", "raw_value": "1754227420.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-38", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 38, "time_seconds": 31.69552969932556, "inputs": {"singtabop|input": {"src": "hda", "id": "6c52c1e646e28c17"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "chr{elem:.0f}", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|select_cols_wanted": "2", "singtabop|user|elem_val|select_rows_wanted": "2,4", "singtabop|user|elem_val|inclusive_selection": false, "singtabop|user|elem_val|element_op": "rowcol", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "82ebc9d229522b5e", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:24:11.356452", "update_time": "2025-08-03T13:24:24.712226", "galaxy_version": "24.1", "external_id": "gxy-2hhm2", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/75/configs/tmpv7vmox5a' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 74, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 7, \"element_op\": \"rowcol\", \"inclusive_selection\": false, \"select_cols_wanted\": \"2\", \"select_rows_wanted\": \"2,4\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"chr{elem:.0f}\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "6c52c1e646e28c17", "src": "hda", "uuid": "122371a4-e95f-46e5-9293-9db016b87aa8"}}, "outputs": {"table": {"id": "82ebc9d229522b5e", "src": "hda", "uuid": "8f246cc5-125e-42af-9a0c-5101c8a8a8c2"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:24:13", "plugin": "core", "name": "end_epoch", "raw_value": "1754227453.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:24:12", "plugin": "core", "name": "start_epoch", "raw_value": "1754227452.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-39", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 39, "time_seconds": 32.96483564376831, "inputs": {"singtabop|input": {"src": "hda", "id": "d9a66081fb62bea7"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "a'+'b", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "8700b2a6acf2200c", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:24:44.132047", "update_time": "2025-08-03T13:24:57.943271", "galaxy_version": "24.1", "external_id": "gxy-st9cp", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/77/configs/tmp5vadj46a' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 76, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"a'+'b\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "d9a66081fb62bea7", "src": "hda", "uuid": "34ea8688-76e8-44ed-85e3-356e0bb4921d"}}, "outputs": {"table": {"id": "8700b2a6acf2200c", "src": "hda", "uuid": "054ef826-0435-49c8-92a6-0b11871925c3"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:24:46", "plugin": "core", "name": "end_epoch", "raw_value": "1754227486.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:24:45", "plugin": "core", "name": "start_epoch", "raw_value": "1754227485.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-4", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 4, "time_seconds": 31.554203987121582, "inputs": {"singtabop|input": {"src": "hda", "id": "ea2781cb7d10ee87"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "ne", "singtabop|user|filtersumval_mode|against": "0", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "d9017bb4eb327f0f", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:07:05.494722", "update_time": "2025-08-03T13:07:18.372250", "galaxy_version": "24.1", "external_id": "gxy-77z25", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/10/configs/tmps92m2f5y' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 9, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"0.0\", \"compare_op\": \"ne\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "ea2781cb7d10ee87", "src": "hda", "uuid": "1a977b91-e13f-41c6-8157-b6335b882b0a"}}, "outputs": {"table": {"id": "d9017bb4eb327f0f", "src": "hda", "uuid": "dcb33026-7c42-4bc0-9c4e-d23c39dfcb0e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:07:07", "plugin": "core", "name": "end_epoch", "raw_value": "1754226427.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:07:06", "plugin": "core", "name": "start_epoch", "raw_value": "1754226426.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-40", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 40, "time_seconds": 18.991305112838745, "inputs": {"singtabop|input": {"src": "hda", "id": "4a73b52075174c2f"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "el'+'em", "singtabop|user|element|mode": "custom", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "execution_problem": "Parameter custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-41", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 41, "time_seconds": 10.996678352355957, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-42", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 42, "time_seconds": 33.14788317680359, "inputs": {"singtabop|input": {"src": "hda", "id": "f2cd32cac37cce18"}, "singtabop|col_row_names": "has_col_names", "singtabop|user|general|index": "A", "singtabop|user|general|column": "C", "singtabop|user|general|values": "D", "singtabop|user|general|aggfunc": "max", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "86e1ed82b29002b2", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:25:47.350762", "update_time": "2025-08-03T13:26:01.252674", "galaxy_version": "24.1", "external_id": "gxy-984pl", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/81/configs/tmpclv9xpvl' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": \"has_col_names\", \"input\": {\"values\": [{\"id\": 80, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": \"max\", \"colfun_map\": [], \"column\": \"C\", \"index\": \"A\", \"use\": \"pivot\", \"values\": \"D\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "f2cd32cac37cce18", "src": "hda", "uuid": "428d1d83-d874-4bf1-a6c5-67db69f17a48"}}, "outputs": {"table": {"id": "86e1ed82b29002b2", "src": "hda", "uuid": "e8706336-fdc0-422b-9905-f2fabdee15db"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:25:50", "plugin": "core", "name": "end_epoch", "raw_value": "1754227550.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:25:49", "plugin": "core", "name": "start_epoch", "raw_value": "1754227549.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-5", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 5, "time_seconds": 33.48448157310486, "inputs": {"singtabop|input": {"src": "hda", "id": "5a2a6b2a5a0f7e55"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "gt", "singtabop|user|filtersumval_mode|against": "10", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "95749743f61679bb", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:07:37.989375", "update_time": "2025-08-03T13:07:51.904982", "galaxy_version": "24.1", "external_id": "gxy-8fz44", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/12/configs/tmpj5q1svi_' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 11, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"10.0\", \"compare_op\": \"gt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "5a2a6b2a5a0f7e55", "src": "hda", "uuid": "5e0490d5-f537-4912-80ba-74576d42a5b1"}}, "outputs": {"table": {"id": "95749743f61679bb", "src": "hda", "uuid": "2a6b14be-a59a-40f9-ad42-cb86dfc11e92"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:07:41", "plugin": "core", "name": "end_epoch", "raw_value": "1754226461.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:07:40", "plugin": "core", "name": "start_epoch", "raw_value": "1754226460.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-6", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 6, "time_seconds": 33.55208969116211, "inputs": {"singtabop|input": {"src": "hda", "id": "dfb74dd494f25b2b"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "median", "singtabop|user|filtersumval_mode|compare_op": "ge", "singtabop|user|filtersumval_mode|against": "2", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "5"}, "job": {"model_class": "Job", "id": "edcf8d2972a2c03f", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:08:10.335479", "update_time": "2025-08-03T13:08:25.673789", "galaxy_version": "24.1", "external_id": "gxy-fjrfj", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/14/configs/tmpa9wdelpd' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 13, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"2.0\", \"compare_op\": \"ge\", \"operation\": \"median\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "precision": "\"5\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"singtabop|input": {"id": "dfb74dd494f25b2b", "src": "hda", "uuid": "741c3f52-b849-4bef-8525-455fb36b33b1"}}, "outputs": {"table": {"id": "edcf8d2972a2c03f", "src": "hda", "uuid": "813345b8-36c9-4d47-ae06-e7e1523db99d"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:08:12", "plugin": "core", "name": "start_epoch", "raw_value": "1754226492.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:08:13", "plugin": "core", "name": "end_epoch", "raw_value": "1754226493.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-7", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 7, "time_seconds": 19.275741577148438, "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1436, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 175, in stage_data_in_history\n    staging_interface.handle_jobs()\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 212, in handle_jobs\n    self.galaxy_interactor.wait_for_job(job_response[\"id\"], job_response[\"history_id\"], self.maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in wait_for_job\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 403, in wait_for\n    wait_on(func, what, walltime_exceeded)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/wait.py\", line 38, in wait_on\n    value = function()\n            ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 399, in <lambda>\n    self.wait_for(lambda: self.__job_ready(job_id, history_id), maxseconds=maxseconds)\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 749, in __job_ready\n    return self._state_ready(job_id, error_msg=\"Job in error state.\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 841, in _state_ready\n    raise Exception(\nException: Job in error state.. tool_id: __DATA_FETCH__, exit_code: None, stderr: .\n", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-8", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 8, "time_seconds": 31.257667303085327, "inputs": {"singtabop|input": {"src": "hda", "id": "ef5958e930aa258b"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|minmatch": "4", "singtabop|user|filtersumval_mode|operation": "str_ne", "singtabop|user|filtersumval_mode|against": "0", "singtabop|user|filtersumval_mode|use": "element", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "3"}, "job": {"model_class": "Job", "id": "013dd6faebd01e54", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:09:03.250009", "update_time": "2025-08-03T13:09:16.152577", "galaxy_version": "24.1", "external_id": "gxy-ksrz2", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/17/configs/tmphax62no1' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 16, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 1, \"against\": \"0\", \"minmatch\": \"4\", \"operation\": \"str_ne\", \"use\": \"element\"}, \"mode\": \"filtersumval\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "precision": "\"3\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"singtabop|input": {"id": "ef5958e930aa258b", "src": "hda", "uuid": "d907c368-ab8e-44b7-84de-54445266de85"}}, "outputs": {"table": {"id": "013dd6faebd01e54", "src": "hda", "uuid": "7951c2bb-b98a-4124-97c8-7c9bba51ebb1"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:09:04", "plugin": "core", "name": "start_epoch", "raw_value": "1754226544.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:09:05", "plugin": "core", "name": "end_epoch", "raw_value": "1754226545.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-9", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 9, "time_seconds": 32.29904580116272, "inputs": {"singtabop|input": {"src": "hda", "id": "cc81f04aa1c08f80"}, "singtabop|user|matrixapply_func|vector_op": "max", "singtabop|user|dimension": "1", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_row"], "precision": "0"}, "job": {"model_class": "Job", "id": "44073abb8582d2c6", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T13:09:35.893557", "update_time": "2025-08-03T13:09:48.760319", "galaxy_version": "24.1", "external_id": "gxy-vtmhq", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/jobs_directory/000/19/configs/tmps5h5rxbk' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "user_email": "tests@fake.org", "command_version": "0.9.2", "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 18, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"1\", \"matrixapply_func\": {\"__current_case__\": 2, \"vector_op\": \"max\"}, \"mode\": \"matrixapply\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_row\"]", "precision": "\"0\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"singtabop|input": {"id": "cc81f04aa1c08f80", "src": "hda", "uuid": "8ed42802-a7c8-44d5-87d4-95a4e7a27841"}}, "outputs": {"table": {"id": "44073abb8582d2c6", "src": "hda", "uuid": "2fc2fad6-a622-43cb-8666-27aeb682ce2d"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 13:09:37", "plugin": "core", "name": "start_epoch", "raw_value": "1754226577.0000000"}, {"title": "Job End Time", "value": "2025-08-03 13:09:38", "plugin": "core", "name": "end_epoch", "raw_value": "1754226578.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfcommonsamples/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfcommonsamples", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 42.680158615112305, "inputs": {"input1": {"src": "hda", "id": "7c557c353725e6fa"}, "input2": {"src": "hda", "id": "4a8d42d1a4d77029"}}, "job": {"model_class": "Job", "id": "dda86c0adc48b6bf", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfcommonsamples/vcfcommonsamples/1.0.0_rc3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:01:26.441379", "update_time": "2025-08-03T14:01:46.933158", "galaxy_version": "24.1", "external_id": "gxy-lkgh9", "handler": null, "job_runner_name": null, "command_line": "vcfcommonsamples '/galaxy/server/database/objects/2/3/6/dataset_236879bb-d509-4ef3-92ef-6e9ad863e602.dat' '/galaxy/server/database/objects/b/e/2/dataset_be23d124-9743-46d9-8280-a4e9273db8f2.dat' > '/galaxy/server/database/objects/f/8/5/dataset_f8514664-0a74-411b-aba9-8f843c52f478.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input1": {"id": "7c557c353725e6fa", "src": "hda", "uuid": "236879bb-d509-4ef3-92ef-6e9ad863e602"}, "input2": {"id": "4a8d42d1a4d77029", "src": "hda", "uuid": "be23d124-9743-46d9-8280-a4e9273db8f2"}}, "outputs": {"out_file1": {"id": "f841449a1691d100", "src": "hda", "uuid": "f8514664-0a74-411b-aba9-8f843c52f478"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 14:01:34", "plugin": "core", "name": "end_epoch", "raw_value": "1754229694.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:01:34", "plugin": "core", "name": "start_epoch", "raw_value": "1754229694.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfdistance/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfdistance", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 32.31449341773987, "inputs": {"input1": {"src": "hda", "id": "749ef4e1597ec861"}}, "job": {"model_class": "Job", "id": "8fd41935733af45c", "history_id": "0df8122e5adbfb24", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfdistance/vcfdistance/1.0.0_rc3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2025-08-03T14:02:07.732574", "update_time": "2025-08-03T14:02:20.643051", "galaxy_version": "24.1", "external_id": "gxy-c5dft", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/objects/d/f/c/dataset_dfc3b4a2-32f4-40fa-aa42-9b6184049d4d.dat' | vcfdistance > '/galaxy/server/database/objects/8/2/8/dataset_8289a680-1e05-4b28-83d3-2b26f593eec4.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input1": {"id": "749ef4e1597ec861", "src": "hda", "uuid": "dfc3b4a2-32f4-40fa-aa42-9b6184049d4d"}}, "outputs": {"out_file1": {"id": "895cb400ee0bd2c3", "src": "hda", "uuid": "8289a680-1e05-4b28-83d3-2b26f593eec4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2025-08-03 14:02:10", "plugin": "core", "name": "end_epoch", "raw_value": "1754229730.0000000"}, {"title": "Job Start Time", "value": "2025-08-03 14:02:10", "plugin": "core", "name": "start_epoch", "raw_value": "1754229730.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}], "galaxy_url": "http://34.139.143.124:8000/galaxy/"}