{
    "model_class": "Job",
    "id": "2c6e35377bdeab60",
    "history_id": "99a41f92c04b126d",
    "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0",
    "state": "error",
    "exit_code": null,
    "create_time": "2025-02-25T13:27:39.511720",
    "update_time": "2025-02-25T13:30:01.725678",
    "galaxy_version": "24.1",
    "external_id": "gxy-vgfrg",
    "handler": null,
    "job_runner_name": null,
    "command_line": "ln -s '/galaxy/server/database/objects/7/2/6/dataset_72668119-d4bf-4d0f-a99d-4dd4858c94b1.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/b/3/6/dataset_b362c373-5f21-4529-8e37-47d6761dd456.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/9/b/f/dataset_9bf193fa-4e46-4cb5-945c-2ed5ed131be3.dat' 'lr.fasta' && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 2 && mkdir 'spades_graphs' && mv 00*gfa './spades_graphs/' && samtools view -@ \"${GALAXY_SLOTS:-4}\" -u 'read_alignment/long_read_alignments.sam' | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -o 'read_alignment/long_read_alignments.bam'",
    "user_email": "tests@fake.org",
    "command_version": null,
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "reuse": "[]",
        "keep": "\"2\"",
        "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}",
        "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",
        "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",
        "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}",
        "min_anchor_seg_len": "\"\"",
        "linear_seqs": "\"0\"",
        "min_fasta_length": "\"100\"",
        "mode": "\"normal\"",
        "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 157, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"
    },
    "inputs": {
        "paired_unpaired|fastq_input1": {
            "id": "0bd585d696bf8ecc",
            "src": "hda",
            "uuid": "72668119-d4bf-4d0f-a99d-4dd4858c94b1"
        },
        "paired_unpaired|fastq_input2": {
            "id": "14aa1b1c3fb93b6f",
            "src": "hda",
            "uuid": "b362c373-5f21-4529-8e37-47d6761dd456"
        },
        "long": {
            "id": "c2ce13a9e11f0750",
            "src": "hda",
            "uuid": "9bf193fa-4e46-4cb5-945c-2ed5ed131be3"
        }
    },
    "outputs": {
        "assembly_graph": {
            "id": "38e8fb6e1f0ba996",
            "src": "hda",
            "uuid": "7d36adc1-f1f1-4c3b-9049-fc8f17edebfd"
        },
        "assembly": {
            "id": "fc612e68c64eb092",
            "src": "hda",
            "uuid": "cd615fa4-ac64-4deb-83af-f2e3df9b8e2e"
        },
        "bam_file": {
            "id": "be9dc8dc51b0a3a1",
            "src": "hda",
            "uuid": "10beb400-038a-4300-adba-eda43ab5b7c4"
        }
    },
    "copied_from_job_id": null,
    "output_collections": {
        "spades_collection": {
            "src": "hdca",
            "id": "43f9ba9aabd704ea"
        }
    },
    "tool_stdout": "\nStarting Unicycler (2025-02-25 13:27:41)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/119/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2025-02-25 13:27:41)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2025-02-25 13:27:41)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/119/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/119/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/119/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/119/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/119/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/119/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.123+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/119/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/119/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/119/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/119/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/119/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/119/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.069    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.073    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.085    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.086    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.093    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.129     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.142     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.143     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.143     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.143     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.144     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.144     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.144     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.958     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.960     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.187     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.187     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.223     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.224     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.225     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.225     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.225     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.954  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.954  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.955     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.190     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.190     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.234     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.234     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.402     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.414     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.427     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.430     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.433     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.435     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.439     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.439     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.439     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.439     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.439     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.443     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.443     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.472     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.473     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.537     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.539     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:02.600     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:02.698     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.988     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.507     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.975     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:04.772     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:04.772     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.773     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:04.773     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:04.773     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:04.773     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==\n..\n   (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2025-02-25 13:29:49)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/\n\n\nDetermining graph multiplicity (2025-02-25 13:29:49)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/119/working/002_depth_filter.gfa\n\n\nCleaning graph (2025-02-25 13:29:49)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/119/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2025-02-25 13:29:49)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2025-02-25 13:29:49)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2025-02-25 13:29:49)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2025-02-25 13:29:49)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/119/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/119/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2025-02-25 13:29:49)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/119/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2025-02-25 13:29:49)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2025-02-25 13:29:49)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2025-02-25 13:29:49)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.055 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2025-02-25 13:29:49)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2025-02-25 13:29:49)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2025-02-25 13:29:49)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/119/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2025-02-25 13:29:49)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2025-02-25 13:29:49)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/119/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2025-02-25 13:29:49)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2025-02-25 13:29:58)\nSaving /galaxy/server/database/jobs_directory/000/119/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/119/working/assembly.fasta\n\n",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stdout": "\nStarting Unicycler (2025-02-25 13:27:41)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/119/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2025-02-25 13:27:41)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2025-02-25 13:27:41)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/119/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/119/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/119/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/119/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/119/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/119/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.123+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/119/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/119/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/119/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/119/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/119/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/119/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/119/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.069    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.073    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.085    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.086    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.093    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.129     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.142     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.143     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.143     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.143     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.144     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.144     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.144     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.958     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.960     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.187     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.187     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.223     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.224     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.225     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.225     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.225     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.954  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.954  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.955     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.190     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.190     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.234     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.234     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.402     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.414     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.427     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.430     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.433     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.435     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.439     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.439     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.439     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.439     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.439     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.441     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.443     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.443     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.472     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.473     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.537     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.539     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:02.600     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:02.600     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:02.698     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.988     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.507     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.975     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:04.772     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:04.772     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:04.773     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.773     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:04.773     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:04.773     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:04.773     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==\n..\n   (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2025-02-25 13:29:49)\nFilter by read depth        (2025-02-25 13:29:49)\nFilter homopolymer loops    (2025-02-25 13:29:49)\nMerge all possible          (2025-02-25 13:29:49)\nNormalise read depths       (2025-02-25 13:29:49)\nRemove zero length segments (2025-02-25 13:29:49)\nSort link order             (2025-02-25 13:29:49)\nGraph cleaning finished     (2025-02-25 13:29:49)\nSaving /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2025-02-25 13:29:49)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/119/working/spades_assembly/\n\n\nDetermining graph multiplicity (2025-02-25 13:29:49)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/119/working/002_depth_filter.gfa\n\n\nCleaning graph (2025-02-25 13:29:49)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/119/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2025-02-25 13:29:49)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2025-02-25 13:29:49)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2025-02-25 13:29:49)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2025-02-25 13:29:49)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/119/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/119/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2025-02-25 13:29:49)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/119/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2025-02-25 13:29:49)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2025-02-25 13:29:49)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2025-02-25 13:29:49)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.055 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2025-02-25 13:29:49)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2025-02-25 13:29:49)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2025-02-25 13:29:49)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/119/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2025-02-25 13:29:49)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2025-02-25 13:29:49)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/119/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2025-02-25 13:29:49)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2025-02-25 13:29:58)\nSaving /galaxy/server/database/jobs_directory/000/119/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/119/working/assembly.fasta\n\n",
    "stderr": "",
    "job_messages": null,
    "dependencies": [],
    "job_metrics": []
}
