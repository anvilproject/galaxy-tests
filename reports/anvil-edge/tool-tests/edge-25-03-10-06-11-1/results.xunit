<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="192"
           errors="2"
           failures="28"
           skip="0">
    
    <testcase classname="bcftools_plugin_counts (Test #1)" name="0" time="43.623929262161255">
        
            
            <system-out><![CDATA[
            Number of samples: 3Number of SNPs:    11Number of INDELs:  3Number of MNPs:    0Number of others:  0Number of sites:   15
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #1)" name="0" time="39.57082962989807">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #2)" name="1" time="32.838239431381226">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #11)" name="10" time="33.00386428833008">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #12)" name="11" time="33.7395977973938">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #13)" name="12" time="34.75387096405029">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #3)" name="2" time="32.40697979927063">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #4)" name="3" time="33.43530797958374">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #5)" name="4" time="32.11373829841614">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #6)" name="5" time="34.74872541427612">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #7)" name="6" time="34.103851079940796">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #8)" name="7" time="32.43760275840759">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #9)" name="8" time="31.78188681602478">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #10)" name="9" time="33.45307993888855">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="43.87047076225281">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.044 s (14608.939 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="35.04498791694641">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.047 s (15585.343 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="36.12062048912048">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.105 s (1061.389 µs/read; 0.06 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="36.40992331504822">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.101 s (1025.135 µs/read; 0.06 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="35.490272760391235">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.075 s (6841.009 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="35.71225142478943">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.077 s (7027.171 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="38.09949254989624">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -g file:/galaxy/server/database/objects/c/1/6/dataset_c16e5720-4543-4d86-966a-588df0db7df5.dat --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq.gz cutadapt_in_split_fastq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.237 s (21566.478 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="37.38753342628479">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -g file:/galaxy/server/database/objects/6/5/b/dataset_65b4df18-51e6-4ce7-9f19-50a029b3c89b.dat --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq.gz cutadapt_in_split_fastq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.243 s (22087.812 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="37.319034814834595">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.055 s (18316.110 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="36.71997857093811">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.054 s (18052.737 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="36.745965003967285">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq.gz -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.162 s (1641.189 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="35.519137144088745">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq.gz -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.166 s (1673.949 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="37.70693516731262">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.161 s (1624.122 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="37.634361028671265">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.166 s (1681.297 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="35.67509436607361">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.050 s (16598.066 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="34.496331214904785">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14470.816 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="35.930771827697754">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.049 s (16459.068 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="35.268441915512085">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14223.814 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="37.48513698577881">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.044 s (14688.174 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="64.42049407958984">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14424.960 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="36.06808137893677">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.048 s (16109.943 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="34.4398410320282">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.052 s (17220.974 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="37.64559078216553">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.046 s (15212.933 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="34.70249271392822">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.051 s (17011.166 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="37.57202124595642">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.182 s (1837.066 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="36.90043640136719">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.186 s (1883.473 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="36.80967688560486">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.048 s (16136.090 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="37.06302857398987">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14481.306 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="36.71729826927185">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.050 s (16787.370 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="35.84277367591858">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14470.498 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="36.266701459884644">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.047 s (15575.171 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reverse-complemented:                        0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             97 bp (95.1%)=== Adapter 1 ===Sequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="34.65920424461365">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.046 s (15424.252 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reverse-complemented:                        0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             97 bp (95.1%)=== Adapter 1 ===Sequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="37.23236107826233">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.181 s (1830.236 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="35.85985493659973">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.181 s (1830.325 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="37.408981800079346">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.187 s (1884.778 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="37.25983786582947">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.181 s (1831.683 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="36.24160170555115">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.162 s (1634.966 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="36.8054358959198">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.159 s (1607.864 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="36.78182291984558">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.158 s (1597.089 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="34.961302280426025">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.166 s (1680.523 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="35.963642835617065">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14225.324 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="34.390604734420776">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.042 s (13915.300 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="34.179598569869995">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.044 s (14559.269 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="34.44649696350098">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.046 s (15423.059 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="35.33301830291748">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 8 cores ...Finished in 0.078 s (25973.399 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 1 with adapter:                       1 (33.3%)  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):             40 bp (19.6%)  Read 1:            20 bp  Read 2:            20 bp=== First read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011=== Second read: Adapter 2 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="36.23103618621826">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 8 cores ...Finished in 0.068 s (22540.808 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 1 with adapter:                       1 (33.3%)  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):             40 bp (19.6%)  Read 1:            20 bp  Read 2:            20 bp=== First read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011=== Second read: Adapter 2 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="39.156519174575806">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.183 s (1851.294 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="37.7352979183197">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.182 s (1834.323 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="36.533945083618164">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 8 cores ...Finished in 0.053 s (17713.070 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):            122 bp (59.8%)  Read 1:           102 bp  Read 2:            20 bp=== Second read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="33.53951048851013">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 8 cores ...Finished in 0.052 s (17332.554 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):            122 bp (59.8%)  Read 1:           102 bp  Read 2:            20 bp=== Second read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="33.942954540252686">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.046 s (15312.354 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads with too many exp. errors:             0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="32.26200771331787">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (14246.305 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads with too many exp. errors:             0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="36.731586933135986">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.044 s (14671.008 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="33.61262822151184">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.042 s (14020.046 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #34)" name="33" time="37.91887378692627">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.187 s (1890.317 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         48,270 bp (100.0%)  Read 1:        24,141 bp  Read 2:        24,129 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #34)" name="33" time="35.25437879562378">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.178 s (1802.444 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         48,270 bp (100.0%)  Read 1:        24,141 bp  Read 2:        24,129 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #35)" name="34" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 34, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #35)" name="34" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 34, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #36)" name="35" time="38.411810636520386">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.180 s (1822.946 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #36)" name="35" time="35.30835843086243">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.177 s (1791.364 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #37)" name="36" time="37.82881999015808">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.184 s (1862.032 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #37)" name="36" time="34.63961887359619">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.179 s (1803.085 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #38)" name="37" time="37.112611293792725">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa -p out2.fa Unnamed Collection_1.fa Unnamed Collection_2.faProcessing paired-end reads on 8 cores ...Finished in 0.041 s (10275.424 µs/read; 0.01 M reads/minute).=== Summary ===Total read pairs processed:                  4== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):             4 (100.0%)Total basepairs processed:           369 bp  Read 1:           194 bp  Read 2:           175 bpPoly-A-trimmed:                      168 bp (45.5%)  Read 1:            84 bp  Read 2:            84 bpTotal written (filtered):            201 bp (54.5%)  Read 1:           110 bp  Read 2:            91 bp=== R1 poly-A trimmed ===lengthcount01212421=== R2 poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #38)" name="37" time="35.98586845397949">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa -p out2.fa Unnamed Collection_1.fa Unnamed Collection_2.faProcessing paired-end reads on 8 cores ...Finished in 0.036 s (8926.809 µs/read; 0.01 M reads/minute).=== Summary ===Total read pairs processed:                  4== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):             4 (100.0%)Total basepairs processed:           369 bp  Read 1:           194 bp  Read 2:           175 bpPoly-A-trimmed:                      168 bp (45.5%)  Read 1:            84 bp  Read 2:            84 bpTotal written (filtered):            201 bp (54.5%)  Read 1:           110 bp  Read 2:            91 bp=== R1 poly-A trimmed ===lengthcount01212421=== R2 poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #39)" name="38" time="36.96472454071045">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 8 cores ...Finished in 0.049 s (12357.414 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #39)" name="38" time="34.41368007659912">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 8 cores ...Finished in 0.044 s (11023.819 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #40)" name="39" time="37.58059287071228">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 8 cores ...Finished in 0.046 s (11564.314 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #40)" name="39" time="33.528422594070435">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 8 cores ...Finished in 0.042 s (10444.939 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #41)" name="40" time="35.746034145355225">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 8 cores ...Finished in 0.033 s (8358.061 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpPoly-A-trimmed:                       84 bp (43.3%)Total written (filtered):            110 bp (56.7%)=== Poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #41)" name="40" time="34.919880867004395">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 8 cores ...Finished in 0.032 s (7894.635 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpPoly-A-trimmed:                       84 bp (43.3%)Total written (filtered):            110 bp (56.7%)=== Poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #42)" name="41" time="34.29979062080383">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gzProcessing single-end reads on 8 cores ...Finished in 0.086 s (43074.965 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            18 bpTotal written (filtered):             18 bp (100.0%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #42)" name="41" time="33.81371593475342">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gzProcessing single-end reads on 8 cores ...Finished in 0.083 s (41427.016 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            18 bpTotal written (filtered):             18 bp (100.0%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #43)" name="42" time="35.42523241043091">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.045 s (2270.663 µs/read; 0.03 M reads/minute).=== Summary ===Total reads processed:                      20Reads with adapters:                         0 (0.0%)Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)=== Adapter 1 ===Sequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #43)" name="42" time="33.4765989780426">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.043 s (2160.263 µs/read; 0.03 M reads/minute).=== Summary ===Total reads processed:                      20Reads with adapters:                         0 (0.0%)Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)=== Adapter 1 ===Sequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #44)" name="43" time="37.29676651954651">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.032 s (1581.061 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      20Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #44)" name="43" time="33.34520411491394">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.031 s (1534.593 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      20Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #45)" name="44" time="36.51718997955322">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #45)" name="44" time="33.92254614830017">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #46)" name="45" time="36.081172466278076">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.faProcessing single-end reads on 8 cores ...Finished in 0.044 s (22236.109 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         2 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            32 bpTotal written (filtered):             16 bp (50.0%)=== Adapter 1 ===Sequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times2 times, it overlapped the 5' end of a read0 times, it overlapped the 3' end or was within the readMinimum overlap: 3No. of allowed errors:1-8 bp: 0Overview of removed sequences (5')lengthcountexpectmax.errerror counts820.002Overview of removed sequences (3' or within)lengthcountexpectmax.errerror counts
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #46)" name="45" time="34.0943067073822">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.faProcessing single-end reads on 8 cores ...Finished in 0.044 s (21951.079 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         2 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            32 bpTotal written (filtered):             16 bp (50.0%)=== Adapter 1 ===Sequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times2 times, it overlapped the 5' end of a read0 times, it overlapped the 3' end or was within the readMinimum overlap: 3No. of allowed errors:1-8 bp: 0Overview of removed sequences (5')lengthcountexpectmax.errerror counts820.002Overview of removed sequences (3' or within)lengthcountexpectmax.errerror counts
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #47)" name="46" time="36.3758065700531">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.faProcessing single-end reads on 8 cores ...Finished in 0.046 s (15193.780 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:            30 bpTotal written (filtered):             16 bp (53.3%)=== Adapter 1 ===Sequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts720.002
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #47)" name="46" time="34.169336557388306">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.faProcessing single-end reads on 8 cores ...Finished in 0.049 s (16195.615 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:            30 bpTotal written (filtered):             16 bp (53.3%)=== Adapter 1 ===Sequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts720.002
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #48)" name="47" time="37.68184518814087">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...
            ]]></system-out>
            <system-err><![CDATA[
            Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #48)" name="47" time="35.733877658843994">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...
            ]]></system-out>
            <system-err><![CDATA[
            Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="37.94969916343689">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.047 s (15659.491 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="35.217095613479614">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 8 cores ...Finished in 0.047 s (15592.257 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="38.208067417144775">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.194 s (1959.497 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       1 (1.0%)  Read 2 with adapter:                       1 (1.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,692 bp (100.0%)  Read 1:        24,846 bp  Read 2:        24,846 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="38.16776704788208">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 8 cores ...Finished in 0.185 s (1868.212 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       1 (1.0%)  Read 2 with adapter:                       1 (1.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,692 bp (100.0%)  Read 1:        24,846 bp  Read 2:        24,846 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="38.05686402320862">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.faProcessing single-end reads on 8 cores ...Finished in 0.052 s (10425.234 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="36.561707973480225">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.faProcessing single-end reads on 8 cores ...Finished in 0.051 s (10233.641 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="36.918696641922">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.104 s (1049.155 µs/read; 0.06 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         4 (4.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     286 bp (1.2%)Total written (filtered):         24,550 bp (98.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 75.0%  G: 25.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts331.503410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="35.24373149871826">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.8Command line parameters: -j=8 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 8 cores ...Finished in 0.104 s (1050.735 µs/read; 0.06 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         4 (4.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     286 bp (1.2%)Total written (filtered):         24,550 bp (98.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 75.0%  G: 25.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts331.503410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="37.55032157897949">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="35.44958996772766">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bam_compare (Test #1)" name="0" time="54.14513373374939">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            bamFilesList: ['one.bam', 'two.bam']binLength: 5numberOfSamples: 0blackListFileName: NoneskipZeroOverZero: Falsebed_and_bin: FalsegenomeChunkSize: NonedefaultFragmentLength: read lengthnumberOfProcessors: 8verbose: Falseregion: NonebedFile: NoneminMappingQuality: NoneignoreDuplicates: FalsechrsToSkip: []stepSize: 5center_read: FalsesamFlag_include: NonesamFlag_exclude: NoneminFragmentLength: 0maxFragmentLength: 0zerosToNans: FalsesmoothLength: Nonesave_data: Falseout_file_for_raw_data: NonemaxPairedFragmentLength: 1000
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bam_compare (Test #2)" name="1" time="36.595128536224365">
        
            
            <system-out><![CDATA[
            Due to filtering, 83.33333333333334% of the aforementioned alignments will be used 39.16666666666667Due to filtering, 83.33333333333334% of the aforementioned alignments will be used 39.16666666666667
            ]]></system-out>
            <system-err><![CDATA[
            bamFilesList: ['one.bam', 'two.bam']binLength: 10numberOfSamples: 0blackListFileName: NoneskipZeroOverZero: Falsebed_and_bin: FalsegenomeChunkSize: NonedefaultFragmentLength: read lengthnumberOfProcessors: 8verbose: Falseregion: NonebedFile: NoneminMappingQuality: 1ignoreDuplicates: FalsechrsToSkip: []stepSize: 10center_read: FalsesamFlag_include: NonesamFlag_exclude: NoneminFragmentLength: 0maxFragmentLength: 0zerosToNans: FalsesmoothLength: Nonesave_data: Falseout_file_for_raw_data: NonemaxPairedFragmentLength: 1000
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #1)" name="0" time="58.2920298576355">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #1)" name="0" time="39.90934991836548">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #2)" name="1" time="39.05664944648743">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #2)" name="1" time="40.62653183937073">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #3)" name="2" time="40.43835949897766">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #3)" name="2" time="41.01320552825928">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #4)" name="3" time="39.06049609184265">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #4)" name="3" time="40.06879138946533">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #5)" name="4" time="38.42562484741211">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #5)" name="4" time="38.102869749069214">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #6)" name="5" time="39.46641159057617">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #6)" name="5" time="38.705220222473145">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #7)" name="6" time="39.58364152908325">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #7)" name="6" time="39.85825228691101">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #8)" name="7" time="39.85530209541321">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #8)" name="7" time="39.79455327987671">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="jq (Test #1)" name="0" time="37.91639232635498">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="jq (Test #2)" name="1" time="33.06056880950928">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #1)" name="0" time="65.5757429599762">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #2)" name="1" time="35.99597644805908">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #3)" name="2" time="34.5989875793457">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #1)" name="0" time="91.7430956363678">
        
            
            <system-out><![CDATA[
            Mar 10 07:57:40 ..... started STAR runMar 10 07:57:40 ... starting to generate Genome filesMar 10 07:57:40 ..... processing annotations GTFMar 10 07:57:40 ... starting to sort Suffix Array. This may take a long time...Mar 10 07:57:40 ... sorting Suffix Array chunks and saving them to disk...Mar 10 07:57:40 ... loading chunks from disk, packing SA...Mar 10 07:57:40 ... finished generating suffix arrayMar 10 07:57:40 ... generating Suffix Array indexMar 10 07:57:40 ... completed Suffix Array indexMar 10 07:57:40 ..... inserting junctions into the genome indicesMar 10 07:57:40 ... writing Genome to disk ...Mar 10 07:57:40 ... writing Suffix Array to disk ...Mar 10 07:57:40 ... writing SAindex to diskMar 10 07:57:40 ..... finished successfullyMar 10 07:57:40 ..... started STAR runMar 10 07:57:40 ..... loading genomeMar 10 07:57:40 ..... started mappingMar 10 07:57:58 ..... finished mappingMar 10 07:57:58 ..... started Solo countingMar 10 07:57:58 ..... finished Solo countingMar 10 07:57:58 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #1)" name="0" time="87.08763670921326">
        
            
            <system-out><![CDATA[
            Mar 10 08:10:19 ..... started STAR runMar 10 08:10:19 ... starting to generate Genome filesMar 10 08:10:19 ..... processing annotations GTFMar 10 08:10:19 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:10:19 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:10:19 ... loading chunks from disk, packing SA...Mar 10 08:10:19 ... finished generating suffix arrayMar 10 08:10:19 ... generating Suffix Array indexMar 10 08:10:19 ... completed Suffix Array indexMar 10 08:10:19 ..... inserting junctions into the genome indicesMar 10 08:10:19 ... writing Genome to disk ...Mar 10 08:10:19 ... writing Suffix Array to disk ...Mar 10 08:10:19 ... writing SAindex to diskMar 10 08:10:19 ..... finished successfullyMar 10 08:10:19 ..... started STAR runMar 10 08:10:20 ..... loading genomeMar 10 08:10:20 ..... started mappingMar 10 08:10:37 ..... finished mappingMar 10 08:10:37 ..... started Solo countingMar 10 08:10:37 ..... finished Solo countingMar 10 08:10:37 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #2)" name="1" time="84.86225152015686">
        
            
            <system-out><![CDATA[
            Mar 10 07:59:04 ..... started STAR runMar 10 07:59:04 ... starting to generate Genome filesMar 10 07:59:04 ..... processing annotations GTFMar 10 07:59:05 ... starting to sort Suffix Array. This may take a long time...Mar 10 07:59:05 ... sorting Suffix Array chunks and saving them to disk...Mar 10 07:59:05 ... loading chunks from disk, packing SA...Mar 10 07:59:05 ... finished generating suffix arrayMar 10 07:59:05 ... generating Suffix Array indexMar 10 07:59:05 ... completed Suffix Array indexMar 10 07:59:05 ..... inserting junctions into the genome indicesMar 10 07:59:05 ... writing Genome to disk ...Mar 10 07:59:05 ... writing Suffix Array to disk ...Mar 10 07:59:05 ... writing SAindex to diskMar 10 07:59:05 ..... finished successfullyMar 10 07:59:05 ..... started STAR runMar 10 07:59:05 ..... loading genomeMar 10 07:59:05 ..... started mappingMar 10 07:59:23 ..... finished mappingMar 10 07:59:23 ..... started Solo countingMar 10 07:59:23 ..... finished Solo countingMar 10 07:59:23 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #2)" name="1" time="84.08506321907043">
        
            
            <system-out><![CDATA[
            Mar 10 08:11:44 ..... started STAR runMar 10 08:11:44 ... starting to generate Genome filesMar 10 08:11:44 ..... processing annotations GTFMar 10 08:11:44 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:11:44 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:11:44 ... loading chunks from disk, packing SA...Mar 10 08:11:44 ... finished generating suffix arrayMar 10 08:11:44 ... generating Suffix Array indexMar 10 08:11:44 ... completed Suffix Array indexMar 10 08:11:44 ..... inserting junctions into the genome indicesMar 10 08:11:44 ... writing Genome to disk ...Mar 10 08:11:44 ... writing Suffix Array to disk ...Mar 10 08:11:44 ... writing SAindex to diskMar 10 08:11:44 ..... finished successfullyMar 10 08:11:44 ..... started STAR runMar 10 08:11:44 ..... loading genomeMar 10 08:11:44 ..... started mappingMar 10 08:12:02 ..... finished mappingMar 10 08:12:02 ..... started Solo countingMar 10 08:12:02 ..... finished Solo countingMar 10 08:12:02 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #3)" name="2" time="118.32312798500061">
        
            
            <system-out><![CDATA[
            Mar 10 08:00:29 ..... started STAR runMar 10 08:00:29 ... starting to generate Genome filesMar 10 08:00:29 ..... processing annotations GTFMar 10 08:00:29 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:00:29 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:00:29 ... loading chunks from disk, packing SA...Mar 10 08:00:30 ... finished generating suffix arrayMar 10 08:00:30 ... generating Suffix Array indexMar 10 08:00:30 ... completed Suffix Array indexMar 10 08:00:30 ..... inserting junctions into the genome indicesMar 10 08:00:30 ... writing Genome to disk ...Mar 10 08:00:30 ... writing Suffix Array to disk ...Mar 10 08:00:30 ... writing SAindex to diskMar 10 08:00:30 ..... finished successfullyMar 10 08:00:30 ..... started STAR runMar 10 08:00:30 ..... loading genomeMar 10 08:00:30 ..... started mappingMar 10 08:01:22 ..... finished mappingMar 10 08:01:22 ..... started Solo countingMar 10 08:01:22 ..... finished Solo countingMar 10 08:01:22 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #3)" name="2" time="117.43639540672302">
        
            
            <system-out><![CDATA[
            Mar 10 08:13:08 ..... started STAR runMar 10 08:13:08 ... starting to generate Genome filesMar 10 08:13:08 ..... processing annotations GTFMar 10 08:13:08 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:13:08 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:13:08 ... loading chunks from disk, packing SA...Mar 10 08:13:08 ... finished generating suffix arrayMar 10 08:13:08 ... generating Suffix Array indexMar 10 08:13:08 ... completed Suffix Array indexMar 10 08:13:08 ..... inserting junctions into the genome indicesMar 10 08:13:08 ... writing Genome to disk ...Mar 10 08:13:08 ... writing Suffix Array to disk ...Mar 10 08:13:08 ... writing SAindex to diskMar 10 08:13:08 ..... finished successfullyMar 10 08:13:08 ..... started STAR runMar 10 08:13:08 ..... loading genomeMar 10 08:13:08 ..... started mappingMar 10 08:14:00 ..... finished mappingMar 10 08:14:00 ..... started Solo countingMar 10 08:14:00 ..... finished Solo countingMar 10 08:14:00 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #4)" name="3" time="84.86030602455139">
        
            
            <system-out><![CDATA[
            Mar 10 08:02:28 ..... started STAR runMar 10 08:02:28 ... starting to generate Genome filesMar 10 08:02:28 ..... processing annotations GTFMar 10 08:02:29 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:02:29 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:02:29 ... loading chunks from disk, packing SA...Mar 10 08:02:29 ... finished generating suffix arrayMar 10 08:02:29 ... generating Suffix Array indexMar 10 08:02:29 ... completed Suffix Array indexMar 10 08:02:29 ..... inserting junctions into the genome indicesMar 10 08:02:29 ... writing Genome to disk ...Mar 10 08:02:29 ... writing Suffix Array to disk ...Mar 10 08:02:29 ... writing SAindex to diskMar 10 08:02:29 ..... finished successfullyMar 10 08:02:29 ..... started STAR runMar 10 08:02:29 ..... loading genomeMar 10 08:02:29 ..... started mappingMar 10 08:02:47 ..... finished mappingMar 10 08:02:47 ..... started Solo countingMar 10 08:02:47 ..... finished Solo countingMar 10 08:02:47 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #4)" name="3" time="83.051278591156">
        
            
            <system-out><![CDATA[
            Mar 10 08:15:06 ..... started STAR runMar 10 08:15:06 ... starting to generate Genome filesMar 10 08:15:06 ..... processing annotations GTFMar 10 08:15:06 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:15:06 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:15:06 ... loading chunks from disk, packing SA...Mar 10 08:15:06 ... finished generating suffix arrayMar 10 08:15:06 ... generating Suffix Array indexMar 10 08:15:06 ... completed Suffix Array indexMar 10 08:15:06 ..... inserting junctions into the genome indicesMar 10 08:15:06 ... writing Genome to disk ...Mar 10 08:15:06 ... writing Suffix Array to disk ...Mar 10 08:15:06 ... writing SAindex to diskMar 10 08:15:06 ..... finished successfullyMar 10 08:15:06 ..... started STAR runMar 10 08:15:06 ..... loading genomeMar 10 08:15:06 ..... started mappingMar 10 08:15:24 ..... finished mappingMar 10 08:15:24 ..... started Solo countingMar 10 08:15:24 ..... finished Solo countingMar 10 08:15:24 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #5)" name="4" time="85.10639715194702">
        
            
            <system-out><![CDATA[
            Mar 10 08:03:53 ..... started STAR runMar 10 08:03:53 ... starting to generate Genome filesMar 10 08:03:53 ..... processing annotations GTFMar 10 08:03:53 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:03:53 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:03:54 ... loading chunks from disk, packing SA...Mar 10 08:03:54 ... finished generating suffix arrayMar 10 08:03:54 ... generating Suffix Array indexMar 10 08:03:54 ... completed Suffix Array indexMar 10 08:03:54 ..... inserting junctions into the genome indicesMar 10 08:03:54 ... writing Genome to disk ...Mar 10 08:03:54 ... writing Suffix Array to disk ...Mar 10 08:03:54 ... writing SAindex to diskMar 10 08:03:54 ..... finished successfullyMar 10 08:03:54 ..... started STAR runMar 10 08:03:54 ..... loading genomeMar 10 08:03:54 ..... started mappingMar 10 08:04:11 ..... finished mappingMar 10 08:04:11 ..... started Solo countingMar 10 08:04:11 ..... finished Solo countingMar 10 08:04:11 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #5)" name="4" time="84.28499484062195">
        
            
            <system-out><![CDATA[
            Mar 10 08:16:29 ..... started STAR runMar 10 08:16:29 ... starting to generate Genome filesMar 10 08:16:29 ..... processing annotations GTFMar 10 08:16:29 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:16:29 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:16:29 ... loading chunks from disk, packing SA...Mar 10 08:16:29 ... finished generating suffix arrayMar 10 08:16:29 ... generating Suffix Array indexMar 10 08:16:29 ... completed Suffix Array indexMar 10 08:16:29 ..... inserting junctions into the genome indicesMar 10 08:16:29 ... writing Genome to disk ...Mar 10 08:16:29 ... writing Suffix Array to disk ...Mar 10 08:16:29 ... writing SAindex to diskMar 10 08:16:29 ..... finished successfullyMar 10 08:16:29 ..... started STAR runMar 10 08:16:29 ..... loading genomeMar 10 08:16:29 ..... started mappingMar 10 08:16:47 ..... finished mappingMar 10 08:16:47 ..... started Solo countingMar 10 08:16:47 ..... finished Solo countingMar 10 08:16:47 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #6)" name="5" time="83.47116041183472">
        
            
            <system-out><![CDATA[
            Mar 10 08:05:17 ..... started STAR runMar 10 08:05:17 ... starting to generate Genome filesMar 10 08:05:17 ..... processing annotations GTFMar 10 08:05:17 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:05:17 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:05:17 ... loading chunks from disk, packing SA...Mar 10 08:05:17 ... finished generating suffix arrayMar 10 08:05:17 ... generating Suffix Array indexMar 10 08:05:17 ... completed Suffix Array indexMar 10 08:05:17 ..... inserting junctions into the genome indicesMar 10 08:05:17 ... writing Genome to disk ...Mar 10 08:05:17 ... writing Suffix Array to disk ...Mar 10 08:05:17 ... writing SAindex to diskMar 10 08:05:17 ..... finished successfullyMar 10 08:05:17 ..... started STAR runMar 10 08:05:17 ..... loading genomeMar 10 08:05:17 ..... started mappingMar 10 08:05:35 ..... finished mappingMar 10 08:05:35 ..... started Solo countingMar 10 08:05:35 ..... finished Solo countingMar 10 08:05:35 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #6)" name="5" time="86.44005703926086">
        
            
            <system-out><![CDATA[
            Mar 10 08:17:55 ..... started STAR runMar 10 08:17:55 ... starting to generate Genome filesMar 10 08:17:55 ..... processing annotations GTFMar 10 08:17:55 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:17:55 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:17:55 ... loading chunks from disk, packing SA...Mar 10 08:17:55 ... finished generating suffix arrayMar 10 08:17:55 ... generating Suffix Array indexMar 10 08:17:55 ... completed Suffix Array indexMar 10 08:17:55 ..... inserting junctions into the genome indicesMar 10 08:17:55 ... writing Genome to disk ...Mar 10 08:17:55 ... writing Suffix Array to disk ...Mar 10 08:17:55 ... writing SAindex to diskMar 10 08:17:55 ..... finished successfullyMar 10 08:17:55 ..... started STAR runMar 10 08:17:55 ..... loading genomeMar 10 08:17:55 ..... started mappingMar 10 08:18:13 ..... finished mappingMar 10 08:18:13 ..... started Solo countingMar 10 08:18:13 ..... finished Solo countingMar 10 08:18:13 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #7)" name="6" time="69.79825925827026">
        
            
            <system-out><![CDATA[
            Mar 10 08:06:44 ..... started STAR runMar 10 08:06:44 ... starting to generate Genome filesMar 10 08:06:44 ..... processing annotations GTFMar 10 08:06:44 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:06:44 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:06:44 ... loading chunks from disk, packing SA...Mar 10 08:06:44 ... finished generating suffix arrayMar 10 08:06:44 ... generating Suffix Array indexMar 10 08:06:44 ... completed Suffix Array indexMar 10 08:06:44 ..... inserting junctions into the genome indicesMar 10 08:06:44 ... writing Genome to disk ...Mar 10 08:06:44 ... writing Suffix Array to disk ...Mar 10 08:06:44 ... writing SAindex to diskMar 10 08:06:44 ..... finished successfullyMar 10 08:06:44 ..... started STAR runMar 10 08:06:44 ..... loading genomeMar 10 08:06:44 ..... started mappingMar 10 08:06:45 ..... finished mappingMar 10 08:06:45 ..... started Solo countingMar 10 08:06:45 ..... finished Solo countingMar 10 08:06:45 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #7)" name="6" time="69.60006284713745">
        
            
            <system-out><![CDATA[
            Mar 10 08:19:22 ..... started STAR runMar 10 08:19:22 ... starting to generate Genome filesMar 10 08:19:22 ..... processing annotations GTFMar 10 08:19:22 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:19:22 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:19:22 ... loading chunks from disk, packing SA...Mar 10 08:19:22 ... finished generating suffix arrayMar 10 08:19:22 ... generating Suffix Array indexMar 10 08:19:22 ... completed Suffix Array indexMar 10 08:19:22 ..... inserting junctions into the genome indicesMar 10 08:19:22 ... writing Genome to disk ...Mar 10 08:19:22 ... writing Suffix Array to disk ...Mar 10 08:19:22 ... writing SAindex to diskMar 10 08:19:22 ..... finished successfullyMar 10 08:19:22 ..... started STAR runMar 10 08:19:22 ..... loading genomeMar 10 08:19:22 ..... started mappingMar 10 08:19:23 ..... finished mappingMar 10 08:19:23 ..... started Solo countingMar 10 08:19:23 ..... finished Solo countingMar 10 08:19:23 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #8)" name="7" time="144.47391390800476">
        
            
            <system-out><![CDATA[
            Mar 10 08:09:04 ..... started STAR runMar 10 08:09:04 ... starting to generate Genome filesMar 10 08:09:04 ..... processing annotations GTFMar 10 08:09:04 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:09:04 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:09:05 ... loading chunks from disk, packing SA...Mar 10 08:09:05 ... finished generating suffix arrayMar 10 08:09:05 ... generating Suffix Array indexMar 10 08:09:05 ... completed Suffix Array indexMar 10 08:09:05 ..... inserting junctions into the genome indicesMar 10 08:09:05 ... writing Genome to disk ...Mar 10 08:09:05 ... writing Suffix Array to disk ...Mar 10 08:09:05 ... writing SAindex to diskMar 10 08:09:05 ..... finished successfullyMar 10 08:09:05 ..... started STAR runMar 10 08:09:05 ..... loading genomeMar 10 08:09:05 ..... started mappingMar 10 08:09:09 ..... finished mappingMar 10 08:09:09 ..... started Solo countingMar 10 08:09:09 ..... finished Solo countingMar 10 08:09:09 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #8)" name="7" time="141.95734214782715">
        
            
            <system-out><![CDATA[
            Mar 10 08:21:41 ..... started STAR runMar 10 08:21:41 ... starting to generate Genome filesMar 10 08:21:41 ..... processing annotations GTFMar 10 08:21:41 ... starting to sort Suffix Array. This may take a long time...Mar 10 08:21:41 ... sorting Suffix Array chunks and saving them to disk...Mar 10 08:21:41 ... loading chunks from disk, packing SA...Mar 10 08:21:41 ... finished generating suffix arrayMar 10 08:21:41 ... generating Suffix Array indexMar 10 08:21:41 ... completed Suffix Array indexMar 10 08:21:41 ..... inserting junctions into the genome indicesMar 10 08:21:41 ... writing Genome to disk ...Mar 10 08:21:42 ... writing Suffix Array to disk ...Mar 10 08:21:42 ... writing SAindex to diskMar 10 08:21:42 ..... finished successfullyMar 10 08:21:42 ..... started STAR runMar 10 08:21:42 ..... loading genomeMar 10 08:21:42 ..... started mappingMar 10 08:21:46 ..... finished mappingMar 10 08:21:46 ..... started Solo countingMar 10 08:21:46 ..... finished Solo countingMar 10 08:21:46 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_split (Test #1)" name="0" time="39.052080392837524">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input_bam": {   "id": "7efeeb606e4e25b0",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools split -f \u0027Read_Group_%!.bam\u0027 -u \u0027/galaxy/server/database/jobs_directory/000/500/outputs/dataset_3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767.dat\u0027 -@ $addthreads \u0027/galaxy/server/database/objects/a/1/0/dataset_a108728e-3749-4578-b49c-300f1c0563ac.dat\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:40:24.235306",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-pk7qr",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "8e39adc626753afa",  "inputs": {   "input_bam": {    "id": "7efeeb606e4e25b0",    "src": "hda",    "uuid": "a108728e-3749-4578-b49c-300f1c0563ac"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/samtools:1.9--h10a08f8_12",    "title": "Container ID",    "value": "quay.io/biocontainers/samtools:1.9--h10a08f8_12"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741596030.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:40:30"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741596030.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:40:30"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "__new_primary_file_output|Elephant__": {    "id": "1db67e162eb2faa7",    "src": "hda",    "uuid": "579a9064-ae24-48b3-b625-79fed59f236f"   },   "__new_primary_file_output|Human__": {    "id": "a0ca135508699e31",    "src": "hda",    "uuid": "d8032247-034d-4c0e-9568-efc5fcdf93d3"   },   "__new_primary_file_output|Mouse__": {    "id": "d9788875e2011745",    "src": "hda",    "uuid": "98a5ec1c-e36a-411e-86f2-81dfefe9af04"   },   "output": {    "id": "1b9e47ac09c68c77",    "src": "hda",    "uuid": "3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767"   }  },  "params": {   "__input_ext": "\"bam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "header": null  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_split/samtools_split/1.9",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:40:42.479815",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Primary output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_8xg2wbfs.sam v. /tmp/history_bam_converted_to_sam_zcjlpfzd.sam )\n--- local_file\n+++ history_data\n@@ -6,11 +6,11 @@\n @PG\tID:bowtie2-D76CD0\tPN:bowtie2\tVN:2.1.0\n @PG\tID:bowtie2-58C6F748\tPN:bowtie2\tVN:2.1.0\n @PG\tID:bowtie2-D76CD0-8B37AF2\tPN:bowtie2\tVN:2.1.0\n-@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.1\tPN:samtools\tPP:bowtie2-31DAC016\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.2\tPN:samtools\tPP:bowtie2-D76CD0\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.3\tPN:samtools\tPP:bowtie2-58C6F748\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.4\tPN:samtools\tPP:bowtie2-D76CD0-8B37AF2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/jobs_directory/000/500/outputs/dataset_3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767.dat -@ 0 /galaxy/server/database/objects/a/1/0/dataset_a108728e-3749-4578-b49c-300f1c0563ac.dat\n+@PG\tID:samtools.1\tPN:samtools\tPP:bowtie2-31DAC016\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/jobs_directory/000/500/outputs/dataset_3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767.dat -@ 0 /galaxy/server/database/objects/a/1/0/dataset_a108728e-3749-4578-b49c-300f1c0563ac.dat\n+@PG\tID:samtools.2\tPN:samtools\tPP:bowtie2-D76CD0\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/jobs_directory/000/500/outputs/dataset_3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767.dat -@ 0 /galaxy/server/database/objects/a/1/0/dataset_a108728e-3749-4578-b49c-300f1c0563ac.dat\n+@PG\tID:samtools.3\tPN:samtools\tPP:bowtie2-58C6F748\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/jobs_directory/000/500/outputs/dataset_3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767.dat -@ 0 /galaxy/server/database/objects/a/1/0/dataset_a108728e-3749-4578-b49c-300f1c0563ac.dat\n+@PG\tID:samtools.4\tPN:samtools\tPP:bowtie2-D76CD0-8B37AF2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/jobs_directory/000/500/outputs/dataset_3cee01d9-11d1-4fa6-8db8-9cd5dfc9d767.dat -@ 0 /galaxy/server/database/objects/a/1/0/dataset_a108728e-3749-4578-b49c-300f1c0563ac.dat\n phiX174_9_527_1:0:0_0:0:0_54/1\t0\tphiX174\t9\t42\t70M\t*\t0\t0\tTCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATCAAGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:65A4\tYT:Z:UU\tRG:Z:Mouse\n phiX174_71_657_0:0:0_1:0:0_72/1\t0\tphiX174\t71\t42\t70M\t*\t0\t0\tGATAAAGCAGGAATTACTACTGCTTGTTTACGAATTAAATCGAAGTGGACTGCTGGCGGAAAATGAGAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tRG:Z:Mouse\n phiX174_99_617_1:0:0_2:1:0_a2/1\t0\tphiX174\t99\t42\t70M\t*\t0\t0\tTACGAATTAAATCGAAGTGGACTGCTTGCGGAAAATGAGAAAATTCGACCTATCCTTGCGCAGCTCGAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:26G43\tYT:Z:UU\tRG:Z:Mouse\n" ], "status": "failure", "test_index": 0, "time_seconds": 39.052080392837524, "tool_id": "samtools_split", "tool_version": "1.9"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #1)" name="0" time="38.71787452697754">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "7e9508130f474d42",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/4/f/1/dataset_4f1c0755-4774-4b16-a3e5-c3abd5cd4e6e.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:24:39.174190",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-5tkbc",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "a90e8b20f11dcf8f",  "inputs": {   "input": {    "id": "7e9508130f474d42",    "src": "hda",    "uuid": "4f1c0755-4774-4b16-a3e5-c3abd5cd4e6e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595085.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:24:45"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595085.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:24:45"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "71bc7aad74bc31f2",    "src": "hda",    "uuid": "cd0b1b67-ed2b-4fea-b207-28e770028203"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:24:57.315238",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (sam_to_bam_out1.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 0, "time_seconds": 38.71787452697754, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #2)" name="1" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 1, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #11)" name="10" time="34.66272163391113">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "ecfbd76eec4246fd",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|output_options|output_format|with_header": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/0/c/9/dataset_0c9fd166-411e-4676-9f8e-0924c6e63cd3.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/7/2/9/metadata_72909048-6bbf-4f22-ba3c-01892cdd99f6.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads      -h  -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:30:16.071019",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-2kkmr",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "b63557ba6276a584",  "inputs": {   "input": {    "id": "ecfbd76eec4246fd",    "src": "hda",    "uuid": "0c9fd166-411e-4676-9f8e-0924c6e63cd3"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595418.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:30:18"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595418.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:30:18"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "b8e0bc1041182cb5",    "src": "hda",    "uuid": "c4ff7b0d-0199-4c23-8945-c61ac35048b3"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\", \"with_header\": true}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:30:29.811785",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out1.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 10, "time_seconds": 34.66272163391113, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #12)" name="11" time="32.6185839176178">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "8b4ccd1e683785b1",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|outtype": "header" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/9/8/7/dataset_987bf512-bfac-4f38-b389-4f321d055b40.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/6/c/8/metadata_6c8f3f0e-29ce-46a2-bdb0-bd7822627c42.dat\u0027 infile.bai \u0026\u0026    samtools view -H  -o outfile   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:30:49.494620",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-s9xds",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "0da33cfbf22b3622",  "inputs": {   "input": {    "id": "8b4ccd1e683785b1",    "src": "hda",    "uuid": "987bf512-bfac-4f38-b389-4f321d055b40"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595451.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:30:51"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595451.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:30:51"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "c42d63b32953d711",    "src": "hda",    "uuid": "afdf2ddb-cc5a-4bde-897c-fee85fc63b4d"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 2, \"output_options\": {\"__current_case__\": 0, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\"}, \"reads_report_type\": \"\"}, \"outtype\": \"header\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:31:02.511936",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out2.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 11, "time_seconds": 32.6185839176178, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #13)" name="12" time="33.912646532058716">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "4e766949b4d5773a",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|output_options|output_format|with_header": false }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/3/7/e/dataset_37ed153a-0c3a-47f5-8047-6a7d9b36e542.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/b/a/3/metadata_ba378f30-a1a4-41c4-ae9e-e1f005fba111.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads        -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:31:23.069293",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-bghp5",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "ff1d767625a87d09",  "inputs": {   "input": {    "id": "4e766949b4d5773a",    "src": "hda",    "uuid": "37ed153a-0c3a-47f5-8047-6a7d9b36e542"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595485.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:31:25"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595485.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:31:25"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "948f6b1f42bad1f7",    "src": "hda",    "uuid": "a86e92f2-c84a-4df8-b33e-9d5e45e5d75e"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\", \"with_header\": false}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:31:36.244657",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out3.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 12, "time_seconds": 33.912646532058716, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #14)" name="13" time="32.003828287124634">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "f2e276caba538f29",   "src": "hda"  },  "mode|output_options|reads_report_type": "count",  "mode|outtype": "all_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/9/4/3/dataset_943ea3e3-bdcf-45e7-a0b1-6b3388373793.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/e/2/metadata_2e268e92-b43d-4bc9-bee8-7942912a2029.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -c     -o outfile     infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:31:55.478948",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-xgrp9",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "16efd4296d989e1c",  "inputs": {   "input": {    "id": "f2e276caba538f29",    "src": "hda",    "uuid": "943ea3e3-bdcf-45e7-a0b1-6b3388373793"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595516.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:31:56"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595517.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:31:57"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputcnt": {    "id": "8c3d54e7872e69ad",    "src": "hda",    "uuid": "57416fe5-9f74-4311-b961-a00c20a6664b"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 1, \"reads_report_type\": \"count\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:32:08.404684",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputcnt: Test output file (test_counts.tab) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 13, "time_seconds": 32.003828287124634, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #15)" name="14" time="34.316598653793335">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "4fbce1d29437f987",   "src": "hda"  },  "input": {   "id": "9818597c2581521f",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "no",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/0/4/a/dataset_04a7ae4d-3b6b-4898-a8ec-e9779313dedd.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/7/2/8/dataset_72803fb9-787e-46d4-bd9c-7a74852cbe5c.dat\u0027 infile \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:32:29.179748",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-dmxz2",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "2def9dd832cd61c2",  "inputs": {   "addref_cond|ref": {    "id": "4fbce1d29437f987",    "src": "hda",    "uuid": "04a7ae4d-3b6b-4898-a8ec-e9779313dedd"   },   "input": {    "id": "9818597c2581521f",    "src": "hda",    "uuid": "72803fb9-787e-46d4-bd9c-7a74852cbe5c"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595551.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:32:31"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595551.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:32:31"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "52bb66b89366d32c",    "src": "hda",    "uuid": "7d7815bc-a59d-46af-8338-ad760d552635"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 653, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:32:42.931618",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 14, "time_seconds": 34.316598653793335, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #16)" name="15" time="34.59412860870361">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "d3f30bf145683654",   "src": "hda"  },  "input": {   "id": "03b94b7adbbecd73",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "no",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/d/3/f/dataset_d3f27989-667d-4c2e-99b4-5aad07d6cb02.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/e/6/5/dataset_e654ac6f-c00a-4e66-a102-59b59b69e974.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/a/4/9/metadata_a491c225-9d5f-46a2-bdb8-c644769a81e0.dat\u0027 infile.bai \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:33:04.909966",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-dnzdp",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "8565377db1783ed0",  "inputs": {   "addref_cond|ref": {    "id": "d3f30bf145683654",    "src": "hda",    "uuid": "d3f27989-667d-4c2e-99b4-5aad07d6cb02"   },   "input": {    "id": "03b94b7adbbecd73",    "src": "hda",    "uuid": "e654ac6f-c00a-4e66-a102-59b59b69e974"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595586.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:33:06"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595586.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:33:06"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "22b4b27ed485edd1",    "src": "hda",    "uuid": "86bf86c8-47e0-44c2-b0ab-17ce3856c6c6"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 656, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:33:17.688451",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 15, "time_seconds": 34.59412860870361, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #17)" name="16" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 16, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #18)" name="17" time="34.876627683639526">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "c9caeaa1fbb40091",   "src": "hda"  },  "input": {   "id": "b164e7a7029059e8",   "src": "hda"  },  "mode|filter_config|cond_region|regions": "CHROMOSOME_I",  "mode|filter_config|cond_region|select_region": "text",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/3/7/a/dataset_37a659cc-b689-491b-b711-307b6f7f678b.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/0/b/c/dataset_0bc524e0-7232-4950-8d19-97d73d67aaf7.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/0/e/e/metadata_0ee91aae-5c42-407d-83c0-bdf97b0bafe9.dat\u0027 infile.bai \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile  \u0027CHROMOSOME_I\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:33:38.529865",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qghf2",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "199fbddd086eed2b",  "inputs": {   "addref_cond|ref": {    "id": "c9caeaa1fbb40091",    "src": "hda",    "uuid": "37a659cc-b689-491b-b711-307b6f7f678b"   },   "input": {    "id": "b164e7a7029059e8",    "src": "hda",    "uuid": "0bc524e0-7232-4950-8d19-97d73d67aaf7"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595620.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:33:40"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595620.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:33:40"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "11207713f2c0e32f",    "src": "hda",    "uuid": "1f14f9af-dfe7-466b-a46a-781e87b94268"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 659, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 1, \"regions\": \"CHROMOSOME_I\", \"select_region\": \"text\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:33:52.406097",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 17, "time_seconds": 34.876627683639526, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #19)" name="18" time="34.210946798324585">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "82835dbd7bdcdf07",   "src": "hda"  },  "input": {   "id": "4c97737de4a57596",   "src": "hda"  },  "mode|filter_config|cond_region|regions": "CHROMOSOME_I",  "mode|filter_config|cond_region|select_region": "text",  "mode|output_options|output_format|oformat": "bam",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/4/d/c/dataset_4dc7eb13-e33c-4ee2-822b-bdd3155fd4c9.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/d/a/2/dataset_da2ff1f8-f907-4def-9d79-14db33804066.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/1/7/b/metadata_17bc2b9a-24c2-41a6-a563-4c8c7e46396c.dat\u0027 infile.crai \u0026\u0026         samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile  \u0027CHROMOSOME_I\u0027  \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:34:14.545178",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jcd5p",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "b50763ab0512681e",  "inputs": {   "addref_cond|ref": {    "id": "82835dbd7bdcdf07",    "src": "hda",    "uuid": "4dc7eb13-e33c-4ee2-822b-bdd3155fd4c9"   },   "input": {    "id": "4c97737de4a57596",    "src": "hda",    "uuid": "da2ff1f8-f907-4def-9d79-14db33804066"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595656.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:34:16"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595656.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:34:16"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "51380bf1882ee9aa",    "src": "hda",    "uuid": "eb272f3a-9c4e-4da7-ba3f-b4a4cc91ccc5"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 662, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 1, \"regions\": \"CHROMOSOME_I\", \"select_region\": \"text\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:34:26.928653",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 18, "time_seconds": 34.210946798324585, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #20)" name="19" time="38.53844118118286">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "bfb88350820cda2d",   "src": "hda"  },  "input": {   "id": "081090b90c48394f",   "src": "hda"  },  "mode|filter_config|cond_region|bedfile": {   "id": "ae2cf59ca58ef02e",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "bed",  "mode|output_options|output_format|oformat": "bam",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/f/7/3/dataset_f73b438e-0cce-4ab7-bf00-49c196462587.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/a/d/6/dataset_ad6b5fe1-e3c8-45fe-9c73-a24a24767791.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/3/3/5/metadata_335cb85e-83b6-435f-8c92-9b477c7617ed.dat\u0027 infile.crai \u0026\u0026         samtools view -@ $addthreads -b  -L \u0027/galaxy/server/database/objects/3/c/1/dataset_3c1e67a0-91c7-477f-b0af-85b3b37c5424.dat\u0027    -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:34:52.142776",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-wgxkp",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "735d7fdb6383b75b",  "inputs": {   "addref_cond|ref": {    "id": "bfb88350820cda2d",    "src": "hda",    "uuid": "f73b438e-0cce-4ab7-bf00-49c196462587"   },   "input": {    "id": "081090b90c48394f",    "src": "hda",    "uuid": "ad6b5fe1-e3c8-45fe-9c73-a24a24767791"   },   "mode|filter_config|cond_region|bedfile": {    "id": "ae2cf59ca58ef02e",    "src": "hda",    "uuid": "3c1e67a0-91c7-477f-b0af-85b3b37c5424"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595693.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:34:53"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595694.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:34:54"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "ce2f3606d7351d52",    "src": "hda",    "uuid": "72db9662-ad22-4d9b-9253-cc0fa0fdfb01"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 666, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 2, \"bedfile\": {\"values\": [{\"id\": 665, \"src\": \"hda\"}]}, \"select_region\": \"bed\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:35:05.574804",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 19, "time_seconds": 38.53844118118286, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #3)" name="2" time="34.41918110847473">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "92a70b839dd24a5b",   "src": "hda"  },  "input": {   "id": "052d7cc66e64c2ad",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/2/9/7/dataset_29780d72-7c2f-4306-a566-87a42100e1e0.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/4/b/0/dataset_4b09a7cd-6c9d-4c08-a18e-aa077c90a826.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:25:18.360840",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-6btd2",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "9d8a6e456330f9e7",  "inputs": {   "addref_cond|ref": {    "id": "92a70b839dd24a5b",    "src": "hda",    "uuid": "29780d72-7c2f-4306-a566-87a42100e1e0"   },   "input": {    "id": "052d7cc66e64c2ad",    "src": "hda",    "uuid": "4b09a7cd-6c9d-4c08-a18e-aa077c90a826"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595120.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:25:20"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595120.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:25:20"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "ddc3a1f5b890f01a",    "src": "hda",    "uuid": "fa3a581e-c992-4404-b03b-0f1faa61165b"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 627, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/equCab2.len\"",   "dbkey": "\"equCab2\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:25:31.778382",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (sam_to_bam_out3.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 2, "time_seconds": 34.41918110847473, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #21)" name="20" time="33.92769694328308">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "b581543fb3d688b9",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/6/0/1/dataset_601202b4-8af5-4697-9644-bfaa4a48479c.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/2; print(frac \u003e 1 ? 14530+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:35:25.491024",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-w6p8m",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "cc4eb509dffbbf8c",  "inputs": {   "input": {    "id": "b581543fb3d688b9",    "src": "hda",    "uuid": "601202b4-8af5-4697-9644-bfaa4a48479c"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595727.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:35:27"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595727.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:35:27"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "26d3b0869be34f1c",    "src": "hda",    "uuid": "0fd648c1-18cd-4fb3-806e-f71f17e15275"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:35:39.387742",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test_ds.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 20, "time_seconds": 33.92769694328308, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #22)" name="21" time="33.37890100479126">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "474a15d7e72ab554",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/7/a/4/dataset_7a4ec77f-508a-4f4e-b548-93262c3a2cdb.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/20; print(frac \u003e 1 ? 6274+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:35:58.885374",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jj4zj",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "8705d49a7f54e9ec",  "inputs": {   "input": {    "id": "474a15d7e72ab554",    "src": "hda",    "uuid": "7a4ec77f-508a-4f4e-b548-93262c3a2cdb"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595761.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:36:01"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595761.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:36:01"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "ba317e901178661e",    "src": "hda",    "uuid": "c352c06a-072b-435b-801e-00b2073ad0c8"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:36:12.891765",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 21, "time_seconds": 33.37890100479126, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #23)" name="22" time="32.354114055633545">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "cb8fa77d028b561c",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/e/b/4/dataset_eb4797ae-6766-4b88-a125-76c82a5723a4.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/20; print(frac \u003e 1 ? 12838+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:36:32.625533",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-j2bmx",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "a9ee34c77a8eb993",  "inputs": {   "input": {    "id": "cb8fa77d028b561c",    "src": "hda",    "uuid": "eb4797ae-6766-4b88-a125-76c82a5723a4"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595794.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:36:34"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595794.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:36:34"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "12ec5dad2f04ce55",    "src": "hda",    "uuid": "a2e36bff-f4fa-46b2-b063-7667bfd916a2"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:36:45.406962",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (no_reads.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 22, "time_seconds": 32.354114055633545, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #24)" name="23" time="33.00311017036438">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "a2971d4041038d87",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/2/6/3/dataset_263ddd11-6398-461d-89f2-e2c64b9d9469.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/5/2/5/metadata_525de488-25b3-49e5-854a-deacd79ac4cb.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/20; print(frac \u003e 1 ? 29851+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:37:05.748024",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-phsmm",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "13f5b984c4fdf1b7",  "inputs": {   "input": {    "id": "a2971d4041038d87",    "src": "hda",    "uuid": "263ddd11-6398-461d-89f2-e2c64b9d9469"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595827.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:37:07"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595827.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:37:07"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "a75954175610f601",    "src": "hda",    "uuid": "44cefe62-bff1-4b87-bdb7-8f0d3247f1be"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:37:18.558040",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (no_reads.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 23, "time_seconds": 33.00311017036438, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #25)" name="24" time="31.686184406280518">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "efd3feeb90512822",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/7/d/5/dataset_7d56f000-3f8b-4bfa-a355-7e73a98648aa.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/2; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:37:36.500112",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-7khgf",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "050fd2a64f857257",  "inputs": {   "input": {    "id": "efd3feeb90512822",    "src": "hda",    "uuid": "7d56f000-3f8b-4bfa-a355-7e73a98648aa"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595858.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:37:38"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595858.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:37:38"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "ee6dabb959ccb47e",    "src": "hda",    "uuid": "b760a10d-00d2-4e20-be1b-bd0ee2534213"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:37:50.323075",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test_ds.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 24, "time_seconds": 31.686184406280518, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #26)" name="25" time="32.6388623714447">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "70b0c9c27eecd053",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/f/6/6/dataset_f663c39c-9d69-4d1a-a444-9852adb7e20c.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/5/c/metadata_25c70be7-2daf-4765-97e5-76dd593000a8.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/2; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:38:09.909390",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-pq2tg",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "4212dc5e66558a0e",  "inputs": {   "input": {    "id": "70b0c9c27eecd053",    "src": "hda",    "uuid": "f663c39c-9d69-4d1a-a444-9852adb7e20c"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595892.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:38:12"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595892.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:38:12"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "039e1bacfbd0a29a",    "src": "hda",    "uuid": "6e80897e-bdf7-4f95-a3e9-143c72565b7f"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:38:22.983969",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 25, "time_seconds": 32.6388623714447, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #27)" name="26" time="33.42004704475403">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "a0ca36f57f5ced05",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/6/e/c/dataset_6ec8d3e6-ad56-4894-be78-40ed5ddfa27b.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/6/3/b/metadata_63bf81d6-322b-4c56-8706-863b59324227.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/20; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:38:43.362570",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-t86wj",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "8dea48e152e9ce53",  "inputs": {   "input": {    "id": "a0ca36f57f5ced05",    "src": "hda",    "uuid": "6ec8d3e6-ad56-4894-be78-40ed5ddfa27b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595924.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:38:44"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595924.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:38:44"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "3f3d69afe0bf2422",    "src": "hda",    "uuid": "307c17a0-ea56-47f3-a55c-ef765187fa86"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:38:56.299344",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 26, "time_seconds": 33.42004704475403, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #28)" name="27" time="32.688040256500244">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "7b809460387c534c",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|factor": "5",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "fraction" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/e/c/d/dataset_ecd93fee-8f72-4d81-a252-4b03f3efee07.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/b/6/metadata_2b6caffa-7e98-4688-b634-708485e76de1.dat\u0027 infile.bai \u0026\u0026          samtools view -@ $addthreads -b    -s 7.2   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:39:16.129174",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-kxc5c",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "cde8adb82303f23e",  "inputs": {   "input": {    "id": "7b809460387c534c",    "src": "hda",    "uuid": "ecd93fee-8f72-4d81-a252-4b03f3efee07"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595958.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:39:18"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595958.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:39:18"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "dd7540480fb3cf63",    "src": "hda",    "uuid": "7d9d5f0c-f7b9-4c93-9a62-25c0b05dd4ae"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"5.0\", \"seed\": \"7\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:39:29.053321",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 27, "time_seconds": 32.688040256500244, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #29)" name="28" time="33.35704040527344">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "adc338179f90ce57",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|output_options|reads_report_type": "dropped",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|factor": "1.25",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "fraction" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/6/1/b/dataset_61bc43aa-bd04-46ad-a91d-85f6010f6908.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/c/4/3/metadata_c4398ef3-b4cb-4483-afac-dd6fad46267c.dat\u0027 infile.bai \u0026\u0026          samtools view -@ $addthreads -b    -s 7.8   -U outfile -o /dev/null      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:39:49.261105",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-9slnv",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "59723c8f137234f5",  "inputs": {   "input": {    "id": "adc338179f90ce57",    "src": "hda",    "uuid": "61bc43aa-bd04-46ad-a91d-85f6010f6908"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595991.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:39:51"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595991.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:39:51"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "0ee9a12c60a7fd7a",    "src": "hda",    "uuid": "22ef7c18-265f-41f4-8db0-e7944d75c670"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 1, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"dropped\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.25\", \"seed\": \"7\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:40:02.562782",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 28, "time_seconds": 33.35704040527344, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #4)" name="3" time="34.64379358291626">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "5a1fd3e63f9c46e5",   "src": "hda"  },  "input": {   "id": "01b1a10ed7711a21",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/7/4/0/dataset_740d8107-1997-4f93-943d-5b51c385b753.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/8/5/4/dataset_85446487-83fb-4da5-aeb8-adaa408703f8.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/a/7/metadata_2a7b6b4a-2bbb-485a-bff3-b7d21305f9a1.dat\u0027 infile.crai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:25:53.831572",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qcdw9",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "ffa473d31315cf0c",  "inputs": {   "addref_cond|ref": {    "id": "5a1fd3e63f9c46e5",    "src": "hda",    "uuid": "740d8107-1997-4f93-943d-5b51c385b753"   },   "input": {    "id": "01b1a10ed7711a21",    "src": "hda",    "uuid": "85446487-83fb-4da5-aeb8-adaa408703f8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595155.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:25:55"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595155.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:25:55"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "05bdbb9f66cac3c2",    "src": "hda",    "uuid": "a9cc44c5-c4f2-4758-8b81-d426b0b094d6"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 630, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:26:06.583686",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 3, "time_seconds": 34.64379358291626, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #5)" name="4" time="33.1107075214386">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "d8782cf7eeee66be",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/b/e/6/dataset_be63709f-3e7a-407b-ac65-bf185bbf73bb.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/b/9/metadata_2b948f10-2326-4a9f-ac39-34a3f329f087.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:26:26.548720",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-5qj8z",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "743d28bb707fa294",  "inputs": {   "input": {    "id": "d8782cf7eeee66be",    "src": "hda",    "uuid": "be63709f-3e7a-407b-ac65-bf185bbf73bb"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595188.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:26:28"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595188.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:26:28"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "eaf53cd3c6f629fd",    "src": "hda",    "uuid": "742a967b-d569-4f1e-b7bd-78b5833a9cde"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:26:39.468554",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 4, "time_seconds": 33.1107075214386, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #6)" name="5" time="32.701666593551636">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "044ec76118051c0c",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/a/b/c/dataset_abcfc48d-e6f2-4263-bc5b-bfc6e971bbcb.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/7/1/0/metadata_7103e497-1a4c-4f48-a95d-f9e2150529fd.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:26:59.444275",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-f6xgm",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "e8dc78db3730d4ff",  "inputs": {   "input": {    "id": "044ec76118051c0c",    "src": "hda",    "uuid": "abcfc48d-e6f2-4263-bc5b-bfc6e971bbcb"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595221.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:27:01"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595221.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:27:01"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "d84865a28b112c43",    "src": "hda",    "uuid": "aff36b63-3a07-4611-997e-bb83588b0851"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:27:12.388969",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 5, "time_seconds": 32.701666593551636, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #7)" name="6" time="33.34684491157532">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "6404476f5f2461e1",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/b/7/e/dataset_b7e1edfe-0379-4174-91f4-e2929c3af554.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:27:32.172985",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jrrtl",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "ef250c32b182a0f3",  "inputs": {   "input": {    "id": "6404476f5f2461e1",    "src": "hda",    "uuid": "b7e1edfe-0379-4174-91f4-e2929c3af554"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595254.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:27:34"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595254.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:27:34"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "58ddc37ad34e5862",    "src": "hda",    "uuid": "64214437-00b7-4e83-bc7a-d13f43a3a256"   }  },  "params": {   "__input_ext": "\"qname_sorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:27:45.878798",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 6, "time_seconds": 33.34684491157532, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #8)" name="7" time="34.6418981552124">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "348d9db58d49388e",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/4/c/3/dataset_4c3eb5d0-5fa5-429e-9c16-21cb990c23aa.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -h      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:28:06.525571",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-x6psq",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "f15bdda2b182311a",  "inputs": {   "input": {    "id": "348d9db58d49388e",    "src": "hda",    "uuid": "4c3eb5d0-5fa5-429e-9c16-21cb990c23aa"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595288.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:28:08"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595288.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:28:08"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "246bb915372b459d",    "src": "hda",    "uuid": "d68a1b32-b974-4df6-b4ee-24213a767947"   }  },  "params": {   "__input_ext": "\"qname_sorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:28:20.543106",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (1_sort_read_names.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 7, "time_seconds": 34.6418981552124, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #9)" name="8" time="60.598061084747314">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "0a66809960e95a1a",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/c/0/1/dataset_c016bd2b-d6cb-45c9-a1d9-c1e7d4c653b2.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:28:40.399086",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-gpvtl",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "b3d333e49797e016",  "inputs": {   "input": {    "id": "0a66809960e95a1a",    "src": "hda",    "uuid": "c016bd2b-d6cb-45c9-a1d9-c1e7d4c653b2"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595349.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:29:09"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595349.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:29:09"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "79093aea8db25b81",    "src": "hda",    "uuid": "4ea4f169-6125-4318-9c9c-1ae974200151"   }  },  "params": {   "__input_ext": "\"unsorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:29:21.306085",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 8, "time_seconds": 60.598061084747314, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #10)" name="9" time="33.69069051742554">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "5ff83caa93c51624",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/7/0/0/dataset_700967fa-d707-4356-8194-0d9826e258a8.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -h      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-03-10T08:29:41.321804",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-dnmtz",  "galaxy_version": "24.2",  "handler": null,  "history_id": "4b1a7d772b7e4a7a",  "id": "325bbc3d320f274c",  "inputs": {   "input": {    "id": "5ff83caa93c51624",    "src": "hda",    "uuid": "700967fa-d707-4356-8194-0d9826e258a8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "container_id",    "plugin": "core",    "raw_value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0",    "title": "Container ID",    "value": "quay.io/biocontainers/mulled-v2-8dd8177cf5b9476288c149088f4340b576b866e3:e3f57919aec2b96cba49c23b81609837e1db9c33-0"   },   {    "name": "container_type",    "plugin": "core",    "raw_value": "docker",    "title": "Container Type",    "value": "docker"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1741595383.0000000",    "title": "Job Start Time",    "value": "2025-03-10 08:29:43"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1741595383.0000000",    "title": "Job End Time",    "value": "2025-03-10 08:29:43"   },   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "16d0968ef5a7ade8",    "src": "hda",    "uuid": "af30d8e7-dd65-440a-a205-6f6459581a33"   }  },  "params": {   "__input_ext": "\"unsorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-03-10T08:29:55.040050",  "user_email": "tests@fake.org",  "user_id": "4b1a7d772b7e4a7a" }, "output_problems": [  "Output outputsam: Test output file (1_sort_read_names.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 9, "time_seconds": 33.69069051742554, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot_embed (Test #1)" name="0" time="0.13216924667358398">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 163, in stage_data_in_history
    test_dict = galaxy_interactor.remote_to_input(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 582, in remote_to_input
    path_or_location = self._get_path_or_location(
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 619, in _get_path_or_location
    path = self.test_data_download(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 525, in test_data_download
    raise AssertionError(f"Test input file ({filename}) cannot be found.")
AssertionError: Test input file (find_cluster.h5) cannot be found.
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 163, in stage_data_in_history\n    test_dict = galaxy_interactor.remote_to_input(\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 582, in remote_to_input\n    path_or_location = self._get_path_or_location(\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 619, in _get_path_or_location\n    path = self.test_data_download(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 525, in test_data_download\n    raise AssertionError(f\"Test input file ({filename}) cannot be found.\")\nAssertionError: Test input file (find_cluster.h5) cannot be found.\n", "status": "error", "test_index": 0, "time_seconds": 0.13216924667358398, "tool_id": "scanpy_plot_embed", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_plot_embed (Test #1)" name="0" time="0.13176560401916504">
        
            <error type="error" message="Input staging problem: Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 1434, in verify_tool
    stage_data_in_history(
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 163, in stage_data_in_history
    test_dict = galaxy_interactor.remote_to_input(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 582, in remote_to_input
    path_or_location = self._get_path_or_location(
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 619, in _get_path_or_location
    path = self.test_data_download(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py", line 525, in test_data_download
    raise AssertionError(f"Test input file ({filename}) cannot be found.")
AssertionError: Test input file (find_cluster.h5) cannot be found.
"><![CDATA[
                { "execution_problem": "Input staging problem: Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 1434, in verify_tool\n    stage_data_in_history(\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 163, in stage_data_in_history\n    test_dict = galaxy_interactor.remote_to_input(\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 582, in remote_to_input\n    path_or_location = self._get_path_or_location(\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 619, in _get_path_or_location\n    path = self.test_data_download(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/galaxy/tool_util/verify/interactor.py\", line 525, in test_data_download\n    raise AssertionError(f\"Test input file ({filename}) cannot be found.\")\nAssertionError: Test input file (find_cluster.h5) cannot be found.\n", "status": "error", "test_index": 0, "time_seconds": 0.13176560401916504, "tool_id": "scanpy_plot_embed", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scater_normalize (Test #1)" name="0" time="74.51270818710327">
        
            
            <system-out><![CDATA[
            [1] "Normalising...."[1] "Finished normalising"[1] TRUE
            ]]></system-out>
            <system-err><![CDATA[
            Loading required package: S4VectorsLoading required package: stats4Loading required package: BiocGenericsLoading required package: parallelAttaching package: 'BiocGenerics'The following objects are masked from 'package:parallel':    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,    clusterExport, clusterMap, parApply, parCapply, parLapply,    parLapplyLB, parRapply, parSapply, parSapplyLBThe following objects are masked from 'package:stats':    IQR, mad, sd, var, xtabsThe following objects are masked from 'package:base':    Filter, Find, Map, Position, Reduce, anyDuplicated, append,    as.data.frame, basename, cbind, colnames, dirname, do.call,    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,    tapply, union, unique, unsplit, which, which.max, which.minAttaching package: 'S4Vectors'The following object is masked from 'package:base':    expand.gridLoading required package: SingleCellExperimentLoading required package: SummarizedExperimentLoading required package: GenomicRangesLoading required package: IRangesLoading required package: GenomeInfoDbLoading required package: BiobaseWelcome to Bioconductor    Vignettes contain introductory material; view with    'browseVignettes()'. To cite Bioconductor, see    'citation("Biobase")', and for packages 'citation("pkgname")'.Loading required package: DelayedArrayLoading required package: matrixStatsAttaching package: 'matrixStats'The following objects are masked from 'package:Biobase':    anyMissing, rowMediansLoading required package: BiocParallelAttaching package: 'DelayedArray'The following objects are masked from 'package:matrixStats':    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRangesThe following objects are masked from 'package:base':    aperm, apply, rowsumLoading required package: rhdf5Loading required package: rtracklayerLoading required package: ggplot2Attaching package: 'scater'The following object is masked from 'package:S4Vectors':    renameThe following object is masked from 'package:stats':    filterWarning message:In .local(object, ...) : using library sizes as size factors
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #1)" name="0" time="235.10352897644043">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:28:11)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/3/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-03-10 06:28:11)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-03-10 06:28:11)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/3/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/3/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/3/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/3/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/3/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/3/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.6.56+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/3/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/3/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/3/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/3/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/3/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/3/working/spades_assembly/dataset.info") with K=27  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.065    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.068    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.078    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.079    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.085    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.119     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.140     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.140     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.140     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.140     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.141     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.142     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.142     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.021     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:01.024     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.316     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.316     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.379     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.380     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.381     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.381     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.381     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:02.219  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:02.219  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:02.220     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.521     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.521     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.582     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.582     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.797     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.810     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.832     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.836     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.839     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.841     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.846     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.846     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.846     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.846     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.846     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.848     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.848     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.849     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.849     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.849     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.849     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.851     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.851     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.886     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.886     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.951     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.953     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:03.032     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:03.032     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:03.033     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:03.033     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:03.033     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:03.130     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:03.421     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.949     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:04.416     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:05.210     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:05.210     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:05.211     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:05.211     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:05.211     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:05.211     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:05.211     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:05.211     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:05.211     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:05.211     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: early_gapc..        : 292)   SPAdes finished  0:00:05.324     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 5 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-03-10 06:30:34)Filter by read depth        (2025-03-10 06:30:34)Filter homopolymer loops    (2025-03-10 06:30:34)Merge all possible          (2025-03-10 06:30:34)Normalise read depths       (2025-03-10 06:30:34)Remove zero length segments (2025-03-10 06:30:34)Sort link order             (2025-03-10 06:30:34)Graph cleaning finished     (2025-03-10 06:30:34)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-03-10 06:30:34)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/Determining graph multiplicity (2025-03-10 06:30:34)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-03-10 06:30:34)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:30:34)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:30:34)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2025-03-10 06:30:34)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-03-10 06:30:34)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:30:34)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:30:34)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:30:43)Saving /galaxy/server/database/jobs_directory/000/3/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/3/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #2)" name="1" time="196.23567295074463">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:31:26)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/7/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-03-10 06:31:27)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-03-10 06:31:27)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/7/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/7/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.6.56+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/7/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz']      right reads: ['/galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz: max reads length: 251/galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/7/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.073    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.076    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.087    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.088    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.095    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.132     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.152     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.152     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.152     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.152     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.154     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.154     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.154     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.132     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:01.134     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.460     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.461     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.526     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.526     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.527     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.527     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.527     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:02.412  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:02.412  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:02.413     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.692     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.692     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.760     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.760     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.991     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:03.004     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:03.030     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:03.035     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:03.037     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:03.039     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:03.044     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:03.044     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:03.044     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:03.044     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:03.044     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:03.046     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:03.046     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:03.046     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:03.046     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:03.046     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:03.046     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:03.048     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:03.048     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:03.082     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:03.083     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:03.146     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:03.147     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:03.236     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:03.236     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:03.236     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:03.236     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:03.236     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:03.335     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:03.629     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:04.145     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:04.613     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:05.413     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:05.413     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:05.414     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:05.414     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:05.414     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:05.414     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:05.415     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:05.415     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:05.415     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:05.415     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Clos..33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-03-10 06:33:50)Filter by read depth        (2025-03-10 06:33:50)Filter homopolymer loops    (2025-03-10 06:33:50)Merge all possible          (2025-03-10 06:33:50)Normalise read depths       (2025-03-10 06:33:50)Remove zero length segments (2025-03-10 06:33:50)Sort link order             (2025-03-10 06:33:50)Graph cleaning finished     (2025-03-10 06:33:50)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-03-10 06:33:50)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/Determining graph multiplicity (2025-03-10 06:33:50)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-03-10 06:33:50)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:33:50)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:33:50)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-03-10 06:33:50)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2025-03-10 06:33:50)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/7/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/7/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2025-03-10 06:33:50)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/7/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2025-03-10 06:33:50)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-03-10 06:33:50)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2025-03-10 06:33:50)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.056 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2025-03-10 06:33:50)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/7/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-03-10 06:33:50)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-03-10 06:33:50)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-03-10 06:33:50)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:33:50)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:33:50)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:33:59)Saving /galaxy/server/database/jobs_directory/000/7/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/7/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #3)" name="2" time="186.49511194229126">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:34:38)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/10/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-03-10 06:34:39)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-03-10 06:34:39)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/10/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/10/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/10/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/10/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/10/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/10/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.6.56+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/10/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/10/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/10/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/10/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/10/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/10/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.000     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.066    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.069    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.080    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.081    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.126     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.145     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.145     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.145     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.145     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.147     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.147     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.147     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.062     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:01.064     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.352     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.353     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.434     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.434     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.435     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.435     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.435     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:02.449  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:02.450  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:02.450     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.795     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.795     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.859     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.859     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:03.234     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:03.254     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:03.301     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:03.308     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:03.312     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:03.314     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:03.321     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:03.322     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:03.322     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:03.322     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:03.322     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:03.323     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:03.324     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:03.324     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:03.324     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:03.324     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:03.324     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:03.326     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:03.326     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:03.376     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:03.377     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:03.454     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:03.456     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:03.585     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:03.585     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:03.585     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:03.585     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:03.585     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:03.687     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:04.001     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:04.535     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:05.038     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:05.844     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:05.844     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:05.845     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:05.845     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:05.845     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:05.845     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:05.845     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:05.846     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:05.846     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:05.846     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Clo.. / 158M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-03-10 06:36:57)Filter by read depth        (2025-03-10 06:36:57)Filter homopolymer loops    (2025-03-10 06:36:57)Merge all possible          (2025-03-10 06:36:57)Normalise read depths       (2025-03-10 06:36:57)Remove zero length segments (2025-03-10 06:36:57)Sort link order             (2025-03-10 06:36:57)Graph cleaning finished     (2025-03-10 06:36:57)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-03-10 06:36:57)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/Determining graph multiplicity (2025-03-10 06:36:57)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-03-10 06:36:57)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:36:57)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:36:57)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2025-03-10 06:36:57)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-03-10 06:36:57)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:36:57)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:36:57)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:37:06)Saving /galaxy/server/database/jobs_directory/000/10/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/10/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #4)" name="3" time="35.790552377700806">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:37:41)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/12/workingDependencies:  Program       Version   Status     Path                        spades.py               not used                               racon         1.5.0     good       /usr/local/bin/racon        makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Loading reads (2025-03-10 06:37:42)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2025-03-10 06:37:42)Saving to /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/12_unitig_graph.gfaPolishing miniasm assembly with Racon (2025-03-10 06:37:42)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/13_racon_polished.gfaAssembly complete (2025-03-10 06:37:42)Saving /galaxy/server/database/jobs_directory/000/12/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #5)" name="4" time="57.79014205932617">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:38:30)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/17/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    SPAdes graph already exists. Will use this graph instead of running SPAdes:  /galaxy/server/database/jobs_directory/000/17/working/002_depth_filter.gfaDetermining graph multiplicity (2025-03-10 06:38:30)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments: none    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-03-10 06:38:30)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 4 (0.0%)1 / 4 (25.0%)2 / 4 (50.0%)3 / 4 (75.0%)4 / 4 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        64        63       2        63        64Graph overlaps removedRemoved zero-length segments:    2    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:38:30)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:38:30)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-03-10 06:38:30)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2025-03-10 06:38:30)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/17/working/miniasm_assembly/all_segments.fastaNumber of minimap alignments: 0Saving to /galaxy/server/database/jobs_directory/000/17/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  0 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2025-03-10 06:38:30)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/17/working/simple_bridging/all_segments.fastaNumber of minimap alignments: 0    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2025-03-10 06:38:30)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-03-10 06:38:30)Done! 0 out of 40 reads alignedAligning reads (2025-03-10 06:38:30)1/40: 570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template (412 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None2/40: b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template (4435 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None3/40: 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template (4127 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None4/40: bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template (4275 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None5/40: f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template (1009 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None6/40: 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template (548 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None7/40: a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template (4456 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None8/40: d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template (475 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None9/40: 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template (658 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None10/40: 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template (11629 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None11/40: 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template (674 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None12/40: ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template (1811 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None13/40: f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template (4509 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None14/40: 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template (4333 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None15/40: ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template (873 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None16/40: 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template (1754 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None17/40: d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template (424 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None18/40: a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template (15194 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None19/40: 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template (683 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None20/40: bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template (1421 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None21/40: cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template (2712 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None22/40: a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template (433 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None23/40: c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template (471 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None24/40: 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template (2112 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None25/40: 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template (4536 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None26/40: ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template (1644 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None27/40: 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template (4615 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None28/40: 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template (4587 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None29/40: 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template (7266 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None30/40: f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template (756 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None31/40: 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template (107 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None32/40: 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template (593 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None33/40: 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template (2838 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None34/40: 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template (4286 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None35/40: 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template (18566 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None36/40: 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template (4605 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None37/40: c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template (31279 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None38/40: c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template (1148 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None39/40: 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template (1739 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None40/40: 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template (4413 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  NoneRead alignment summary (2025-03-10 06:38:30)Total read count:        40Fully aligned reads:      0Partially aligned reads:  0Unaligned reads:         40570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template, b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template, 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template, bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template, f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template, 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template, a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template, d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template, 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template, 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template, 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template, ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template, f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template, 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template, ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template, 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template, d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template, a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template, 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template, bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template, cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template, a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template, c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template, 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template, 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template, ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template, 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template, 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template, 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template, f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template, 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template, 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template, 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template, 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template, 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template, 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template, c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template, c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template, 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template, 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_templateTotal bases aligned:      0 bpMean alignment identity:  0.0%Deleting /galaxy/server/database/jobs_directory/000/17/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-03-10 06:38:30)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-03-10 06:38:30)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-03-10 06:38:30)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:38:30)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:38:30)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:38:39)Saving /galaxy/server/database/jobs_directory/000/17/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/17/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #6)" name="5" time="178.88728737831116">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:39:16)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 1Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/20/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-03-10 06:39:16)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-03-10 06:39:17)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/20/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/20/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/20/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/20/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/20/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/20/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.6.56+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/20/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/20/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/20/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/20/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/20/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/20/working/spades_assembly/dataset.info") with K=27  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.064    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.067    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.080    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.081    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.087    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.118     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.131     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.131     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.131     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.131     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.133     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.133     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.133     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.885     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.888     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.108     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.108     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.160     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.160     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.161     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.161     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.161     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.915  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.915  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.915     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.126     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.126     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.171     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.171     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.365     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.379     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.405     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.408     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.411     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.413     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.417     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.418     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.418     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.418     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.418     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.420     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.420     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.420     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.420     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.420     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.420     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.422     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.422     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.454     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.455     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.521     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.522     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.592     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.592     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.592     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.592     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.592     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.690     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.984     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.503     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.968     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.764     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.764     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.765     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.765     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.765     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.765     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.765     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.765     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.765     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.765     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Clo..tabase/jobs_directory/000/20/working/spades_assembly/K127/scaffolds.fasta  0:00:04.764     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 107)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/scaffolds.paths  0:00:04.770     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 114)   Populating GFA with scaffold paths  0:00:04.781     3M / 159M  INFO    General                 (pipeline.cpp              : 292)   SPAdes finished  0:00:04.783     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2025-03-10 06:41:28)Filter by read depth        (2025-03-10 06:41:28)Filter homopolymer loops    (2025-03-10 06:41:28)Merge all possible          (2025-03-10 06:41:28)Normalise read depths       (2025-03-10 06:41:28)Remove zero length segments (2025-03-10 06:41:28)Sort link order             (2025-03-10 06:41:28)Graph cleaning finished     (2025-03-10 06:41:28)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-03-10 06:41:29)Filter by read depth        (2025-03-10 06:41:29)Filter homopolymer loops    (2025-03-10 06:41:29)Merge all possible          (2025-03-10 06:41:29)Normalise read depths       (2025-03-10 06:41:29)Remove zero length segments (2025-03-10 06:41:29)Sort link order             (2025-03-10 06:41:29)Graph cleaning finished     (2025-03-10 06:41:29)Saving /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-03-10 06:41:29)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/20/working/spades_assembly/Determining graph multiplicity (2025-03-10 06:41:29)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/20/working/002_depth_filter.gfaCleaning graph (2025-03-10 06:41:29)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/20/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:41:29)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:41:29)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2025-03-10 06:41:29)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/20/working/004_bridges_applied.gfaCleaning up leftover segments (2025-03-10 06:41:29)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:41:29)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/20/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:41:29)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:41:38)Saving /galaxy/server/database/jobs_directory/000/20/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/20/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #7)" name="6" time="187.89898705482483">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:42:20)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/24/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-03-10 06:42:21)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-03-10 06:42:21)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/24/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/24/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/24/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/24/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/24/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/24/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.6.56+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/24/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/24/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/24/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/24/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/24/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/24/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/24/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/24/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.068    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.071    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.083    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.084    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.090    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.125     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.148     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.148     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.148     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.148     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.150     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.150     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.150     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.964     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.966     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.208     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.208     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.262     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.262     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.263     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.263     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.263     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:02.044  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:02.044  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:02.045     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.291     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.291     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.342     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.342     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.519     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.531     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.549     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.555     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.557     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.560     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.564     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.564     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.564     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.565     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.565     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.566     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.567     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.567     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.567     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.567     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.567     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.569     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.569     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.608     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.609     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.673     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.674     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.740     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.740     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.838     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:03.134     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.650     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:04.119     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.919     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.919     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.920     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.920     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.920     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.920     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.920     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.920     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.920     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.920     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: ear..all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-03-10 06:44:36)Filter by read depth        (2025-03-10 06:44:36)Filter homopolymer loops    (2025-03-10 06:44:36)Merge all possible          (2025-03-10 06:44:36)Normalise read depths       (2025-03-10 06:44:36)Remove zero length segments (2025-03-10 06:44:36)Sort link order             (2025-03-10 06:44:36)Graph cleaning finished     (2025-03-10 06:44:36)Saving /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-03-10 06:44:36)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/24/working/spades_assembly/Determining graph multiplicity (2025-03-10 06:44:36)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/24/working/002_depth_filter.gfaCleaning graph (2025-03-10 06:44:36)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/24/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:44:36)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:44:36)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-03-10 06:44:36)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2025-03-10 06:44:36)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/24/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/24/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2025-03-10 06:44:36)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/24/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2025-03-10 06:44:36)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-03-10 06:44:36)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2025-03-10 06:44:37)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.055 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2025-03-10 06:44:37)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-03-10 06:44:37)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-03-10 06:44:37)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/24/working/004_bridges_applied.gfaCleaning up leftover segments (2025-03-10 06:44:37)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:44:37)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/24/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:44:37)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:44:45)Saving /galaxy/server/database/jobs_directory/000/24/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/24/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #8)" name="7" time="189.99735188484192">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2025-03-10 06:45:31)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --no_simple_bridges --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/28/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2025-03-10 06:45:31)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2025-03-10 06:45:31)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/28/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/28/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/28/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/28/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/28/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/28/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.6.56+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/28/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/28/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/28/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/28/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/28/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/28/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/28/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/28/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.068    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.071    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.083    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.085    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.091    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.127     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.142     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.142     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.142     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.142     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.144     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.144     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.144     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.009     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:01.011     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.273     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.273     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.330     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.330     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.331     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.331     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.331     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:02.146  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:02.147  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:02.147     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.389     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.389     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.438     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.438     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.612     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.625     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.652     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.657     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.660     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.662     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.666     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.666     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.666     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.666     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.666     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.668     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.668     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.668     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.668     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.668     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.668     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.670     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.670     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.704     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.705     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.769     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.771     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.857     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.857     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.858     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.858     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.858     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.957     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:03.249     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.765     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:04.233     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:05.028     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:05.028     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:05.029     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:05.029     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:05.029     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:05.029     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:05.029     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:05.029     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:05.029     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:05.029     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==..-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2025-03-10 06:47:48)Filter by read depth        (2025-03-10 06:47:48)Filter homopolymer loops    (2025-03-10 06:47:48)Merge all possible          (2025-03-10 06:47:48)Normalise read depths       (2025-03-10 06:47:48)Remove zero length segments (2025-03-10 06:47:48)Sort link order             (2025-03-10 06:47:48)Graph cleaning finished     (2025-03-10 06:47:48)Saving /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2025-03-10 06:47:48)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/28/working/spades_assembly/Determining graph multiplicity (2025-03-10 06:47:48)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2025-03-10 06:47:48)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2025-03-10 06:47:48)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2025-03-10 06:47:48)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2025-03-10 06:47:48)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2025-03-10 06:47:48)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/28/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/28/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultDetermining low score threshold (2025-03-10 06:47:48)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2025-03-10 06:47:48)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2025-03-10 06:47:48)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.056 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2025-03-10 06:47:48)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/28/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2025-03-10 06:47:48)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2025-03-10 06:47:48)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2025-03-10 06:47:48)Segments eligible for deletion:Bridged assembly graph (2025-03-10 06:47:48)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2025-03-10 06:47:48)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2025-03-10 06:47:57)Saving /galaxy/server/database/jobs_directory/000/28/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/28/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfcheck (Test #1)" name="0" time="41.27408695220947">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            index file localref.fa.fai not found, generating...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfdistance (Test #1)" name="0" time="34.89436078071594">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>