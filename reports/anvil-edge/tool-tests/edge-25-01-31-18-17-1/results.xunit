<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="107"
           errors="25"
           failures="32"
           skip="0">
    
    <testcase classname="anndata_manipulate (Test #1)" name="0" time="46.502037525177">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "519a4072ec5afddc",   "src": "hda"  },  "manipulate|batch_key": "batch",  "manipulate|function": "concatenate",  "manipulate|index_unique": "-",  "manipulate|join": "inner",  "manipulate|other_adatas": {   "id": "519a4072ec5afddc",   "src": "hda"  } }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/133/configs/tmp3geh9naf\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/133/configs/tmp3geh9naf\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:09:27.625934",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-8hhwh",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "f67e3f0f9cc04a85",  "inputs": {   "input": {    "id": "519a4072ec5afddc",    "src": "hda",    "uuid": "fd0ad163-037d-4501-895b-50e4846c2220"   },   "manipulate|other_adatas": {    "id": "519a4072ec5afddc",    "src": "hda",    "uuid": "fd0ad163-037d-4501-895b-50e4846c2220"   },   "manipulate|other_adatas1": {    "id": "519a4072ec5afddc",    "src": "hda",    "uuid": "fd0ad163-037d-4501-895b-50e4846c2220"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350580.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:09:40"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350579.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:09:39"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "debb5f686781546a",    "src": "hda",    "uuid": "be65ebc3-a9b1-4764-9078-4f4903491991"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 0, \"batch_key\": \"batch\", \"function\": \"concatenate\", \"index_unique\": \"-\", \"join\": \"inner\", \"other_adatas\": {\"values\": [{\"id\": 149, \"src\": \"hda\"}]}}"  },  "state": "ok",  "stderr": "",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/f/d/0/dataset_fd0ad163-037d-4501-895b-50e4846c2220.dat\u0027)\n\nadata_0 = ad.read(\u0027/galaxy/server/database/objects/f/d/0/dataset_fd0ad163-037d-4501-895b-50e4846c2220.dat\u0027)\nadata = adata.concatenate(\n    adata_0,\n    join=\u0027inner\u0027,\n    index_unique=\u0027-\u0027,\n    batch_key=\u0027batch\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/f/d/0/dataset_fd0ad163-037d-4501-895b-50e4846c2220.dat\u0027)\n\nadata_0 = ad.read(\u0027/galaxy/server/database/objects/f/d/0/dataset_fd0ad163-037d-4501-895b-50e4846c2220.dat\u0027)\nadata = adata.concatenate(\n    adata_0,\n    join=\u0027inner\u0027,\n    index_unique=\u0027-\u0027,\n    batch_key=\u0027batch\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:09:53.469895",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.concatenate.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 0, "time_seconds": 46.502037525177, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/f/d/0/dataset_fd0ad163-037d-4501-895b-50e4846c2220.dat')adata_0 = ad.read('/galaxy/server/database/objects/f/d/0/dataset_fd0ad163-037d-4501-895b-50e4846c2220.dat')adata = adata.concatenate(    adata_0,    join='inner',    index_unique='-',    batch_key='batch')adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #1)" name="0" time="37.413960456848145">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "e85b1b8a5d3b406f",   "src": "hda"  },  "manipulate|batch_key": "batch",  "manipulate|function": "concatenate",  "manipulate|index_unique": "-",  "manipulate|join": "inner",  "manipulate|other_adatas": {   "id": "e85b1b8a5d3b406f",   "src": "hda"  } }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/157/configs/tmp8psqs7bj\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/157/configs/tmp8psqs7bj\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:16:14.471398",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-7w24z",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "31c35df41c590cdd",  "inputs": {   "input": {    "id": "e85b1b8a5d3b406f",    "src": "hda",    "uuid": "41417477-1f6c-45c6-b327-9c0bbf18f0f2"   },   "manipulate|other_adatas": {    "id": "e85b1b8a5d3b406f",    "src": "hda",    "uuid": "41417477-1f6c-45c6-b327-9c0bbf18f0f2"   },   "manipulate|other_adatas1": {    "id": "e85b1b8a5d3b406f",    "src": "hda",    "uuid": "41417477-1f6c-45c6-b327-9c0bbf18f0f2"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350978.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:16:18"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350976.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:16:16"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "7e4a18ccbd5939a7",    "src": "hda",    "uuid": "eed8cd41-a904-48fc-ae1f-98a5c96eb4f2"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 0, \"batch_key\": \"batch\", \"function\": \"concatenate\", \"index_unique\": \"-\", \"join\": \"inner\", \"other_adatas\": {\"values\": [{\"id\": 173, \"src\": \"hda\"}]}}"  },  "state": "ok",  "stderr": "",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/4/1/4/dataset_41417477-1f6c-45c6-b327-9c0bbf18f0f2.dat\u0027)\n\nadata_0 = ad.read(\u0027/galaxy/server/database/objects/4/1/4/dataset_41417477-1f6c-45c6-b327-9c0bbf18f0f2.dat\u0027)\nadata = adata.concatenate(\n    adata_0,\n    join=\u0027inner\u0027,\n    index_unique=\u0027-\u0027,\n    batch_key=\u0027batch\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/4/1/4/dataset_41417477-1f6c-45c6-b327-9c0bbf18f0f2.dat\u0027)\n\nadata_0 = ad.read(\u0027/galaxy/server/database/objects/4/1/4/dataset_41417477-1f6c-45c6-b327-9c0bbf18f0f2.dat\u0027)\nadata = adata.concatenate(\n    adata_0,\n    join=\u0027inner\u0027,\n    index_unique=\u0027-\u0027,\n    batch_key=\u0027batch\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:16:30.104425",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.concatenate.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 0, "time_seconds": 37.413960456848145, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/4/1/4/dataset_41417477-1f6c-45c6-b327-9c0bbf18f0f2.dat')adata_0 = ad.read('/galaxy/server/database/objects/4/1/4/dataset_41417477-1f6c-45c6-b327-9c0bbf18f0f2.dat')adata = adata.concatenate(    adata_0,    join='inner',    index_unique='-',    batch_key='batch')adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #2)" name="1" time="29.18746328353882">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "665bb146d9a2e455",   "src": "hda"  },  "manipulate|function": "obs_names_make_unique",  "manipulate|join": "-" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/135/configs/tmpk4hdc9xl\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/135/configs/tmpk4hdc9xl\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:10:16.346163",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-27f4m",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "4ed1f972f47c124d",  "inputs": {   "input": {    "id": "665bb146d9a2e455",    "src": "hda",    "uuid": "591c9972-ef1f-4b88-a367-2c978d1b05b5"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "bc0d22fe7bb263dc",    "src": "hda",    "uuid": "c8034475-bc5b-4d56-8a62-1faa04390bf7"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 1, \"function\": \"obs_names_make_unique\", \"join\": \"-\"}"  },  "state": "error",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/5/9/1/dataset_591c9972-ef1f-4b88-a367-2c978d1b05b5.dat\u0027)\n\nadata.obs_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/5/9/1/dataset_591c9972-ef1f-4b88-a367-2c978d1b05b5.dat\u0027)\n\nadata.obs_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:10:22.851959",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n." ], "status": "failure", "test_index": 1, "time_seconds": 29.18746328353882, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/5/9/1/dataset_591c9972-ef1f-4b88-a367-2c978d1b05b5.dat')adata.obs_names_make_unique(join='-')adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #2)" name="1" time="36.54009747505188">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "6e60a4e4729b201a",   "src": "hda"  },  "manipulate|function": "obs_names_make_unique",  "manipulate|join": "-" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/159/configs/tmpyc4fo1qo\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/159/configs/tmpyc4fo1qo\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:16:50.880939",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-hb2vq",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "8087af02d4127119",  "inputs": {   "input": {    "id": "6e60a4e4729b201a",    "src": "hda",    "uuid": "84111999-b10e-4cb5-bdf3-99790b048242"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351014.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:16:54"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351013.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:16:53"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "69afc0fe611b9274",    "src": "hda",    "uuid": "b7c1a92f-de75-44b0-80c5-22182922383b"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 1, \"function\": \"obs_names_make_unique\", \"join\": \"-\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/8/4/1/dataset_84111999-b10e-4cb5-bdf3-99790b048242.dat\u0027)\n\nadata.obs_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/8/4/1/dataset_84111999-b10e-4cb5-bdf3-99790b048242.dat\u0027)\n\nadata.obs_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:17:06.791816",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.obs_names_make_unique.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 1, "time_seconds": 36.54009747505188, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/8/4/1/dataset_84111999-b10e-4cb5-bdf3-99790b048242.dat')adata.obs_names_make_unique(join='-')adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #11)" name="10" time="37.8696563243866">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "66217156c49c1a42",   "src": "hda"  },  "manipulate|function": "save_raw" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/155/configs/tmpynt2_ah5\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/155/configs/tmpynt2_ah5\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:15:35.721215",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-42nr2",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "bd0842abb93e58bb",  "inputs": {   "input": {    "id": "66217156c49c1a42",    "src": "hda",    "uuid": "795ad449-d352-4a15-93b1-3f7b966a8f84"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350938.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:15:38"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350937.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:15:37"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "abff5387c0e625a9",    "src": "hda",    "uuid": "3e192899-b7f9-4d3e-a64d-8b592316e9b3"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 8, \"function\": \"save_raw\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/7/9/5/dataset_795ad449-d352-4a15-93b1-3f7b966a8f84.dat\u0027)\n\nadata.raw = adata\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/7/9/5/dataset_795ad449-d352-4a15-93b1-3f7b966a8f84.dat\u0027)\n\nadata.raw = adata\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:15:51.505295",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.save_raw.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 10, "time_seconds": 37.8696563243866, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/7/9/5/dataset_795ad449-d352-4a15-93b1-3f7b966a8f84.dat')adata.raw = adataadata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #11)" name="10" time="32.01088762283325">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "be87a5732fb4ec15",   "src": "hda"  },  "manipulate|function": "save_raw" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/178/configs/tmpj0_ov4l1\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/178/configs/tmpj0_ov4l1\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:21:55.183757",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-2p7xz",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "ed88c43f61c4bc45",  "inputs": {   "input": {    "id": "be87a5732fb4ec15",    "src": "hda",    "uuid": "a05e26eb-bc25-45b5-ab73-990bbe177634"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "e30c98df6c22eae8",    "src": "hda",    "uuid": "c4d62284-a9f3-417c-b635-35479893d8a0"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 8, \"function\": \"save_raw\"}"  },  "state": "error",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/0/5/dataset_a05e26eb-bc25-45b5-ab73-990bbe177634.dat\u0027)\n\nadata.raw = adata\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/0/5/dataset_a05e26eb-bc25-45b5-ab73-990bbe177634.dat\u0027)\n\nadata.raw = adata\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:22:01.241251",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n." ], "status": "failure", "test_index": 10, "time_seconds": 32.01088762283325, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/a/0/5/dataset_a05e26eb-bc25-45b5-ab73-990bbe177634.dat')adata.raw = adataadata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #3)" name="2" time="36.77471303939819">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "837282f56e7cc14c",   "src": "hda"  },  "manipulate|function": "var_names_make_unique",  "manipulate|join": "-" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/137/configs/tmpc3dgd7h1\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/137/configs/tmpc3dgd7h1\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:10:43.967970",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-v8xhk",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "bb0231288e2cd2f5",  "inputs": {   "input": {    "id": "837282f56e7cc14c",    "src": "hda",    "uuid": "e5e31b40-9c6f-4326-8f8a-a4ee583f56bf"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350647.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:10:47"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350646.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:10:46"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "39e85e8aa2a39ad3",    "src": "hda",    "uuid": "4e5d6caa-b267-43d4-834e-60f443ef4f2d"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 2, \"function\": \"var_names_make_unique\", \"join\": \"-\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/e/5/e/dataset_e5e31b40-9c6f-4326-8f8a-a4ee583f56bf.dat\u0027)\n\nadata.var_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/e/5/e/dataset_e5e31b40-9c6f-4326-8f8a-a4ee583f56bf.dat\u0027)\n\nadata.var_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:10:59.829094",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.var_names_make_unique.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 2, "time_seconds": 36.77471303939819, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/e/5/e/dataset_e5e31b40-9c6f-4326-8f8a-a4ee583f56bf.dat')adata.var_names_make_unique(join='-')adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #3)" name="2" time="35.37373948097229">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "a8c63a08b06cff9e",   "src": "hda"  },  "manipulate|function": "var_names_make_unique",  "manipulate|join": "-" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/161/configs/tmp0sl34vrk\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/161/configs/tmp0sl34vrk\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:17:27.091226",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-hpl7m",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "852815f0fbc65062",  "inputs": {   "input": {    "id": "a8c63a08b06cff9e",    "src": "hda",    "uuid": "2e6d078c-0d1c-44ce-875c-e66a11fe9688"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351050.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:17:30"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351049.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:17:29"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "ed88c43f61c4bc45",    "src": "hda",    "uuid": "7d474cae-b477-49e6-9474-02f6e4d926f7"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 2, \"function\": \"var_names_make_unique\", \"join\": \"-\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/2/e/6/dataset_2e6d078c-0d1c-44ce-875c-e66a11fe9688.dat\u0027)\n\nadata.var_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/2/e/6/dataset_2e6d078c-0d1c-44ce-875c-e66a11fe9688.dat\u0027)\n\nadata.var_names_make_unique(join=\u0027-\u0027)\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:17:42.210476",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.var_names_make_unique.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 2, "time_seconds": 35.37373948097229, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/2/e/6/dataset_2e6d078c-0d1c-44ce-875c-e66a11fe9688.dat')adata.var_names_make_unique(join='-')adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #4)" name="3" time="29.868913173675537">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "bd0842abb93e58bb",   "src": "hda"  },  "manipulate|categories": "Er,Ml,Mt, Ne, pr",  "manipulate|function": "rename_categories",  "manipulate|key": "cell_type" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/139/configs/tmpdp6jtlko\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/139/configs/tmpdp6jtlko\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:11:21.739493",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-8lmbk",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "05c2f516830e6ba6",  "inputs": {   "input": {    "id": "bd0842abb93e58bb",    "src": "hda",    "uuid": "0ca26154-b7c5-4eb5-8fe1-dbba38bab388"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "e113319520fce835",    "src": "hda",    "uuid": "0e1dd554-dd49-40ef-bf0c-1843e21813ed"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 3, \"categories\": \"Er,Ml,Mt, Ne, pr\", \"function\": \"rename_categories\", \"key\": \"cell_type\"}"  },  "state": "error",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/0/c/a/dataset_0ca26154-b7c5-4eb5-8fe1-dbba38bab388.dat\u0027)\n\nadata.rename_categories(\n    key=\u0027cell_type\u0027,\n    categories=[\u0027Er\u0027, \u0027Ml\u0027, \u0027Mt\u0027, \u0027Ne\u0027, \u0027pr\u0027])\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/0/c/a/dataset_0ca26154-b7c5-4eb5-8fe1-dbba38bab388.dat\u0027)\n\nadata.rename_categories(\n    key=\u0027cell_type\u0027,\n    categories=[\u0027Er\u0027, \u0027Ml\u0027, \u0027Mt\u0027, \u0027Ne\u0027, \u0027pr\u0027])\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:11:29.511806",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n." ], "status": "failure", "test_index": 3, "time_seconds": 29.868913173675537, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/0/c/a/dataset_0ca26154-b7c5-4eb5-8fe1-dbba38bab388.dat')adata.rename_categories(    key='cell_type',    categories=['Er', 'Ml', 'Mt', 'Ne', 'pr'])adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #4)" name="3" time="37.52906632423401">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "a4cf2b8a11eb47cf",   "src": "hda"  },  "manipulate|categories": "Er,Ml,Mt, Ne, pr",  "manipulate|function": "rename_categories",  "manipulate|key": "cell_type" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/163/configs/tmpzl30n0k8\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/163/configs/tmpzl30n0k8\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:18:04.019654",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-r22zk",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "c12f82a2bbd32fd1",  "inputs": {   "input": {    "id": "a4cf2b8a11eb47cf",    "src": "hda",    "uuid": "363d72f2-d15f-4d08-8c93-8d8a9f4479b4"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351087.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:18:07"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351086.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:18:06"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "ef24099412048204",    "src": "hda",    "uuid": "080b3925-7159-4daf-b55f-0bcc870b9fea"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 3, \"categories\": \"Er,Ml,Mt, Ne, pr\", \"function\": \"rename_categories\", \"key\": \"cell_type\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/3/6/3/dataset_363d72f2-d15f-4d08-8c93-8d8a9f4479b4.dat\u0027)\n\nadata.rename_categories(\n    key=\u0027cell_type\u0027,\n    categories=[\u0027Er\u0027, \u0027Ml\u0027, \u0027Mt\u0027, \u0027Ne\u0027, \u0027pr\u0027])\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/3/6/3/dataset_363d72f2-d15f-4d08-8c93-8d8a9f4479b4.dat\u0027)\n\nadata.rename_categories(\n    key=\u0027cell_type\u0027,\n    categories=[\u0027Er\u0027, \u0027Ml\u0027, \u0027Mt\u0027, \u0027Ne\u0027, \u0027pr\u0027])\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:18:19.884256",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.rename_categories.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 3, "time_seconds": 37.52906632423401, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/3/6/3/dataset_363d72f2-d15f-4d08-8c93-8d8a9f4479b4.dat')adata.rename_categories(    key='cell_type',    categories=['Er', 'Ml', 'Mt', 'Ne', 'pr'])adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #5)" name="4" time="37.06243133544922">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "31c35df41c590cdd",   "src": "hda"  },  "manipulate|function": "strings_to_categoricals" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/141/configs/tmpgwwy8kpx\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/141/configs/tmpgwwy8kpx\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:11:51.656799",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jgpqj",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "663161f031f1f7e9",  "inputs": {   "input": {    "id": "31c35df41c590cdd",    "src": "hda",    "uuid": "ab910deb-97fb-4f4f-b632-5475ff9e355f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350714.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:11:54"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350713.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:11:53"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "3473874eefccf927",    "src": "hda",    "uuid": "2c25fe82-13ea-4557-a01e-408c780cd85e"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 4, \"function\": \"strings_to_categoricals\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/b/9/dataset_ab910deb-97fb-4f4f-b632-5475ff9e355f.dat\u0027)\n\nadata.strings_to_categoricals()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/b/9/dataset_ab910deb-97fb-4f4f-b632-5475ff9e355f.dat\u0027)\n\nadata.strings_to_categoricals()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:12:06.690409",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.strings_to_categoricals.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 4, "time_seconds": 37.06243133544922, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/a/b/9/dataset_ab910deb-97fb-4f4f-b632-5475ff9e355f.dat')adata.strings_to_categoricals()adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #5)" name="4" time="27.308801412582397">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "f8a0fe5e32dc8601",   "src": "hda"  },  "manipulate|function": "strings_to_categoricals" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/165/configs/tmpqcoymelo\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/165/configs/tmpqcoymelo\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:18:40.963183",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-87hvf",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "870f1cdec1e6cd96",  "inputs": {   "input": {    "id": "f8a0fe5e32dc8601",    "src": "hda",    "uuid": "3317c564-d321-46de-a1c0-cf57b0a08d68"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "f8e04662d345a79a",    "src": "hda",    "uuid": "c3df90f4-dd21-4ad3-bc2c-aedc2cc72394"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 4, \"function\": \"strings_to_categoricals\"}"  },  "state": "error",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/3/3/1/dataset_3317c564-d321-46de-a1c0-cf57b0a08d68.dat\u0027)\n\nadata.strings_to_categoricals()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/3/3/1/dataset_3317c564-d321-46de-a1c0-cf57b0a08d68.dat\u0027)\n\nadata.strings_to_categoricals()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:18:47.192678",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1, exit_code: None, stderr: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n." ], "status": "failure", "test_index": 4, "time_seconds": 27.308801412582397, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/3/3/1/dataset_3317c564-d321-46de-a1c0-cf57b0a08d68.dat')adata.strings_to_categoricals()adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #6)" name="5" time="37.89455986022949">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "8087af02d4127119",   "src": "hda"  },  "manipulate|function": "transpose" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/143/configs/tmp3877hcw8\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/143/configs/tmp3877hcw8\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:12:29.372028",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-2slrm",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "4107ee730955d819",  "inputs": {   "input": {    "id": "8087af02d4127119",    "src": "hda",    "uuid": "aefd5ad6-f16a-4720-9955-6bed845124aa"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350752.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:12:32"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350751.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:12:31"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "ff391b7b0609b74b",    "src": "hda",    "uuid": "a6e622f8-598f-4cef-8ad0-81582da83519"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 5, \"function\": \"transpose\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/e/f/dataset_aefd5ad6-f16a-4720-9955-6bed845124aa.dat\u0027)\n\nadata = adata.transpose()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/e/f/dataset_aefd5ad6-f16a-4720-9955-6bed845124aa.dat\u0027)\n\nadata = adata.transpose()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:12:44.723199",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.transpose.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 5, "time_seconds": 37.89455986022949, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/a/e/f/dataset_aefd5ad6-f16a-4720-9955-6bed845124aa.dat')adata = adata.transpose()adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.Variable names are not unique. To make them unique, call `.var_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #6)" name="5" time="36.7802939414978">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "d4a86cd8676d7efe",   "src": "hda"  },  "manipulate|function": "transpose" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/167/configs/tmp5xy25hsi\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/167/configs/tmp5xy25hsi\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:19:08.269166",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-z2fvs",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "f627c51f201d658d",  "inputs": {   "input": {    "id": "d4a86cd8676d7efe",    "src": "hda",    "uuid": "2ccbb301-9d03-4ebb-8942-184f7ac75e9f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351151.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:19:11"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351150.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:19:10"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "972f8295a514d1cf",    "src": "hda",    "uuid": "0ec11c75-d767-47fe-b47c-9964b3923d71"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 5, \"function\": \"transpose\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/2/c/c/dataset_2ccbb301-9d03-4ebb-8942-184f7ac75e9f.dat\u0027)\n\nadata = adata.transpose()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/2/c/c/dataset_2ccbb301-9d03-4ebb-8942-184f7ac75e9f.dat\u0027)\n\nadata = adata.transpose()\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:19:24.093034",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.transpose.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 5, "time_seconds": 36.7802939414978, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/2/c/c/dataset_2ccbb301-9d03-4ebb-8942-184f7ac75e9f.dat')adata = adata.transpose()adata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.Variable names are not unique. To make them unique, call `.var_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #7)" name="6" time="36.51167178153992">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "852815f0fbc65062",   "src": "hda"  },  "manipulate|function": "add_annotation",  "manipulate|new_annot": {   "id": "11237baccaa817a8",   "src": "hda"  },  "manipulate|var_obs": "var" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/146/configs/tmp1uspszvg\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/146/configs/tmp1uspszvg\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:13:06.915626",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-vjcwb",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "7f3c210cef6eccd4",  "inputs": {   "input": {    "id": "852815f0fbc65062",    "src": "hda",    "uuid": "066c7944-cde3-4077-9935-371751ae817d"   },   "manipulate|new_annot": {    "id": "11237baccaa817a8",    "src": "hda",    "uuid": "d8a919e5-5204-48d1-8048-e04043c03059"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350789.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:13:09"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350788.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:13:08"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "c12f82a2bbd32fd1",    "src": "hda",    "uuid": "938b2cef-72c5-4526-a5be-b2995300dea1"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 162, \"src\": \"hda\"}]}, \"var_obs\": \"var\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/0/6/6/dataset_066c7944-cde3-4077-9935-371751ae817d.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/d/8/a/dataset_d8a919e5-5204-48d1-8048-e04043c03059.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nvar_index = adata.var_names\nvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)\nvar.index = var_index\nadata.var = var\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/0/6/6/dataset_066c7944-cde3-4077-9935-371751ae817d.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/d/8/a/dataset_d8a919e5-5204-48d1-8048-e04043c03059.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nvar_index = adata.var_names\nvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)\nvar.index = var_index\nadata.var = var\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:13:21.365127",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.add_annotation_var.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 6, "time_seconds": 36.51167178153992, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/0/6/6/dataset_066c7944-cde3-4077-9935-371751ae817d.dat')import pandas as pdextra_annot_t = pd.read_csv('/galaxy/server/database/objects/d/8/a/dataset_d8a919e5-5204-48d1-8048-e04043c03059.dat', sep='\t').reset_index(drop=True)var_index = adata.var_namesvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)var.index = var_indexadata.var = varadata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #7)" name="6" time="37.100517988204956">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "08dcbee519641e20",   "src": "hda"  },  "manipulate|function": "add_annotation",  "manipulate|new_annot": {   "id": "6b4ba0e0c68a3203",   "src": "hda"  },  "manipulate|var_obs": "var" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/170/configs/tmpkn3ah7sz\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/170/configs/tmpkn3ah7sz\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:19:46.142680",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-vnvkf",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "7e35d0be684243df",  "inputs": {   "input": {    "id": "08dcbee519641e20",    "src": "hda",    "uuid": "cd3093a8-fb94-492a-873e-c9d8aa5d0ad8"   },   "manipulate|new_annot": {    "id": "6b4ba0e0c68a3203",    "src": "hda",    "uuid": "ce1ed1a0-a95d-4a10-96ec-deb281824f1a"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351188.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:19:48"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351187.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:19:47"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "5f437bd1b75fc548",    "src": "hda",    "uuid": "027ae55f-8c6b-4937-89d0-f527a49a159a"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"var_obs\": \"var\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/c/d/3/dataset_cd3093a8-fb94-492a-873e-c9d8aa5d0ad8.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/c/e/1/dataset_ce1ed1a0-a95d-4a10-96ec-deb281824f1a.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nvar_index = adata.var_names\nvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)\nvar.index = var_index\nadata.var = var\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/c/d/3/dataset_cd3093a8-fb94-492a-873e-c9d8aa5d0ad8.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/c/e/1/dataset_ce1ed1a0-a95d-4a10-96ec-deb281824f1a.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nvar_index = adata.var_names\nvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)\nvar.index = var_index\nadata.var = var\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:20:01.151788",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.add_annotation_var.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 6, "time_seconds": 37.100517988204956, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/c/d/3/dataset_cd3093a8-fb94-492a-873e-c9d8aa5d0ad8.dat')import pandas as pdextra_annot_t = pd.read_csv('/galaxy/server/database/objects/c/e/1/dataset_ce1ed1a0-a95d-4a10-96ec-deb281824f1a.dat', sep='\t').reset_index(drop=True)var_index = adata.var_namesvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)var.index = var_indexadata.var = varadata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #8)" name="7" time="37.2988760471344">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "4abb7a8ea063fcba",   "src": "hda"  },  "manipulate|function": "add_annotation",  "manipulate|new_annot": {   "id": "870f1cdec1e6cd96",   "src": "hda"  },  "manipulate|var_obs": "obs" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/149/configs/tmpbg0z93xg\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/149/configs/tmpbg0z93xg\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:13:43.204227",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-d9r8r",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "519a4072ec5afddc",  "inputs": {   "input": {    "id": "4abb7a8ea063fcba",    "src": "hda",    "uuid": "03483dc6-552a-4f94-bc57-f8a59c506511"   },   "manipulate|new_annot": {    "id": "870f1cdec1e6cd96",    "src": "hda",    "uuid": "7b2f8a9c-ce36-4e57-99af-99c4badfc062"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350826.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:13:46"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350825.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:13:45"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "0e7386ffa5e84868",    "src": "hda",    "uuid": "19c78e30-a1e2-40e3-8ada-535148df4236"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 165, \"src\": \"hda\"}]}, \"var_obs\": \"obs\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing \u0027annot2\u0027 as categorical\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/0/3/4/dataset_03483dc6-552a-4f94-bc57-f8a59c506511.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/7/b/2/dataset_7b2f8a9c-ce36-4e57-99af-99c4badfc062.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing \u0027annot2\u0027 as categorical\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/0/3/4/dataset_03483dc6-552a-4f94-bc57-f8a59c506511.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/7/b/2/dataset_7b2f8a9c-ce36-4e57-99af-99c4badfc062.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:13:58.594228",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.add_annotation_obs.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 7, "time_seconds": 37.2988760471344, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/0/3/4/dataset_03483dc6-552a-4f94-bc57-f8a59c506511.dat')import pandas as pdextra_annot_t = pd.read_csv('/galaxy/server/database/objects/7/b/2/dataset_7b2f8a9c-ce36-4e57-99af-99c4badfc062.dat', sep='\t').reset_index(drop=True)obs_index = adata.obs.indexobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)obs.index = obs_indexadata.obs = obsadata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.... storing 'annot2' as categorical
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #8)" name="7" time="38.65700697898865">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "5f324f4463129e07",   "src": "hda"  },  "manipulate|function": "add_annotation",  "manipulate|new_annot": {   "id": "99a2b1e6ecfc915b",   "src": "hda"  },  "manipulate|var_obs": "obs" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/173/configs/tmp40quyfku\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/173/configs/tmp40quyfku\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:20:24.125635",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-f7x25",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "e85b1b8a5d3b406f",  "inputs": {   "input": {    "id": "5f324f4463129e07",    "src": "hda",    "uuid": "72bc70c0-aaec-4785-8106-f13c6639cade"   },   "manipulate|new_annot": {    "id": "99a2b1e6ecfc915b",    "src": "hda",    "uuid": "8b197461-fdea-46f2-bbd7-9715adb592ea"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351227.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:20:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351225.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:20:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "427d5786967c3cc6",    "src": "hda",    "uuid": "98bd3172-3935-4128-87f9-35c6ea0264fc"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 189, \"src\": \"hda\"}]}, \"var_obs\": \"obs\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing \u0027annot2\u0027 as categorical\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/7/2/b/dataset_72bc70c0-aaec-4785-8106-f13c6639cade.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/8/b/1/dataset_8b197461-fdea-46f2-bbd7-9715adb592ea.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing \u0027annot2\u0027 as categorical\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/7/2/b/dataset_72bc70c0-aaec-4785-8106-f13c6639cade.dat\u0027)\n\nimport pandas as pd\nextra_annot_t = pd.read_csv(\u0027/galaxy/server/database/objects/8/b/1/dataset_8b197461-fdea-46f2-bbd7-9715adb592ea.dat\u0027, sep=\u0027\\t\u0027).reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n",  "update_time": "2025-01-31T19:20:39.952487",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.add_annotation_obs.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 7, "time_seconds": 38.65700697898865, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/7/2/b/dataset_72bc70c0-aaec-4785-8106-f13c6639cade.dat')import pandas as pdextra_annot_t = pd.read_csv('/galaxy/server/database/objects/8/b/1/dataset_8b197461-fdea-46f2-bbd7-9715adb592ea.dat', sep='\t').reset_index(drop=True)obs_index = adata.obs.indexobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)obs.index = obs_indexadata.obs = obsadata.write('anndata.h5ad')
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.... storing 'annot2' as categorical
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #9)" name="8" time="38.44707989692688">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "f627c51f201d658d",   "src": "hda"  },  "manipulate|filter|filter": "index",  "manipulate|filter|index|format": "text",  "manipulate|filter|index|text": "Gata2,EKLF",  "manipulate|function": "filter",  "manipulate|var_obs": "var" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/151/configs/tmptdf2g6c6\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/151/configs/tmptdf2g6c6\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:14:21.420294",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-vlb9c",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "665bb146d9a2e455",  "inputs": {   "input": {    "id": "f627c51f201d658d",    "src": "hda",    "uuid": "f469dc5d-a837-4f61-9e9e-ea5efe536d06"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350864.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:14:24"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350863.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:14:23"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "66c457817a914a80",    "src": "hda",    "uuid": "08c81bad-86d8-42ef-ac38-b9f16c82734d"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 1, \"filter\": \"index\", \"index\": {\"__current_case__\": 0, \"format\": \"text\", \"text\": \"Gata2,EKLF\"}}, \"function\": \"filter\", \"var_obs\": \"var\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/f/4/6/dataset_f469dc5d-a837-4f61-9e9e-ea5efe536d06.dat\u0027)\n\nfiltered = [\u0027Gata2\u0027, \u0027EKLF\u0027]\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n[\u0027Gata2\u0027, \u0027EKLF\u0027]\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/f/4/6/dataset_f469dc5d-a837-4f61-9e9e-ea5efe536d06.dat\u0027)\n\nfiltered = [\u0027Gata2\u0027, \u0027EKLF\u0027]\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n[\u0027Gata2\u0027, \u0027EKLF\u0027]\n",  "update_time": "2025-01-31T19:14:37.271978",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.filter_var_index.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 8, "time_seconds": 38.44707989692688, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/f/4/6/dataset_f469dc5d-a837-4f61-9e9e-ea5efe536d06.dat')filtered = ['Gata2', 'EKLF']print(filtered)adata = adata[:,filtered]adata.write('anndata.h5ad')['Gata2', 'EKLF']
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #9)" name="8" time="36.67799115180969">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "5d9aa8fc4b66e5a9",   "src": "hda"  },  "manipulate|filter|filter": "index",  "manipulate|filter|index|format": "text",  "manipulate|filter|index|text": "Gata2,EKLF",  "manipulate|function": "filter",  "manipulate|var_obs": "var" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/175/configs/tmp_pckh8yx\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/175/configs/tmp_pckh8yx\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:21:01.118424",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-mxhlc",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "6e60a4e4729b201a",  "inputs": {   "input": {    "id": "5d9aa8fc4b66e5a9",    "src": "hda",    "uuid": "21dfbc22-80ee-4dde-9728-a7fe9260dd88"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738351264.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:21:04"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738351262.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:21:02"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "b3044c08f074315d",    "src": "hda",    "uuid": "5fc7ffa0-8cc4-4656-9196-315ae3ab5710"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 1, \"filter\": \"index\", \"index\": {\"__current_case__\": 0, \"format\": \"text\", \"text\": \"Gata2,EKLF\"}}, \"function\": \"filter\", \"var_obs\": \"var\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/2/1/d/dataset_21dfbc22-80ee-4dde-9728-a7fe9260dd88.dat\u0027)\n\nfiltered = [\u0027Gata2\u0027, \u0027EKLF\u0027]\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n[\u0027Gata2\u0027, \u0027EKLF\u0027]\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/2/1/d/dataset_21dfbc22-80ee-4dde-9728-a7fe9260dd88.dat\u0027)\n\nfiltered = [\u0027Gata2\u0027, \u0027EKLF\u0027]\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write(\u0027anndata.h5ad\u0027)\n[\u0027Gata2\u0027, \u0027EKLF\u0027]\n",  "update_time": "2025-01-31T19:21:16.849022",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.filter_var_index.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 8, "time_seconds": 36.67799115180969, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/2/1/d/dataset_21dfbc22-80ee-4dde-9728-a7fe9260dd88.dat')filtered = ['Gata2', 'EKLF']print(filtered)adata = adata[:,filtered]adata.write('anndata.h5ad')['Gata2', 'EKLF']
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #10)" name="9" time="36.3911292552948">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "aa80ac7efc6b412e",   "src": "hda"  },  "manipulate|filter|filter": "key",  "manipulate|filter|filter_key|filter": "equal",  "manipulate|filter|filter_key|type": "text",  "manipulate|filter|filter_key|value": "progenitor",  "manipulate|filter|key": "cell_type",  "manipulate|function": "filter",  "manipulate|var_obs": "obs" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/153/configs/tmprxey5tlt\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/153/configs/tmprxey5tlt\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:14:57.887739",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-ch7cw",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "837282f56e7cc14c",  "inputs": {   "input": {    "id": "aa80ac7efc6b412e",    "src": "hda",    "uuid": "a01f51d2-430c-42ef-8585-1e20b0a35322"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350901.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:15:01"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350899.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:14:59"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "anndata": {    "id": "7e35d0be684243df",    "src": "hda",    "uuid": "b260d6b6-61a7-48de-a3c3-d7c887ebcd43"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 0, \"filter\": \"key\", \"filter_key\": {\"__current_case__\": 1, \"filter\": \"equal\", \"type\": \"text\", \"value\": \"progenitor\"}, \"key\": \"cell_type\"}, \"function\": \"filter\", \"var_obs\": \"obs\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/0/1/dataset_a01f51d2-430c-42ef-8585-1e20b0a35322.dat\u0027)\n\nfiltered = adata.obs[\u0027cell_type\u0027]\n\nfiltered = filtered == \u0027progenitor\u0027\n\nprint(filtered)\n\nadata = adata[filtered, :]\n\n\nadata.write(\u0027anndata.h5ad\u0027)\nindex\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n155    False\n156    False\n157    False\n158    False\n159    False\nName: cell_type, Length: 640, dtype: bool\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read(\u0027/galaxy/server/database/objects/a/0/1/dataset_a01f51d2-430c-42ef-8585-1e20b0a35322.dat\u0027)\n\nfiltered = adata.obs[\u0027cell_type\u0027]\n\nfiltered = filtered == \u0027progenitor\u0027\n\nprint(filtered)\n\nadata = adata[filtered, :]\n\n\nadata.write(\u0027anndata.h5ad\u0027)\nindex\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n155    False\n156    False\n157    False\n158    False\n159    False\nName: cell_type, Length: 640, dtype: bool\n",  "update_time": "2025-01-31T19:15:13.710442",  "user_email": "tests@fake.org" }, "output_problems": [  "Output anndata: Test output file (manipulate.filter_obs_key.h5ad) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 9, "time_seconds": 36.3911292552948, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/a/0/1/dataset_a01f51d2-430c-42ef-8585-1e20b0a35322.dat')filtered = adata.obs['cell_type']filtered = filtered == 'progenitor'print(filtered)adata = adata[filtered, :]adata.write('anndata.h5ad')index0       True1       True2       True3       True4       True       ...  155    False156    False157    False158    False159    FalseName: cell_type, Length: 640, dtype: bool
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_manipulate (Test #10)" name="9" time="12.421762228012085">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 9, "time_seconds": 12.421762228012085, "tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #1)" name="0" time="40.550684452056885">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:21/0/13/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #2)" name="1" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 1, "tool_id": "bcftools_norm", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #3)" name="2" time="37.92369723320007">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:19/7/0/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #4)" name="3" time="26.978834867477417">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input_file": {   "id": "37036ec20657cfd0",   "src": "hda"  },  "multiallelics|mode": "-",  "normalize_indels": true,  "output_type": "v",  "reference_source|fasta_ref": {   "id": "812c93f48aa2ec70",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed \u0027s,bin/bcftools,libexec/bcftools,\u0027`;     bgzip -c \u0027/galaxy/server/database/objects/5/8/2/dataset_5823ca1d-344b-4f3f-8195-f8440f6e87ce.dat\u0027 \u003e input.vcf.gz \u0026\u0026 bcftools index input.vcf.gz \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/4/4/7/dataset_447b77d5-c69c-435c-8c85-e4ca6f46c8b1.dat\u0027 ref.fa \u0026\u0026 samtools faidx ref.fa \u0026\u0026    awk \u0027{ if ($0 !~ /\u003e/) {print toupper($0)} else {print $0} }\u0027 \u0027ref.fa\u0027 \u003e ref_upper.fa \u0026\u0026           bcftools norm   --fasta-ref ref_upper.fa  --check-ref w   --multiallelics \u0027-both\u0027  --site-win 1000             --output-type \u0027v\u0027   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  \u003e \u0027/galaxy/server/database/objects/3/c/a/dataset_3cade819-5233-431c-b92b-8eafaeb8e7b0.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:27:41.249909",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-xrvtx",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "dfec9ebcd717bfc7",  "inputs": {   "input_file": {    "id": "37036ec20657cfd0",    "src": "hda",    "uuid": "5823ca1d-344b-4f3f-8195-f8440f6e87ce"   },   "reference_source|fasta_ref": {    "id": "812c93f48aa2ec70",    "src": "hda",    "uuid": "447b77d5-c69c-435c-8c85-e4ca6f46c8b1"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_file": {    "id": "7f52c948224fdf95",    "src": "hda",    "uuid": "3cade819-5233-431c-b92b-8eafaeb8e7b0"   }  },  "params": {   "__input_ext": "\"input\"",   "atomize": "false",   "check_ref": "\"w\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "multiallelics": "{\"__current_case__\": 1, \"mode\": \"-\", \"multiallelic_types\": \"both\"}",   "normalize_indels": "true",   "old_rec_tag": "\"\"",   "output_type": "\"v\"",   "reference_source": "{\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}",   "rm_dup": "\"\"",   "sec_default": "{\"site_win\": \"1000\"}",   "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"regions_overlap\": null, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}, \"targets_overlap\": null}"  },  "state": "error",  "stderr": "Lines   total/split/realigned/skipped:\t19/7/19/0\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.15.1+galaxy4",  "tool_stderr": "Lines   total/split/realigned/skipped:\t19/7/19/0\n",  "tool_stdout": "",  "update_time": "2025-01-31T19:27:46.081252",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.15.1+galaxy4, exit_code: None, stderr: Lines   total/split/realigned/skipped:\t19/7/19/0\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.15.1+galaxy4, exit_code: None, stderr: Lines   total/split/realigned/skipped:\t19/7/19/0\n." ], "status": "failure", "test_index": 3, "time_seconds": 26.978834867477417, "tool_id": "bcftools_norm", "tool_version": "1.15.1+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:19/7/19/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #5)" name="4" time="37.238593339920044">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:26/0/0/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #6)" name="5" time="34.351375579833984">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:26/0/0/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #7)" name="6" time="37.60794496536255">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:8/0/0/0REF/ALT total/modified/added:  8/5/3
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #8)" name="7" time="35.60530662536621">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Lines   total/split/realigned/skipped:39/20/3/0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_norm (Test #9)" name="8" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 8, "tool_id": "bcftools_norm", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_fill_tags (Test #1)" name="0" time="41.92704653739929">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_fill_tags (Test #2)" name="1" time="34.16773533821106">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #1)" name="0" time="11.85374140739441">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 11.85374140739441, "tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #2)" name="1" time="23.393621683120728">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 23.393621683120728, "tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #3)" name="2" time="20.853281021118164">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 20.853281021118164, "tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #4)" name="3" time="13.688916444778442">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 13.688916444778442, "tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #5)" name="4" time="50.39568543434143">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 32  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/1/8/dataset_3187cc96-aaf6-4cbc-9721-16d027f668c8.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 517Using parameters --bmax 388 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 86 sample suffixesGenerating random suffixesQSorting 86 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 86 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 12, merged 41; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 6; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 5, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 284.672 (target: 387)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 58  Reserving size (388) for bucket 1Getting block 2 of 58Getting block 3 of 58Getting block 4 of 58  Calculating Z arrays for bucket 1  Reserving size (388) for bucket 2  Reserving size (388) for bucket 3  Reserving size (388) for bucket 4Getting block 5 of 58Getting block 6 of 58Getting block 7 of 58  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Reserving size (388) for bucket 5  Reserving size (388) for bucket 6  Reserving size (388) for bucket 7  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 10%  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 2: 10%  bucket 1: 20%  bucket 5: 10%  bucket 3: 10%  bucket 4: 10%  bucket 1: 30%  bucket 2: 20%  bucket 6: 10%  bucket 7: 10%  bucket 5: 20%  bucket 2: 30%  bucket 1: 40%  bucket 4: 20%  bucket 3: 20%  bucket 7: 20%  bucket 6: 20%  bucket 2: 40%  bucket 5: 30%  bucket 1: 50%  bucket 2: 50%  bucket 4: 30%  bucket 7: 30%  bucket 3: 30%  bucket 6: 30%  bucket 2: 60%  bucket 1: 60%  bucket 5: 40%  bucket 7: 40%  bucket 2: 70%  bucket 4: 40%  bucket 3: 40%  bucket 6: 40%  bucket 1: 70%  bucket 2: 80%  bucket 7: 50%  bucket 5: 50%  bucket 4: 50%  bucket 1: 80%  bucket 3: 50%  bucket 2: 90%  bucket 6: 50%  bucket 7: 60%  bucket 2: 100%  bucket 5: 60%  bucket 1: 90%  bucket 4: 60%  Sorting block of length 165 for bucket 2  (Using difference cover)  bucket 3: 60%  bucket 6: 60%  bucket 1: 100%  Sorting block of length 355 for bucket 1  (Using difference cover)  bucket 7: 70%  bucket 4: 70%  bucket 5: 70%  bucket 3: 70%  bucket 6: 70%  bucket 7: 80%  bucket 4: 80%  bucket 3: 80%  bucket 7: 90%  bucket 6: 80%  bucket 5: 80%  bucket 4: 90%  bucket 7: 100%  bucket 3: 90%  Sorting block of length 368 for bucket 7  bucket 6: 90%  (Using difference cover)  bucket 5: 90%  bucket 4: 100%  Sorting block of length 328 for bucket 4  bucket 6: 100%  bucket 3: 100%  Sorting block of length 339 for bucket 6  (Using difference cover)  Sorting block of length 370 for bucket 3  (Using difference cover)  (Using difference cover)  bucket 5: 100%  Sorting block of length 203 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 166 for bucket 2  Sorting block time: 00:00:00Returning block of 204 for bucket 5  Sorting block time: 00:00:00Returning block of 356 for bucket 1  Sorting block time: 00:00:00Returning block of 369 for bucket 7  Sorting block time: 00:00:00Returning block of 340 for bucket 6  Sorting block time: 00:00:00Returning block of 371 for bucket 3  Sorting block time: 00:00:00Returning block of 329 for bucket 4Getting block 8 of 58  Reserving size (388) for bucket 8  Calculating Z arrays for bucket 8Getting block 9 of 58  Entering block accumulator loop for bucket 8:  Reserving size (388) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 8: 10%  bucket 8: 20%  bucket 9: 10%  bucket 9: 20%  bucket 8: 30%  bucket 9: 30%  bucket 8: 40%  bucket 9: 40%  bucket 8: 50%  bucket 8: 60%  bucket 9: 50%  bucket 8: 70%  bucket 9: 60%  bucket 8: 80%  bucket 9: 70%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 171 for bucket 8  (Using difference cover)  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 172 for bucket 8  Sorting block time: 00:00:00Returning block of 340 for bucket 9Getting block 10 of 58  Reserving size (388) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 58  Entering block accumulator loop for bucket 10:  Reserving size (388) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 10: 10%  bucket 11: 10%  bucket 10: 20%  bucket 11: 20%  bucket 10: 30%  bucket 11: 30%  bucket 10: 40%  bucket 11: 40%  bucket 10: 50%  bucket 11: 50%  bucket 10: 60%  bucket 11: 60%  bucket 11: 70%  bucket 10: 70%  bucket 11: 80%  bucket 10: 80%  bucket 11: 90%  bucket 10: 90%  bucket 10: 100%  bucket 11: 100%  Sorting block of length 357 for bucket 10  (Using difference cover)  Sorting block of length 305 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 358 for bucket 10  Sorting block time: 00:00:00Returning block of 306 for bucket 11Getting block 12 of 58  Reserving size (388) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%Getting block 13 of 58  bucket 12: 20%  Reserving size (388) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 12: 30%  bucket 12: 40%  bucket 13: 10%  bucket 12: 50%  bucket 13: 20%  bucket 13: 30%  bucket 12: 60%  bucket 13: 40%  bucket 13: 50%  bucket 12: 70%  bucket 13: 60%  bucket 12: 80%  bucket 12: 90%  bucket 13: 70%  bucket 12: 100%  Sorting block of length 185 for bucket 12  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 282 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 186 for bucket 12  Sorting block time: 00:00:00Returning block of 283 for bucket 13Getting block 14 of 58  Reserving size (388) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 339 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 340 for bucket 14Getting block 15 of 58  Reserving size (388) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%Getting block 16 of 58  Reserving size (388) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 15: 30%Getting block 17 of 58  Reserving size (388) for bucket 17  Calculating Z arrays for bucket 17  bucket 15: 40%  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 15: 50%  bucket 16: 20%  bucket 17: 10%  bucket 15: 60%  bucket 16: 30%  bucket 15: 70%  bucket 17: 20%  bucket 15: 80%  bucket 16: 40%  bucket 15: 90%  bucket 17: 30%  bucket 16: 50%  bucket 15: 100%  bucket 17: 40%  bucket 16: 60%  Sorting block of length 241 for bucket 15  (Using difference cover)  bucket 17: 50%  bucket 16: 70%  bucket 16: 80%  bucket 17: 60%  Sorting block time: 00:00:00Returning block of 242 for bucket 15  bucket 16: 90%  bucket 17: 70%  bucket 16: 100%  Sorting block of length 379 for bucket 16  (Using difference cover)  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 215 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 380 for bucket 16  Sorting block time: 00:00:00Returning block of 216 for bucket 17Getting block 18 of 58  Reserving size (388) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 378 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 379 for bucket 18Getting block 19 of 58  Reserving size (388) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 58  bucket 19: 20%  Reserving size (388) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 20: 10%  bucket 19: 40%  bucket 19: 50%  bucket 20: 20%  bucket 19: 60%  bucket 20: 30%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 20: 70%  bucket 19: 100%  Sorting block of length 334 for bucket 19  (Using difference cover)  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block time: 00:00:00  Sorting block of length 313 for bucket 20  (Using difference cover)Returning block of 335 for bucket 19  Sorting block time: 00:00:00Returning block of 314 for bucket 20Getting block 21 of 58  Reserving size (388) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 210 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 211 for bucket 21Getting block 22 of 58  Reserving size (388) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%Getting block 23 of 58  Reserving size (388) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 23: 10%  bucket 22: 40%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 23: 30%  bucket 22: 70%  bucket 22: 80%  bucket 23: 40%  bucket 22: 90%  bucket 23: 50%  bucket 22: 100%  bucket 23: 60%  Sorting block of length 386 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  Sorting block time: 00:00:00  bucket 23: 100%Returning block of 387 for bucket 22  Sorting block of length 238 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 239 for bucket 23Getting block 24 of 58  Reserving size (388) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%Getting block 25 of 58  bucket 24: 30%  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 24: 40%  bucket 24: 50%  bucket 25: 10%  bucket 24: 60%  bucket 25: 20%  bucket 24: 70%  bucket 24: 80%  bucket 25: 30%  bucket 24: 90%  bucket 25: 40%  bucket 24: 100%  Sorting block of length 351 for bucket 24  (Using difference cover)  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  Sorting block time: 00:00:00Returning block of 352 for bucket 24  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 105 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 106 for bucket 25Getting block 26 of 58  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 354 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 355 for bucket 26Getting block 27 of 58  Reserving size (388) for bucket 27Getting block 28 of 58  Calculating Z arrays for bucket 27  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 27: 90%  bucket 28: 70%  bucket 28: 80%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 253 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27  Sorting block time: 00:00:00Returning block of 254 for bucket 28Getting block 29 of 58  Reserving size (388) for bucket 29Getting block 30 of 58  Calculating Z arrays for bucket 29  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 29: 60%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 30: 80%  bucket 29: 100%  Sorting block of length 289 for bucket 29  (Using difference cover)  bucket 30: 90%  bucket 30: 100%  Sorting block of length 345 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 290 for bucket 29  Sorting block time: 00:00:00Returning block of 346 for bucket 30Getting block 31 of 58  Reserving size (388) for bucket 31Getting block 32 of 58  Calculating Z arrays for bucket 31  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 32: 20%  bucket 32: 30%  bucket 31: 30%  bucket 32: 40%  bucket 31: 40%  bucket 32: 50%  bucket 31: 50%  bucket 31: 60%  bucket 32: 60%  bucket 31: 70%  bucket 32: 70%  bucket 31: 80%  bucket 32: 80%  buc..0:00Returning block of 350 for bucket 23Getting block 24 of 57  Reserving size (388) for bucket 24Getting block 25 of 57  Calculating Z arrays for bucket 24  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 24: 10%  bucket 25: 20%  bucket 24: 20%  bucket 25: 30%  bucket 24: 30%  bucket 25: 40%  bucket 25: 50%  bucket 24: 40%  bucket 25: 60%  bucket 24: 50%  bucket 25: 70%  bucket 25: 80%  bucket 24: 60%  bucket 25: 90%  bucket 24: 70%  bucket 25: 100%  Sorting block of length 286 for bucket 25  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 245 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 287 for bucket 25  Sorting block time: 00:00:00Returning block of 246 for bucket 24Getting block 26 of 57  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%Getting block 27 of 57  bucket 26: 80%  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 26: 90%  bucket 26: 100%  Sorting block of length 384 for bucket 26  (Using difference cover)  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  Sorting block time: 00:00:00Returning block of 385 for bucket 26  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 359 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 360 for bucket 27Getting block 28 of 57  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 387 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 28Getting block 29 of 57  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%Getting block 30 of 57  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 30%  Entering block accumulator loop for bucket 30:  bucket 29: 40%  bucket 30: 10%  bucket 29: 50%  bucket 29: 60%  bucket 30: 20%  bucket 29: 70%  bucket 30: 30%  bucket 29: 80%  bucket 30: 40%  bucket 29: 90%  bucket 30: 50%  bucket 29: 100%  Sorting block of length 195 for bucket 29  (Using difference cover)  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  Sorting block time: 00:00:00Returning block of 196 for bucket 29  bucket 30: 90%  bucket 30: 100%  Sorting block of length 257 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 258 for bucket 30Getting block 31 of 57  Reserving size (388) for bucket 31Getting block 32 of 57  Calculating Z arrays for bucket 31  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 32: 20%  bucket 31: 30%  bucket 32: 30%  bucket 31: 40%  bucket 32: 40%  bucket 31: 50%  bucket 32: 50%  bucket 32: 60%  bucket 31: 60%  bucket 32: 70%  bucket 31: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 219 for bucket 32  (Using difference cover)  bucket 31: 80%  bucket 31: 90%  Sorting block time: 00:00:00Returning block of 220 for bucket 32  bucket 31: 100%  Sorting block of length 310 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 311 for bucket 31Getting block 33 of 57  Reserving size (388) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%Getting block 34 of 57  Reserving size (388) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 20%  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 34: 30%  bucket 33: 40%  bucket 34: 40%  bucket 34: 50%  bucket 33: 50%  bucket 34: 60%  bucket 34: 70%  bucket 33: 60%  bucket 34: 80%  bucket 34: 90%  bucket 33: 70%  bucket 34: 100%  Sorting block of length 275 for bucket 34  (Using difference cover)  bucket 33: 80%  bucket 33: 90%  Sorting block time: 00:00:00Returning block of 276 for bucket 34  bucket 33: 100%  Sorting block of length 387 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 33Getting block 35 of 57Getting block 36 of 57  Reserving size (388) for bucket 35  Reserving size (388) for bucket 36  Calculating Z arrays for bucket 35  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 35: 10%  bucket 36: 20%  bucket 35: 20%  bucket 36: 30%  bucket 35: 30%  bucket 35: 40%  bucket 36: 40%  bucket 35: 50%  bucket 36: 50%  bucket 35: 60%  bucket 36: 60%  bucket 35: 70%  bucket 36: 70%  bucket 35: 80%  bucket 36: 80%  bucket 35: 90%  bucket 36: 90%  bucket 35: 100%  bucket 36: 100%  Sorting block of length 350 for bucket 35  (Using difference cover)  Sorting block of length 150 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 151 for bucket 36  Sorting block time: 00:00:00Returning block of 351 for bucket 35Getting block 37 of 57  Reserving size (388) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 267 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 268 for bucket 37Getting block 38 of 57  Reserving size (388) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%Getting block 39 of 57  bucket 38: 40%  Reserving size (388) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 38: 50%  bucket 38: 60%  bucket 39: 10%  bucket 38: 70%  bucket 39: 20%  bucket 38: 80%  bucket 39: 30%  bucket 38: 90%  bucket 39: 40%  bucket 38: 100%  Sorting block of length 337 for bucket 38  (Using difference cover)  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  Sorting block time: 00:00:00Returning block of 338 for bucket 38  bucket 39: 100%  Sorting block of length 387 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 39Getting block 40 of 57  Reserving size (388) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 379 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 380 for bucket 40Getting block 41 of 57  Reserving size (388) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:Getting block 42 of 57  Reserving size (388) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 41: 20%  bucket 42: 20%  bucket 41: 30%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 42: 50%  bucket 41: 60%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 42: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 330 for bucket 41  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 188 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 331 for bucket 41  Sorting block time: 00:00:00Returning block of 189 for bucket 42Getting block 43 of 57  Reserving size (388) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%Getting block 44 of 57Getting block 45 of 57  Reserving size (388) for bucket 44  bucket 43: 20%  Reserving size (388) for bucket 45  Calculating Z arrays for bucket 44  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  Entering block accumulator loop for bucket 45:  bucket 43: 30%  bucket 44: 10%  bucket 45: 10%  bucket 43: 40%  bucket 44: 20%  bucket 45: 20%  bucket 43: 50%  bucket 44: 30%  bucket 45: 30%  bucket 43: 60%  bucket 44: 40%  bucket 45: 40%  bucket 44: 50%  bucket 45: 50%  bucket 43: 70%  bucket 44: 60%  bucket 45: 60%  bucket 43: 80%  bucket 44: 70%  bucket 45: 70%  bucket 43: 90%  bucket 44: 80%  bucket 44: 90%  bucket 45: 80%  bucket 43: 100%  Sorting block of length 321 for bucket 43  (Using difference cover)  bucket 44: 100%  Sorting block of length 366 for bucket 44  (Using difference cover)  bucket 45: 90%  bucket 45: 100%  Sorting block of length 365 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 322 for bucket 43  Sorting block time: 00:00:00Returning block of 367 for bucket 44  Sorting block time: 00:00:00Returning block of 366 for bucket 45Getting block 46 of 57  Reserving size (388) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 253 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 254 for bucket 46Getting block 47 of 57  Reserving size (388) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 57  Entering block accumulator loop for bucket 47:  Reserving size (388) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 47: 10%  bucket 47: 20%  bucket 48: 10%  bucket 47: 30%  bucket 47: 40%  bucket 48: 20%  bucket 47: 50%  bucket 48: 30%  bucket 47: 60%  bucket 47: 70%  bucket 48: 40%  bucket 47: 80%  bucket 47: 90%  bucket 48: 50%  bucket 47: 100%  Sorting block of length 217 for bucket 47  (Using difference cover)  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  Sorting block time: 00:00:00Returning block of 218 for bucket 47  bucket 48: 90%  bucket 48: 100%  Sorting block of length 384 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 48Getting block 49 of 57  Reserving size (388) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 112 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 49Getting block 50 of 57  Reserving size (388) for bucket 50Getting block 51 of 57  Calculating Z arrays for bucket 50  Reserving size (388) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 50: 10%  bucket 51: 20%  bucket 51: 30%  bucket 50: 20%  bucket 51: 40%  bucket 50: 30%  bucket 50: 40%  bucket 51: 50%  bucket 51: 60%  bucket 50: 50%  bucket 51: 70%  bucket 50: 60%  bucket 51: 80%  bucket 50: 70%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 350 for bucket 51  (Using difference cover)  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 275 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 351 for bucket 51  Sorting block time: 00:00:00Returning block of 276 for bucket 50Getting block 52 of 57  Reserving size (388) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 57  Entering block accumulator loop for bucket 52:  Reserving size (388) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 52: 10%  bucket 53: 10%  bucket 52: 20%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 53: 40%  bucket 52: 40%  bucket 53: 50%  bucket 52: 50%  bucket 53: 60%  bucket 52: 60%  bucket 53: 70%  bucket 52: 70%  bucket 53: 80%  bucket 52: 80%  bucket 53: 90%  bucket 52: 90%  bucket 53: 100%  bucket 52: 100%  Sorting block of length 370 for bucket 53  Sorting block of length 378 for bucket 52  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 371 for bucket 53  Sorting block time: 00:00:00Returning block of 379 for bucket 52Getting block 54 of 57  Reserving size (388) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:Getting block 55 of 57  Reserving size (388) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 54: 20%  bucket 55: 10%  bucket 55: 20%  bucket 54: 30%  bucket 55: 30%  bucket 54: 40%  bucket 55: 40%  bucket 54: 50%  bucket 55: 50%  bucket 54: 60%  bucket 55: 60%  bucket 54: 70%  bucket 55: 70%  bucket 54: 80%  bucket 55: 80%  bucket 54: 90%  bucket 55: 90%  bucket 54: 100%  bucket 55: 100%  Sorting block of length 237 for bucket 54  (Using difference cover)  Sorting block of length 344 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 238 for bucket 54  Sorting block time: 00:00:00Returning block of 345 for bucket 55Getting block 56 of 57  Reserving size (388) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 57  Reserving size (388) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 56:  bucket 57: 10%  bucket 56: 10%  bucket 57: 20%  bucket 57: 30%  bucket 56: 20%  bucket 57: 40%  bucket 56: 30%  bucket 57: 50%  bucket 57: 60%  bucket 56: 40%  bucket 57: 70%  bucket 57: 80%  bucket 56: 50%  bucket 57: 90%  bucket 57: 100%  bucket 56: 60%  Sorting block of length 132 for bucket 57  (Using difference cover)  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  Sorting block time: 00:00:00Returning block of 133 for bucket 57  bucket 56: 100%  Sorting block of length 270 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 271 for bucket 56Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmpWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmpRe-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL indexRenaming genome.3.bt2.tmp to genome.3.bt2Renaming genome.4.bt2.tmp to genome.4.bt2Renaming genome.1.bt2.tmp to genome.1.bt2Renaming genome.2.bt2.tmp to genome.2.bt2Renaming genome.rev.1.bt2.tmp to genome.rev.1.bt2Renaming genome.rev.2.bt2.tmp to genome.rev.2.bt23 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #6)" name="5" time="39.69212365150452">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 32  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/9/e/c/dataset_9ece2e5d-aac1-4d38-80b8-9aa368912770.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 517Using parameters --bmax 388 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 86 sample suffixesGenerating random suffixesQSorting 86 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 86 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 12, merged 41; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 6; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 5, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 284.672 (target: 387)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 58  Reserving size (388) for bucket 1Getting block 2 of 58Getting block 3 of 58Getting block 4 of 58Getting block 5 of 58Getting block 6 of 58Getting block 7 of 58  Calculating Z arrays for bucket 1  Reserving size (388) for bucket 2  Reserving size (388) for bucket 3  Reserving size (388) for bucket 4  Reserving size (388) for bucket 5  Reserving size (388) for bucket 6  Reserving size (388) for bucket 7  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 1: 10%  bucket 3: 10%  bucket 5: 10%  bucket 2: 10%  bucket 4: 10%  bucket 1: 20%  bucket 6: 10%  bucket 5: 20%  bucket 7: 10%  bucket 3: 20%  bucket 2: 20%  bucket 1: 30%  bucket 6: 20%  bucket 4: 20%  bucket 5: 30%  bucket 1: 40%  bucket 3: 30%  bucket 7: 20%  bucket 2: 30%  bucket 6: 30%  bucket 4: 30%  bucket 1: 50%  bucket 5: 40%  bucket 3: 40%  bucket 6: 40%  bucket 2: 40%  bucket 7: 30%  bucket 1: 60%  bucket 4: 40%  bucket 5: 50%  bucket 3: 50%  bucket 1: 70%  bucket 2: 50%  bucket 6: 50%  bucket 7: 40%  bucket 4: 50%  bucket 5: 60%  bucket 1: 80%  bucket 3: 60%  bucket 2: 60%  bucket 6: 60%  bucket 1: 90%  bucket 5: 70%  bucket 4: 60%  bucket 7: 50%  bucket 3: 70%  bucket 2: 70%  bucket 1: 100%  bucket 6: 70%  Sorting block of length 355 for bucket 1  (Using difference cover)  bucket 5: 80%  bucket 2: 80%  bucket 3: 80%  bucket 7: 60%  bucket 4: 70%  bucket 5: 90%  bucket 6: 80%  bucket 2: 90%  bucket 3: 90%  bucket 7: 70%  bucket 4: 80%  bucket 5: 100%  bucket 6: 90%  Sorting block of length 203 for bucket 5  (Using difference cover)  bucket 2: 100%  Sorting block of length 165 for bucket 2  (Using difference cover)  bucket 3: 100%  Sorting block of length 370 for bucket 3  (Using difference cover)  bucket 7: 80%  bucket 4: 90%  bucket 6: 100%  Sorting block of length 339 for bucket 6  (Using difference cover)  bucket 4: 100%  bucket 7: 90%  Sorting block of length 328 for bucket 4  (Using difference cover)  bucket 7: 100%  Sorting block of length 368 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 356 for bucket 1  Sorting block time: 00:00:00Returning block of 340 for bucket 6  Sorting block time: 00:00:00Returning block of 166 for bucket 2  Sorting block time: 00:00:00Returning block of 329 for bucket 4  Sorting block time: 00:00:00Returning block of 371 for bucket 3  Sorting block time: 00:00:00Returning block of 204 for bucket 5  Sorting block time: 00:00:00Returning block of 369 for bucket 7Getting block 8 of 58  Reserving size (388) for bucket 8Getting block 9 of 58  Calculating Z arrays for bucket 8  Reserving size (388) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 8:  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 8: 10%  bucket 9: 20%  bucket 9: 30%  bucket 8: 20%  bucket 9: 40%  bucket 8: 30%  bucket 9: 50%  bucket 8: 40%  bucket 9: 60%  bucket 8: 50%  bucket 9: 70%  bucket 8: 60%  bucket 9: 80%  bucket 8: 70%  bucket 9: 90%  bucket 8: 80%  bucket 9: 100%  Sorting block of length 339 for bucket 9  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 171 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 340 for bucket 9  Sorting block time: 00:00:00Returning block of 172 for bucket 8Getting block 10 of 58  Reserving size (388) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 357 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 358 for bucket 10Getting block 11 of 58Getting block 12 of 58  Reserving size (388) for bucket 11  Reserving size (388) for bucket 12  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 305 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 185 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 186 for bucket 12  Sorting block time: 00:00:00Returning block of 306 for bucket 11Getting block 13 of 58  Reserving size (388) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 282 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 283 for bucket 13Getting block 14 of 58  Reserving size (388) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:Getting block 15 of 58  bucket 14: 10%  Reserving size (388) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  Entering block accumulator loop for bucket 15:  bucket 14: 50%Getting block 16 of 58  bucket 14: 60%  Reserving size (388) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 14: 70%  bucket 14: 80%  bucket 15: 20%  bucket 16: 10%  bucket 14: 90%  bucket 16: 20%  bucket 15: 30%  bucket 14: 100%  Sorting block of length 339 for bucket 14  (Using difference cover)  bucket 16: 30%  bucket 15: 40%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  Sorting block time: 00:00:00Returning block of 340 for bucket 14  bucket 15: 90%  bucket 16: 70%  bucket 15: 100%  Sorting block of length 241 for bucket 15  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 379 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 242 for bucket 15  Sorting block time: 00:00:00Returning block of 380 for bucket 16Getting block 17 of 58  Reserving size (388) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 215 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 216 for bucket 17Getting block 18 of 58  Reserving size (388) for bucket 18Getting block 19 of 58  Calculating Z arrays for bucket 18  Reserving size (388) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:Getting block 20 of 58  bucket 18: 10%  Reserving size (388) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 19: 10%  bucket 18: 20%  bucket 20: 10%  bucket 19: 20%  bucket 18: 30%  bucket 20: 20%  bucket 18: 40%  bucket 19: 30%  bucket 20: 30%  bucket 19: 40%  bucket 18: 50%  bucket 20: 40%  bucket 19: 50%  bucket 18: 60%  bucket 20: 50%  bucket 19: 60%  bucket 18: 70%  bucket 20: 60%  bucket 19: 70%  bucket 18: 80%  bucket 20: 70%  bucket 19: 80%  bucket 18: 90%  bucket 20: 80%  bucket 19: 90%  bucket 18: 100%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 378 for bucket 18  (Using difference cover)  Sorting block of length 334 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 313 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 19  Sorting block time: 00:00:00Returning block of 314 for bucket 20  Sorting block time: 00:00:00Returning block of 379 for bucket 18Getting block 21 of 58  Reserving size (388) for bucket 21Getting block 22 of 58  Calculating Z arrays for bucket 21  Reserving size (388) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 210 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 386 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 211 for bucket 21  Sorting block time: 00:00:00Returning block of 387 for bucket 22Getting block 23 of 58  Reserving size (388) for bucket 23Getting block 24 of 58  Calculating Z arrays for bucket 23  Reserving size (388) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 23:  bucket 24: 10%  bucket 23: 10%  bucket 24: 20%  bucket 23: 20%  bucket 24: 30%  bucket 23: 30%  bucket 24: 40%  bucket 23: 40%  bucket 24: 50%  bucket 23: 50%  bucket 24: 60%  bucket 23: 60%  bucket 24: 70%  bucket 23: 70%  bucket 24: 80%  bucket 23: 80%  bucket 24: 90%  bucket 24: 100%  bucket 23: 90%  Sorting block of length 351 for bucket 24  (Using difference cover)  bucket 23: 100%  Sorting block of length 238 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 352 for bucket 24  Sorting block time: 00:00:00Returning block of 239 for bucket 23Getting block 25 of 58  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 105 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 106 for bucket 25Getting block 26 of 58  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 58  bucket 26: 10%  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%  bucket 26: 30%Getting block 28 of 58  bucket 27: 20%  bucket 26: 40%  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 26: 50%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 26: 60%  bucket 27: 40%  bucket 28: 30%  bucket 26: 70%  bucket 28: 40%  bucket 27: 50%  bucket 28: 50%  bucket 26: 80%  bucket 27: 60%  bucket 28: 60%  bucket 26: 90%  bucket 28: 70%  bucket 26: 100%  Sorting block of length 354 for bucket 26  (Using difference cover)  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  Sorting block of length 253 for bucket 28  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 254 for bucket 28  Sorting block time: 00:00:00Returning block of 355 for bucket 26  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 29 of 58  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 289 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 290 for bucket 29Getting block 30 of 58  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 345 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 346 for bucket 30Getting block 31 of 58  Reserving size (388) for bucket 31Getting block 32 of 58  Calculating Z arrays for bucket 31  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 31: 30%  bucket 32: 20%  bucket 31: 40%  bucket 32: 30%  bucket 31: 50%  bucket 32: 40%  bucket 31: 60%  bucket 32: 50%  bucket 31: 70%  bucket 32: 60%  bucket 32: 70%  bucket 31: 80%  bucket 31: 90%  buc..0:00Returning block of 350 for bucket 23Getting block 24 of 57  Reserving size (388) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 57  Entering block accumulator loop for bucket 24:  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 25: 50%  bucket 24: 90%  bucket 25: 60%  bucket 24: 100%  Sorting block of length 245 for bucket 24  (Using difference cover)  bucket 25: 70%  Sorting block time: 00:00:00Returning block of 246 for bucket 24  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 286 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 287 for bucket 25Getting block 26 of 57  Reserving size (388) for bucket 26Getting block 27 of 57  Calculating Z arrays for bucket 26  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 26: 10%  bucket 27: 20%  bucket 26: 20%  bucket 26: 30%  bucket 27: 30%  bucket 27: 40%  bucket 26: 40%  bucket 27: 50%  bucket 27: 60%  bucket 26: 50%  bucket 27: 70%  bucket 26: 60%  bucket 27: 80%  bucket 26: 70%  bucket 27: 90%  bucket 26: 80%  bucket 27: 100%  Sorting block of length 359 for bucket 27  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 384 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 26  Sorting block time: 00:00:00Returning block of 360 for bucket 27Getting block 28 of 57  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%Getting block 29 of 57  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 20%  Entering block accumulator loop for bucket 29:  bucket 28: 30%  bucket 29: 10%  bucket 28: 40%  bucket 29: 20%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 29: 80%  bucket 28: 90%  bucket 29: 90%  bucket 29: 100%  bucket 28: 100%  Sorting block of length 195 for bucket 29  (Using difference cover)  Sorting block of length 387 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 28  Sorting block time: 00:00:00Returning block of 196 for bucket 29Getting block 30 of 57  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:Getting block 31 of 57  bucket 30: 10%  Reserving size (388) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 31: 10%  bucket 30: 30%  bucket 31: 20%  bucket 30: 40%  bucket 31: 30%  bucket 30: 50%  bucket 30: 60%  bucket 31: 40%  bucket 30: 70%  bucket 31: 50%  bucket 30: 80%  bucket 31: 60%  bucket 30: 90%  bucket 31: 70%  bucket 30: 100%  Sorting block of length 257 for bucket 30  (Using difference cover)  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 310 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 258 for bucket 30  Sorting block time: 00:00:00Returning block of 311 for bucket 31Getting block 32 of 57  Reserving size (388) for bucket 32Getting block 33 of 57  Calculating Z arrays for bucket 32  Reserving size (388) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 32: 10%  bucket 33: 20%  bucket 32: 20%  bucket 33: 30%  bucket 32: 30%  bucket 33: 40%  bucket 32: 40%  bucket 33: 50%  bucket 33: 60%  bucket 32: 50%  bucket 33: 70%  bucket 32: 60%  bucket 33: 80%  bucket 33: 90%  bucket 32: 70%  bucket 33: 100%  Sorting block of length 387 for bucket 33  (Using difference cover)  bucket 32: 80%  bucket 32: 90%  Sorting block time: 00:00:00Returning block of 388 for bucket 33  bucket 32: 100%  Sorting block of length 219 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 220 for bucket 32Getting block 34 of 57  Reserving size (388) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 57  Entering block accumulator loop for bucket 34:  Reserving size (388) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 34: 10%  bucket 34: 20%  bucket 35: 10%  bucket 34: 30%  bucket 35: 20%  bucket 35: 30%  bucket 34: 40%  bucket 35: 40%  bucket 34: 50%  bucket 34: 60%  bucket 35: 50%  bucket 34: 70%  bucket 35: 60%  bucket 34: 80%  bucket 35: 70%  bucket 34: 90%  bucket 35: 80%  bucket 34: 100%  bucket 35: 90%  Sorting block of length 275 for bucket 34  (Using difference cover)  bucket 35: 100%  Sorting block of length 350 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 276 for bucket 34  Sorting block time: 00:00:00Returning block of 351 for bucket 35Getting block 36 of 57  Reserving size (388) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 150 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 151 for bucket 36Getting block 37 of 57  Reserving size (388) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%Getting block 38 of 57  bucket 37: 40%  Reserving size (388) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 37: 50%  bucket 38: 10%  bucket 37: 60%  bucket 38: 20%  bucket 37: 70%  bucket 38: 30%  bucket 37: 80%  bucket 38: 40%  bucket 37: 90%  bucket 38: 50%  bucket 37: 100%  Sorting block of length 267 for bucket 37  (Using difference cover)  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  Sorting block time: 00:00:00Returning block of 268 for bucket 37  bucket 38: 100%  Sorting block of length 337 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 338 for bucket 38Getting block 39 of 57  Reserving size (388) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%Getting block 40 of 57  bucket 39: 30%  Reserving size (388) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 39: 40%  bucket 39: 50%  bucket 40: 10%  bucket 39: 60%  bucket 40: 20%  bucket 39: 70%  bucket 40: 30%  bucket 39: 80%  bucket 40: 40%  bucket 39: 90%  bucket 40: 50%  bucket 39: 100%  Sorting block of length 387 for bucket 39  (Using difference cover)  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  Sorting block time: 00:00:00Returning block of 388 for bucket 39  bucket 40: 90%  bucket 40: 100%  Sorting block of length 379 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 380 for bucket 40Getting block 41 of 57  Reserving size (388) for bucket 41Getting block 42 of 57  Calculating Z arrays for bucket 41  Reserving size (388) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 41: 10%  bucket 42: 10%  bucket 41: 20%  bucket 42: 20%  bucket 41: 30%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 41: 60%  bucket 42: 40%  bucket 41: 70%  bucket 42: 50%  bucket 41: 80%  bucket 41: 90%  bucket 42: 60%  bucket 42: 70%  bucket 41: 100%  Sorting block of length 330 for bucket 41  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block time: 00:00:00  Sorting block of length 188 for bucket 42  (Using difference cover)Returning block of 331 for bucket 41  Sorting block time: 00:00:00Returning block of 189 for bucket 42Getting block 43 of 57  Reserving size (388) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%Getting block 44 of 57  Reserving size (388) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 43: 30%  bucket 44: 10%  bucket 44: 20%  bucket 43: 40%  bucket 44: 30%  bucket 44: 40%  bucket 43: 50%  bucket 44: 50%  bucket 44: 60%  bucket 43: 60%  bucket 44: 70%  bucket 44: 80%  bucket 43: 70%  bucket 44: 90%  bucket 44: 100%  bucket 43: 80%  Sorting block of length 366 for bucket 44  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 321 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 367 for bucket 44  Sorting block time: 00:00:00Returning block of 322 for bucket 43Getting block 45 of 57  Reserving size (388) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 365 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 366 for bucket 45Getting block 46 of 57  Reserving size (388) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%Getting block 47 of 57  Reserving size (388) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 46: 50%  bucket 46: 60%  bucket 47: 10%  bucket 46: 70%  bucket 47: 20%  bucket 46: 80%  bucket 47: 30%  bucket 46: 90%  bucket 47: 40%  bucket 46: 100%  bucket 47: 50%  Sorting block of length 253 for bucket 46  (Using difference cover)  bucket 47: 60%  bucket 47: 70%  Sorting block time: 00:00:00Returning block of 254 for bucket 46  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 217 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 218 for bucket 47Getting block 48 of 57  Reserving size (388) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:Getting block 49 of 57  Reserving size (388) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 10%  Entering block accumulator loop for bucket 49:  bucket 48: 20%  bucket 49: 10%  bucket 48: 30%  bucket 49: 20%  bucket 49: 30%  bucket 48: 40%  bucket 49: 40%  bucket 48: 50%  bucket 49: 50%  bucket 48: 60%  bucket 48: 70%  bucket 49: 60%  bucket 48: 80%  bucket 49: 70%  bucket 48: 90%  bucket 49: 80%  bucket 49: 90%  bucket 48: 100%  Sorting block of length 384 for bucket 48  (Using difference cover)  bucket 49: 100%  Sorting block of length 112 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 48  Sorting block time: 00:00:00Returning block of 113 for bucket 49Getting block 50 of 57  Reserving size (388) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:Getting block 51 of 57  bucket 50: 10%  Reserving size (388) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 51: 10%  bucket 51: 20%  bucket 50: 30%  bucket 51: 30%  bucket 50: 40%  bucket 51: 40%  bucket 50: 50%  bucket 51: 50%  bucket 50: 60%  bucket 51: 60%  bucket 50: 70%  bucket 50: 80%  bucket 51: 70%  bucket 50: 90%  bucket 51: 80%  bucket 51: 90%  bucket 50: 100%  Sorting block of length 275 for bucket 50  (Using difference cover)  bucket 51: 100%  Sorting block of length 350 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 351 for bucket 51  Sorting block time: 00:00:00Returning block of 276 for bucket 50Getting block 52 of 57  Reserving size (388) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%Getting block 53 of 57  bucket 52: 20%  Reserving size (388) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 52: 30%  bucket 52: 40%  bucket 53: 10%  bucket 52: 50%  bucket 53: 20%  bucket 52: 60%  bucket 53: 30%  bucket 52: 70%  bucket 53: 40%  bucket 52: 80%  bucket 53: 50%  bucket 52: 90%  bucket 53: 60%  bucket 52: 100%  Sorting block of length 378 for bucket 52  (Using difference cover)  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 370 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 379 for bucket 52  Sorting block time: 00:00:00Returning block of 371 for bucket 53Getting block 54 of 57  Reserving size (388) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%Getting block 55 of 57  Reserving size (388) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 20%  Entering block accumulator loop for bucket 55:  bucket 54: 30%  bucket 55: 10%  bucket 54: 40%  bucket 55: 20%  bucket 55: 30%  bucket 54: 50%  bucket 55: 40%  bucket 54: 60%  bucket 55: 50%  bucket 54: 70%  bucket 55: 60%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 55: 80%  bucket 54: 100%  Sorting block of length 237 for bucket 54  (Using difference cover)  bucket 55: 90%  bucket 55: 100%  Sorting block of length 344 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 238 for bucket 54  Sorting block time: 00:00:00Returning block of 345 for bucket 55Getting block 56 of 57  Reserving size (388) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 270 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 271 for bucket 56Getting block 57 of 57  Reserving size (388) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 132 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 133 for bucket 57Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmpWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmpRe-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL indexRenaming genome.3.bt2.tmp to genome.3.bt2Renaming genome.4.bt2.tmp to genome.4.bt2Renaming genome.1.bt2.tmp to genome.1.bt2Renaming genome.2.bt2.tmp to genome.2.bt2Renaming genome.rev.1.bt2.tmp to genome.rev.1.bt2Renaming genome.rev.2.bt2.tmp to genome.rev.2.bt2100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #7)" name="6" time="42.08563590049744">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 32  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/5/2/7/dataset_527ed093-8237-4d57-b36d-35aab5b856c5.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 517Using parameters --bmax 388 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 86 sample suffixesGenerating random suffixesQSorting 86 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 86 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 12, merged 41; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 6; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 5, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 284.672 (target: 387)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 58  Reserving size (388) for bucket 1Getting block 2 of 58Getting block 3 of 58Getting block 4 of 58Getting block 5 of 58Getting block 6 of 58Getting block 7 of 58  Calculating Z arrays for bucket 1  Reserving size (388) for bucket 2  Reserving size (388) for bucket 3  Reserving size (388) for bucket 4  Reserving size (388) for bucket 5  Reserving size (388) for bucket 6  Reserving size (388) for bucket 7  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 5:  bucket 1: 10%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 1: 20%  bucket 3: 10%  bucket 2: 20%  bucket 5: 10%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 3: 20%  bucket 4: 10%  bucket 7: 10%  bucket 1: 50%  bucket 5: 20%  bucket 2: 40%  bucket 6: 10%  bucket 1: 60%  bucket 3: 30%  bucket 2: 50%  bucket 1: 70%  bucket 5: 30%  bucket 1: 80%  bucket 4: 20%  bucket 7: 20%  bucket 2: 60%  bucket 3: 40%  bucket 6: 20%  bucket 1: 90%  bucket 5: 40%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 355 for bucket 1  (Using difference cover)  bucket 3: 50%  bucket 5: 50%  bucket 2: 80%  bucket 4: 30%  bucket 7: 30%  bucket 6: 30%  bucket 3: 60%  bucket 2: 90%  bucket 5: 60%  bucket 2: 100%  Sorting block of length 165 for bucket 2  (Using difference cover)  bucket 3: 70%  bucket 5: 70%  bucket 7: 40%  bucket 4: 40%  bucket 6: 40%  bucket 3: 80%  bucket 5: 80%  bucket 4: 50%  bucket 7: 50%  bucket 3: 90%  bucket 5: 90%  bucket 6: 50%  bucket 3: 100%  bucket 5: 100%  Sorting block of length 370 for bucket 3  (Using difference cover)  Sorting block of length 203 for bucket 5  (Using difference cover)  bucket 4: 60%  bucket 7: 60%  bucket 6: 60%  bucket 4: 70%  bucket 7: 70%  bucket 6: 70%  bucket 4: 80%  bucket 7: 80%  bucket 6: 80%  bucket 4: 90%  Sorting block time: 00:00:00  bucket 7: 90%Returning block of 356 for bucket 1  bucket 6: 90%  bucket 7: 100%  Sorting block of length 368 for bucket 7  (Using difference cover)  bucket 4: 100%  Sorting block of length 328 for bucket 4  (Using difference cover)  bucket 6: 100%  Sorting block of length 339 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 371 for bucket 3  Sorting block time: 00:00:00Returning block of 369 for bucket 7  Sorting block time: 00:00:00Returning block of 329 for bucket 4  Sorting block time: 00:00:00Returning block of 166 for bucket 2  Sorting block time: 00:00:00Returning block of 340 for bucket 6  Sorting block time: 00:00:00Returning block of 204 for bucket 5Getting block 8 of 58Getting block 9 of 58  Reserving size (388) for bucket 8  Reserving size (388) for bucket 9  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 8:  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 8: 10%  bucket 9: 20%  bucket 8: 20%  bucket 9: 30%  bucket 8: 30%  bucket 9: 40%  bucket 8: 40%  bucket 9: 50%  bucket 8: 50%  bucket 9: 60%  bucket 8: 60%  bucket 9: 70%  bucket 8: 70%  bucket 9: 80%  bucket 8: 80%  bucket 8: 90%  bucket 9: 90%  bucket 9: 100%  bucket 8: 100%  Sorting block of length 339 for bucket 9  (Using difference cover)  Sorting block of length 171 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 340 for bucket 9  Sorting block time: 00:00:00Returning block of 172 for bucket 8Getting block 10 of 58  Reserving size (388) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 357 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 358 for bucket 10Getting block 11 of 58  Reserving size (388) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 58  Reserving size (388) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 58  bucket 11: 10%  Entering block accumulator loop for bucket 12:  Reserving size (388) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 11: 20%  bucket 12: 10%  bucket 13: 10%  bucket 11: 30%  bucket 12: 20%  bucket 13: 20%  bucket 11: 40%  bucket 12: 30%  bucket 13: 30%  bucket 11: 50%  bucket 12: 40%  bucket 13: 40%  bucket 13: 50%  bucket 11: 60%  bucket 12: 50%  bucket 13: 60%  bucket 12: 60%  bucket 11: 70%  bucket 13: 70%  bucket 12: 70%  bucket 11: 80%  bucket 13: 80%  bucket 12: 80%  bucket 11: 90%  bucket 13: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 305 for bucket 11  (Using difference cover)  bucket 13: 100%  Sorting block of length 282 for bucket 13  (Using difference cover)  bucket 12: 100%  Sorting block of length 185 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 186 for bucket 12  Sorting block time: 00:00:00Returning block of 306 for bucket 11  Sorting block time: 00:00:00Returning block of 283 for bucket 13Getting block 15 of 58Getting block 14 of 58  Reserving size (388) for bucket 15  Reserving size (388) for bucket 14  Calculating Z arrays for bucket 15  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 14:Getting block 16 of 58  Reserving size (388) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 14: 10%  bucket 16: 10%  bucket 15: 20%  bucket 14: 20%  bucket 16: 20%  bucket 15: 30%  bucket 14: 30%  bucket 16: 30%  bucket 15: 40%  bucket 14: 40%  bucket 16: 40%  bucket 15: 50%  bucket 14: 50%  bucket 16: 50%  bucket 15: 60%  bucket 16: 60%  bucket 14: 60%  bucket 15: 70%  bucket 16: 70%  bucket 14: 70%  bucket 15: 80%  bucket 16: 80%  bucket 14: 80%  bucket 15: 90%  bucket 14: 90%  bucket 16: 90%  bucket 15: 100%  Sorting block of length 241 for bucket 15  (Using difference cover)  bucket 14: 100%  Sorting block of length 339 for bucket 14  (Using difference cover)  bucket 16: 100%  Sorting block of length 379 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 242 for bucket 15  Sorting block time: 00:00:00Returning block of 340 for bucket 14  Sorting block time: 00:00:00Returning block of 380 for bucket 16Getting block 17 of 58  Reserving size (388) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 215 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 216 for bucket 17Getting block 18 of 58  Reserving size (388) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%Getting block 19 of 58  Reserving size (388) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 20%  Entering block accumulator loop for bucket 19:  bucket 18: 30%  bucket 19: 10%  bucket 18: 40%  bucket 19: 20%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 18: 80%  bucket 19: 50%  bucket 18: 90%  bucket 19: 60%  bucket 19: 70%  bucket 18: 100%  bucket 19: 80%  Sorting block of length 378 for bucket 18  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 334 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 379 for bucket 18  Sorting block time: 00:00:00Returning block of 335 for bucket 19Getting block 20 of 58  Reserving size (388) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 313 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 20Getting block 21 of 58  Reserving size (388) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 58  bucket 21: 10%  Reserving size (388) for bucket 22Getting block 23 of 58  Calculating Z arrays for bucket 22  Reserving size (388) for bucket 23  Calculating Z arrays for bucket 23  bucket 21: 20%  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 22:  bucket 21: 30%  bucket 23: 10%  bucket 22: 10%  bucket 21: 40%  bucket 23: 20%  bucket 22: 20%  bucket 21: 50%  bucket 23: 30%  bucket 22: 30%  bucket 23: 40%  bucket 21: 60%  bucket 22: 40%  bucket 23: 50%  bucket 21: 70%  bucket 22: 50%  bucket 23: 60%  bucket 21: 80%  bucket 23: 70%  bucket 22: 60%  bucket 21: 90%  bucket 23: 80%  bucket 22: 70%  bucket 21: 100%  bucket 23: 90%  Sorting block of length 210 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 23: 100%  Sorting block of length 238 for bucket 23  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 386 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 239 for bucket 23  Sorting block time: 00:00:00Returning block of 211 for bucket 21  Sorting block time: 00:00:00Returning block of 387 for bucket 22Getting block 24 of 58  Reserving size (388) for bucket 24Getting block 25 of 58Getting block 26 of 58  Calculating Z arrays for bucket 24  Reserving size (388) for bucket 25  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 25  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 26: 10%  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 26: 20%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 26: 30%  bucket 24: 50%  bucket 24: 60%  bucket 25: 40%  bucket 26: 40%  bucket 24: 70%  bucket 25: 50%  bucket 24: 80%  bucket 26: 50%  bucket 25: 60%  bucket 24: 90%  bucket 26: 60%  bucket 25: 70%  bucket 24: 100%  Sorting block of length 351 for bucket 24  (Using difference cover)  bucket 25: 80%  bucket 26: 70%  bucket 25: 90%  bucket 26: 80%  Sorting block time: 00:00:00Returning block of 352 for bucket 24  bucket 25: 100%  Sorting block of length 105 for bucket 25  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 354 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 106 for bucket 25  Sorting block time: 00:00:00Returning block of 355 for bucket 26Getting block 27 of 58  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 58  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%Getting block 29 of 58  bucket 28: 30%  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 28: 40%  bucket 29: 10%  bucket 28: 50%  bucket 29: 20%  bucket 28: 60%  bucket 29: 30%  bucket 28: 70%  bucket 29: 40%  bucket 29: 50%  bucket 28: 80%  bucket 29: 60%  bucket 28: 90%  bucket 29: 70%  bucket 28: 100%  Sorting block of length 253 for bucket 28  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 289 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 254 for bucket 28  Sorting block time: 00:00:00Returning block of 290 for bucket 29Getting block 30 of 58  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 345 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 346 for bucket 30Getting block 31 of 58  Reserving size (388) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%Getting block 32 of 58  bucket 31: 70%  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 31: 80%  bucket 31: 90%  bucket 32: 10%  bucket 31: 100%  Sorting block of length 377 for bucket 31  (Using difference cover)  bucket 32: 20% ..0:00Returning block of 372 for bucket 22Getting block 24 of 57  Reserving size (388) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 57  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 24: 90%  bucket 25: 80%  bucket 24: 100%  Sorting block of length 245 for bucket 24  (Using difference cover)  bucket 25: 90%  bucket 25: 100%  Sorting block of length 286 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 246 for bucket 24  Sorting block time: 00:00:00Returning block of 287 for bucket 25Getting block 26 of 57  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 57  Reserving size (388) for bucket 27  bucket 26: 10%  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 26: 30%  bucket 27: 10%  bucket 26: 40%  bucket 27: 20%  bucket 27: 30%  bucket 26: 50%  bucket 26: 60%  bucket 27: 40%  bucket 26: 70%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 27: 70%  bucket 26: 90%  bucket 27: 80%  bucket 26: 100%  Sorting block of length 384 for bucket 26  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 359 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 26  Sorting block time: 00:00:00Returning block of 360 for bucket 27Getting block 28 of 57  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 387 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 28Getting block 29 of 57  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 57  Entering block accumulator loop for bucket 29:  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 30: 30%  bucket 29: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 30: 60%  bucket 30: 70%  bucket 29: 60%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 29: 80%  bucket 30: 100%  Sorting block of length 257 for bucket 30  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 195 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 258 for bucket 30  Sorting block time: 00:00:00Returning block of 196 for bucket 29Getting block 31 of 57  Reserving size (388) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%Getting block 32 of 57  Reserving size (388) for bucket 32  bucket 31: 30%  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 31: 40%  bucket 32: 10%  bucket 32: 20%  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 32: 40%  bucket 31: 70%  bucket 32: 50%  bucket 31: 80%  bucket 32: 60%  bucket 31: 90%  bucket 32: 70%  bucket 31: 100%  Sorting block of length 310 for bucket 31  (Using difference cover)  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 219 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 311 for bucket 31  Sorting block time: 00:00:00Returning block of 220 for bucket 32Getting block 33 of 57  Reserving size (388) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%Getting block 34 of 57  Reserving size (388) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 33: 30%  bucket 34: 10%  bucket 33: 40%  bucket 34: 20%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  Sorting block of length 387 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 275 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 33  Sorting block time: 00:00:00Returning block of 276 for bucket 34Getting block 35 of 57  Reserving size (388) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%Getting block 36 of 57  Reserving size (388) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 57  bucket 35: 20%  Entering block accumulator loop for bucket 36:  Reserving size (388) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 35: 30%  bucket 36: 10%  bucket 37: 10%  bucket 35: 40%  bucket 36: 20%  bucket 37: 20%  bucket 35: 50%  bucket 36: 30%  bucket 35: 60%  bucket 37: 30%  bucket 36: 40%  bucket 35: 70%  bucket 37: 40%  bucket 36: 50%  bucket 35: 80%  bucket 37: 50%  bucket 36: 60%  bucket 37: 60%  bucket 35: 90%  bucket 36: 70%  bucket 35: 100%  bucket 37: 70%  Sorting block of length 350 for bucket 35  (Using difference cover)  bucket 36: 80%  bucket 37: 80%  bucket 36: 90%  bucket 37: 90%  bucket 36: 100%  Sorting block of length 150 for bucket 36  (Using difference cover)  bucket 37: 100%  Sorting block of length 267 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 351 for bucket 35  Sorting block time: 00:00:00Returning block of 151 for bucket 36  Sorting block time: 00:00:00Returning block of 268 for bucket 37Getting block 38 of 57  Reserving size (388) for bucket 38Getting block 39 of 57  Calculating Z arrays for bucket 38  Reserving size (388) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 38: 10%  bucket 39: 20%  bucket 39: 30%  bucket 38: 20%  bucket 39: 40%  bucket 38: 30%  bucket 39: 50%  bucket 39: 60%  bucket 38: 40%  bucket 39: 70%  bucket 39: 80%  bucket 38: 50%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 387 for bucket 39  (Using difference cover)  bucket 38: 60%  bucket 38: 70%  Sorting block time: 00:00:00Returning block of 388 for bucket 39  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 337 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 338 for bucket 38Getting block 40 of 57  Reserving size (388) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 379 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 380 for bucket 40Getting block 41 of 57  Reserving size (388) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%Getting block 42 of 57  Reserving size (388) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 42: 10%  bucket 41: 40%  bucket 42: 20%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 42: 90%  bucket 41: 100%  Sorting block of length 330 for bucket 41  (Using difference cover)  bucket 42: 100%  Sorting block of length 188 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 189 for bucket 42  Sorting block time: 00:00:00Returning block of 331 for bucket 41Getting block 43 of 57  Reserving size (388) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%Getting block 44 of 57  bucket 43: 20%  Reserving size (388) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 30%  Entering block accumulator loop for bucket 44:  bucket 43: 40%  bucket 44: 10%  bucket 43: 50%  bucket 44: 20%  bucket 43: 60%  bucket 44: 30%  bucket 43: 70%  bucket 44: 40%  bucket 43: 80%  bucket 43: 90%  bucket 44: 50%  bucket 43: 100%  Sorting block of length 321 for bucket 43  (Using difference cover)  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  Sorting block time: 00:00:00  bucket 44: 90%Returning block of 322 for bucket 43  bucket 44: 100%  Sorting block of length 366 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 367 for bucket 44Getting block 45 of 57  Reserving size (388) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%Getting block 46 of 57  Reserving size (388) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 20%  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 45: 30%  bucket 46: 20%  bucket 46: 30%  bucket 45: 40%  bucket 46: 40%  bucket 45: 50%  bucket 46: 50%  bucket 46: 60%  bucket 45: 60%  bucket 46: 70%  bucket 46: 80%  bucket 45: 70%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 253 for bucket 46  (Using difference cover)  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 365 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 254 for bucket 46  Sorting block time: 00:00:00Returning block of 366 for bucket 45Getting block 47 of 57  Reserving size (388) for bucket 47Getting block 48 of 57  Calculating Z arrays for bucket 47  Reserving size (388) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 47:  Entering block accumulator loop for bucket 48:  bucket 47: 10%  bucket 48: 10%  bucket 47: 20%  bucket 48: 20%  bucket 48: 30%  bucket 47: 30%  bucket 48: 40%  bucket 47: 40%  bucket 48: 50%  bucket 47: 50%  bucket 48: 60%  bucket 48: 70%  bucket 47: 60%  bucket 48: 80%  bucket 47: 70%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 384 for bucket 48  (Using difference cover)  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 217 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 48  Sorting block time: 00:00:00Returning block of 218 for bucket 47Getting block 49 of 57  Reserving size (388) for bucket 49Getting block 50 of 57  Calculating Z arrays for bucket 49  Reserving size (388) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 49: 10%  bucket 49: 20%  bucket 50: 20%  bucket 49: 30%  bucket 50: 30%  bucket 50: 40%  bucket 49: 40%  bucket 50: 50%  bucket 49: 50%  bucket 50: 60%  bucket 49: 60%  bucket 50: 70%  bucket 49: 70%  bucket 49: 80%  bucket 50: 80%  bucket 49: 90%  bucket 50: 90%  bucket 49: 100%  Sorting block of length 112 for bucket 49  (Using difference cover)  bucket 50: 100%  Sorting block of length 275 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 49  Sorting block time: 00:00:00Returning block of 276 for bucket 50Getting block 51 of 57  Reserving size (388) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%Getting block 52 of 57  Reserving size (388) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 52: 10%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 52: 60%  bucket 51: 80%  bucket 52: 70%  bucket 51: 90%  bucket 52: 80%  bucket 51: 100%  Sorting block of length 350 for bucket 51  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 378 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 351 for bucket 51  Sorting block time: 00:00:00Returning block of 379 for bucket 52Getting block 53 of 57  Reserving size (388) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 370 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 371 for bucket 53Getting block 54 of 57  Reserving size (388) for bucket 54Getting block 55 of 57Getting block 56 of 57  Calculating Z arrays for bucket 54  Reserving size (388) for bucket 55  Reserving size (388) for bucket 56  Calculating Z arrays for bucket 55  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 56:  bucket 54: 10%  bucket 55: 10%  bucket 56: 10%  bucket 54: 20%  bucket 56: 20%  bucket 55: 20%  bucket 54: 30%  bucket 56: 30%  bucket 55: 30%  bucket 54: 40%  bucket 54: 50%  bucket 56: 40%  bucket 55: 40%  bucket 54: 60%  bucket 56: 50%  bucket 55: 50%  bucket 54: 70%  bucket 55: 60%  bucket 56: 60%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 56: 70%  bucket 54: 100%  Sorting block of length 237 for bucket 54  (Using difference cover)  bucket 55: 80%  bucket 56: 80%  bucket 55: 90%  bucket 56: 90%  bucket 55: 100%  Sorting block of length 344 for bucket 55  (Using difference cover)  bucket 56: 100%  Sorting block of length 270 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 238 for bucket 54  Sorting block time: 00:00:00Returning block of 345 for bucket 55  Sorting block time: 00:00:00Returning block of 271 for bucket 56Getting block 57 of 57  Reserving size (388) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 132 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 133 for bucket 57Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmpWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmpRe-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL indexRenaming genome.3.bt2.tmp to genome.3.bt2Renaming genome.4.bt2.tmp to genome.4.bt2Renaming genome.1.bt2.tmp to genome.1.bt2Renaming genome.2.bt2.tmp to genome.2.bt2Renaming genome.rev.1.bt2.tmp to genome.rev.1.bt2Renaming genome.rev.2.bt2.tmp to genome.rev.2.bt2100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #8)" name="7" time="43.26086401939392">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 32  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/3/6/dataset_c36100f1-dff9-407c-8731-ad8d06e63018.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 517Using parameters --bmax 388 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 86 sample suffixesGenerating random suffixesQSorting 86 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 86 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 12, merged 41; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 6; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 5, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 284.672 (target: 387)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 58  Reserving size (388) for bucket 1Getting block 2 of 58Getting block 3 of 58Getting block 4 of 58Getting block 5 of 58Getting block 6 of 58Getting block 7 of 58  Calculating Z arrays for bucket 1  Reserving size (388) for bucket 2  Reserving size (388) for bucket 3  Reserving size (388) for bucket 4  Reserving size (388) for bucket 5  Reserving size (388) for bucket 6  Reserving size (388) for bucket 7  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 7:  bucket 2: 10%  bucket 5: 10%  bucket 1: 10%  bucket 4: 10%  bucket 5: 20%  bucket 2: 20%  bucket 7: 10%  bucket 3: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 2: 30%  bucket 7: 20%  bucket 1: 30%  bucket 3: 20%  bucket 5: 40%  bucket 7: 30%  bucket 1: 40%  bucket 6: 10%  bucket 5: 50%  bucket 3: 30%  bucket 1: 50%  bucket 7: 40%  bucket 4: 20%  bucket 6: 20%  bucket 2: 40%  bucket 5: 60%  bucket 3: 40%  bucket 1: 60%  bucket 7: 50%  bucket 4: 30%  bucket 6: 30%  bucket 2: 50%  bucket 5: 70%  bucket 3: 50%  bucket 1: 70%  bucket 4: 40%  bucket 2: 60%  bucket 6: 40%  bucket 5: 80%  bucket 3: 60%  bucket 7: 60%  bucket 2: 70%  bucket 1: 80%  bucket 4: 50%  bucket 6: 50%  bucket 5: 90%  bucket 2: 80%  bucket 3: 70%  bucket 7: 70%  bucket 4: 60%  bucket 1: 90%  bucket 5: 100%  Sorting block of length 203 for bucket 5  (Using difference cover)  bucket 2: 90%  bucket 6: 60%  bucket 4: 70%  bucket 3: 80%  bucket 7: 80%  bucket 1: 100%  bucket 2: 100%  Sorting block of length 355 for bucket 1  (Using difference cover)  Sorting block of length 165 for bucket 2  bucket 4: 80%  bucket 6: 70%  bucket 7: 90%  bucket 3: 90%  (Using difference cover)  bucket 4: 90%  bucket 6: 80%  bucket 7: 100%  bucket 3: 100%  bucket 4: 100%  Sorting block of length 368 for bucket 7  (Using difference cover)  Sorting block of length 370 for bucket 3  (Using difference cover)  Sorting block of length 328 for bucket 4  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 339 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 166 for bucket 2  Sorting block time: 00:00:00Returning block of 204 for bucket 5  Sorting block time: 00:00:00Returning block of 329 for bucket 4  Sorting block time: 00:00:00Returning block of 356 for bucket 1  Sorting block time: 00:00:00Returning block of 369 for bucket 7  Sorting block time: 00:00:00Returning block of 371 for bucket 3  Sorting block time: 00:00:00Returning block of 340 for bucket 6Getting block 8 of 58  Reserving size (388) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%Getting block 9 of 58  bucket 8: 30%  Reserving size (388) for bucket 9  Calculating Z arrays for bucket 9  bucket 8: 40%  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 8: 50%  bucket 8: 60%  bucket 9: 20%  bucket 9: 30%  bucket 8: 70%  bucket 9: 40%  bucket 8: 80%  bucket 9: 50%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 171 for bucket 8  (Using difference cover)  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 172 for bucket 8  Sorting block time: 00:00:00Returning block of 340 for bucket 9Getting block 10 of 58  Reserving size (388) for bucket 10Getting block 11 of 58  Calculating Z arrays for bucket 10  Reserving size (388) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 10: 10%  bucket 10: 20%  bucket 11: 10%  bucket 10: 30%  bucket 10: 40%  bucket 11: 20%  bucket 10: 50%  bucket 11: 30%  bucket 10: 60%  bucket 10: 70%  bucket 11: 40%  bucket 10: 80%  bucket 10: 90%  bucket 11: 50%  bucket 10: 100%  Sorting block of length 357 for bucket 10  (Using difference cover)  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  Sorting block time: 00:00:00Returning block of 358 for bucket 10  bucket 11: 100%  Sorting block of length 305 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 306 for bucket 11Getting block 12 of 58  Reserving size (388) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 58  Entering block accumulator loop for bucket 12:  Reserving size (388) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 13: 10%  bucket 12: 20%  bucket 13: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 13: 30%  bucket 12: 60%  bucket 13: 40%  bucket 12: 70%  bucket 13: 50%  bucket 12: 80%  bucket 13: 60%  bucket 12: 90%  bucket 13: 70%  bucket 12: 100%  bucket 13: 80%  Sorting block of length 185 for bucket 12  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 282 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 186 for bucket 12  Sorting block time: 00:00:00Returning block of 283 for bucket 13Getting block 14 of 58  Reserving size (388) for bucket 14Getting block 15 of 58  Calculating Z arrays for bucket 14  Reserving size (388) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 14: 10%Getting block 16 of 58  bucket 15: 20%  Reserving size (388) for bucket 16  Calculating Z arrays for bucket 16  bucket 14: 20%  bucket 15: 30%  Entering block accumulator loop for bucket 16:  bucket 15: 40%  bucket 14: 30%  bucket 15: 50%  bucket 16: 10%  bucket 15: 60%  bucket 14: 40%  bucket 16: 20%  bucket 15: 70%  bucket 14: 50%  bucket 16: 30%  bucket 15: 80%  bucket 14: 60%  bucket 15: 90%  bucket 16: 40%  bucket 14: 70%  bucket 15: 100%  Sorting block of length 241 for bucket 15  (Using difference cover)  bucket 16: 50%  bucket 14: 80%  bucket 16: 60%  bucket 16: 70%  bucket 14: 90%  bucket 16: 80%  bucket 14: 100%  Sorting block of length 339 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 242 for bucket 15  bucket 16: 90%  bucket 16: 100%  Sorting block of length 379 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 340 for bucket 14  Sorting block time: 00:00:00Returning block of 380 for bucket 16Getting block 17 of 58  Reserving size (388) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%Getting block 18 of 58  Reserving size (388) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 70%  Entering block accumulator loop for bucket 18:  bucket 17: 80%  bucket 18: 10%  bucket 17: 90%  bucket 18: 20%  bucket 17: 100%  bucket 18: 30%  Sorting block of length 215 for bucket 17  (Using difference cover)  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  Sorting block time: 00:00:00Returning block of 216 for bucket 17  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 378 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 379 for bucket 18Getting block 19 of 58  Reserving size (388) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 58  bucket 19: 10%  Reserving size (388) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 334 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 313 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 19  Sorting block time: 00:00:00Returning block of 314 for bucket 20Getting block 21 of 58  Reserving size (388) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 210 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 211 for bucket 21Getting block 22 of 58  Reserving size (388) for bucket 22Getting block 23 of 58  Calculating Z arrays for bucket 22  Reserving size (388) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 22: 10%  bucket 23: 20%  bucket 22: 20%  bucket 23: 30%  bucket 22: 30%  bucket 23: 40%  bucket 23: 50%  bucket 22: 40%  bucket 23: 60%  bucket 22: 50%  bucket 23: 70%  bucket 22: 60%  bucket 23: 80%  bucket 23: 90%  bucket 22: 70%  bucket 23: 100%  Sorting block of length 238 for bucket 23  bucket 22: 80%  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 386 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 239 for bucket 23  Sorting block time: 00:00:00Returning block of 387 for bucket 22Getting block 24 of 58  Reserving size (388) for bucket 24Getting block 25 of 58  Calculating Z arrays for bucket 24  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 24: 90%  bucket 25: 90%  bucket 24: 100%  Sorting block of length 351 for bucket 24  (Using difference cover)  bucket 25: 100%  Sorting block of length 105 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 106 for bucket 25  Sorting block time: 00:00:00Returning block of 352 for bucket 24Getting block 26 of 58  Reserving size (388) for bucket 26Getting block 27 of 58  Calculating Z arrays for bucket 26  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 26: 10%  bucket 27: 20%  bucket 26: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 26: 70%  bucket 27: 70%  bucket 26: 80%  bucket 27: 80%  bucket 26: 90%  bucket 27: 90%  bucket 26: 100%  bucket 27: 100%  Sorting block of length 354 for bucket 26  Sorting block of length 334 for bucket 27  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 355 for bucket 26  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 58  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 58  Entering block accumulator loop for bucket 28:  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 29: 30%  bucket 28: 30%  bucket 29: 40%  bucket 28: 40%  bucket 29: 50%  bucket 28: 50%  bucket 29: 60%  bucket 29: 70%  bucket 28: 60%  bucket 29: 80%  bucket 29: 90%  bucket 28: 70%  bucket 29: 100%  Sorting block of length 289 for bucket 29  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 253 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 290 for bucket 29  Sorting block time: 00:00:00Returning block of 254 for bucket 28Getting block 30 of 58  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%Getting block 31 of 58  bucket 30: 30%  Reserving size (388) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 58  Reserving size (388) for bucket 32  Entering block accumulator loop for bucket 31:  Calculating Z arrays for bucket 32  bucket 30: 40%  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 30: 50%  bucket 31: 20%  bucket 32: 20%  bucket 30: 60%  bucket 31: 30%  bucket 32: 30%  bucket 30: 70%  bucket 32: 40%  bucket 30: 80%  bucket 32: 50%  bucket 31: 40%  bucket 30: 90%  bucket 32: 60%  bucket 30: 100%  bucket 32: 70%  bucket 31: 50%  Sorting block of length 345 for bucket 30  (Using difference cover)  bucket 32: 80%  bucket 31: 60%  bucket 32: 90%  bucket 31: 70%  bucket 32: 100%  Sorting block of length 155 for bucket 32  (Using di..ucket 24: 50%  bucket 23: 40%  bucket 24: 60%  bucket 23: 50%  bucket 24: 70%  bucket 24: 80%  bucket 23: 60%  bucket 24: 90%  bucket 23: 70%  bucket 24: 100%  Sorting block of length 245 for bucket 24  (Using difference cover)  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 349 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 246 for bucket 24  Sorting block time: 00:00:00Returning block of 350 for bucket 23Getting block 25 of 57  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%Getting block 26 of 57  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 40%  Entering block accumulator loop for bucket 26:  bucket 25: 50%  bucket 26: 10%  bucket 25: 60%  bucket 25: 70%  bucket 26: 20%  bucket 25: 80%  bucket 26: 30%  bucket 25: 90%  bucket 26: 40%  bucket 25: 100%  bucket 26: 50%  Sorting block of length 286 for bucket 25  (Using difference cover)  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  Sorting block time: 00:00:00Returning block of 287 for bucket 25  bucket 26: 90%  bucket 26: 100%  Sorting block of length 384 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 26Getting block 27 of 57  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:Getting block 28 of 57  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 28: 60%  bucket 27: 70%  bucket 28: 70%  bucket 27: 80%  bucket 28: 80%  bucket 27: 90%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 359 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 387 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 28  Sorting block time: 00:00:00Returning block of 360 for bucket 27Getting block 29 of 57  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 195 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 29Getting block 30 of 57  Reserving size (388) for bucket 30Getting block 31 of 57  Calculating Z arrays for bucket 30  Reserving size (388) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 30: 30%  bucket 31: 60%  bucket 31: 70%  bucket 30: 40%  bucket 31: 80%  bucket 30: 50%  bucket 31: 90%  bucket 30: 60%  bucket 31: 100%  bucket 30: 70%  Sorting block of length 310 for bucket 31  (Using difference cover)  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 257 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 311 for bucket 31  Sorting block time: 00:00:00Returning block of 258 for bucket 30Getting block 32 of 57  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:Getting block 33 of 57  bucket 32: 10%  Reserving size (388) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 32: 20%  bucket 32: 30%  bucket 33: 10%  bucket 32: 40%  bucket 33: 20%  bucket 33: 30%  bucket 32: 50%  bucket 33: 40%  bucket 32: 60%  bucket 33: 50%  bucket 32: 70%  bucket 33: 60%  bucket 32: 80%  bucket 33: 70%  bucket 32: 90%  bucket 33: 80%  bucket 32: 100%  Sorting block of length 219 for bucket 32  (Using difference cover)  bucket 33: 90%  bucket 33: 100%  Sorting block of length 387 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 220 for bucket 32  Sorting block time: 00:00:00Returning block of 388 for bucket 33Getting block 34 of 57  Reserving size (388) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 57  Entering block accumulator loop for bucket 34:  Reserving size (388) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 34: 10%  bucket 35: 10%  bucket 34: 20%  bucket 35: 20%  bucket 35: 30%  bucket 34: 30%  bucket 35: 40%  bucket 34: 40%  bucket 35: 50%  bucket 34: 50%  bucket 35: 60%  bucket 34: 60%  bucket 35: 70%  bucket 34: 70%  bucket 35: 80%  bucket 34: 80%  bucket 34: 90%  bucket 35: 90%  bucket 35: 100%  bucket 34: 100%  Sorting block of length 350 for bucket 35  (Using difference cover)  Sorting block of length 275 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 276 for bucket 34  Sorting block time: 00:00:00Returning block of 351 for bucket 35Getting block 36 of 57  Reserving size (388) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 150 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 151 for bucket 36Getting block 37 of 57  Reserving size (388) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:Getting block 38 of 57  Reserving size (388) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 38: 10%  bucket 38: 20%  bucket 37: 30%  bucket 38: 30%  bucket 37: 40%  bucket 38: 40%  bucket 38: 50%  bucket 37: 50%  bucket 38: 60%  bucket 38: 70%  bucket 37: 60%  bucket 38: 80%  bucket 37: 70%  bucket 38: 90%  bucket 37: 80%  bucket 38: 100%  Sorting block of length 337 for bucket 38  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 267 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 338 for bucket 38  Sorting block time: 00:00:00Returning block of 268 for bucket 37Getting block 39 of 57  Reserving size (388) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%Getting block 40 of 57  bucket 39: 50%  Reserving size (388) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 60%  Entering block accumulator loop for bucket 40:  bucket 39: 70%  bucket 40: 10%  bucket 39: 80%  bucket 39: 90%  bucket 40: 20%  bucket 39: 100%  Sorting block of length 387 for bucket 39  (Using difference cover)  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  Sorting block time: 00:00:00Returning block of 388 for bucket 39  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 379 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 380 for bucket 40Getting block 41 of 57  Reserving size (388) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%Getting block 42 of 57  Reserving size (388) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 40%  Entering block accumulator loop for bucket 42:  bucket 41: 50%  bucket 42: 10%  bucket 41: 60%  bucket 41: 70%  bucket 42: 20%  bucket 42: 30%  bucket 41: 80%  bucket 42: 40%  bucket 41: 90%  bucket 42: 50%  bucket 41: 100%  Sorting block of length 330 for bucket 41  (Using difference cover)  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  Sorting block time: 00:00:00Returning block of 331 for bucket 41  bucket 42: 100%  Sorting block of length 188 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 189 for bucket 42Getting block 43 of 57  Reserving size (388) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 321 for bucket 43  (Using difference cover)Getting block 44 of 57  Reserving size (388) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  Sorting block time: 00:00:00Returning block of 322 for bucket 43  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 366 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 367 for bucket 44Getting block 45 of 57  Reserving size (388) for bucket 45Getting block 46 of 57  Calculating Z arrays for bucket 45  Reserving size (388) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 45:  Entering block accumulator loop for bucket 46:  bucket 45: 10%  bucket 46: 10%  bucket 45: 20%  bucket 46: 20%  bucket 45: 30%  bucket 45: 40%  bucket 46: 30%  bucket 45: 50%  bucket 46: 40%  bucket 45: 60%  bucket 46: 50%  bucket 45: 70%  bucket 46: 60%  bucket 46: 70%  bucket 45: 80%  bucket 45: 90%  bucket 46: 80%  bucket 45: 100%  Sorting block of length 365 for bucket 45  (Using difference cover)  bucket 46: 90%  bucket 46: 100%  Sorting block of length 253 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 366 for bucket 45  Sorting block time: 00:00:00Returning block of 254 for bucket 46Getting block 47 of 57  Reserving size (388) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 57  Entering block accumulator loop for bucket 47:  Reserving size (388) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 47: 10%  bucket 48: 10%  bucket 47: 20%  bucket 48: 20%  bucket 47: 30%  bucket 48: 30%  bucket 47: 40%  bucket 48: 40%  bucket 47: 50%  bucket 48: 50%  bucket 47: 60%  bucket 48: 60%  bucket 47: 70%  bucket 48: 70%  bucket 47: 80%  bucket 48: 80%  bucket 47: 90%  bucket 48: 90%  bucket 48: 100%  bucket 47: 100%  Sorting block of length 384 for bucket 48  Sorting block of length 217 for bucket 47  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 218 for bucket 47  Sorting block time: 00:00:00Returning block of 385 for bucket 48Getting block 49 of 57  Reserving size (388) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 112 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 49Getting block 51 of 57Getting block 50 of 57  Reserving size (388) for bucket 51  Reserving size (388) for bucket 50  Calculating Z arrays for bucket 51  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 50:  bucket 51: 10%  bucket 50: 10%  bucket 51: 20%  bucket 51: 30%  bucket 50: 20%  bucket 51: 40%  bucket 50: 30%  bucket 51: 50%  bucket 51: 60%  bucket 50: 40%  bucket 51: 70%  bucket 50: 50%  bucket 51: 80%  bucket 50: 60%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 350 for bucket 51  (Using difference cover)  bucket 50: 70%  bucket 50: 80%  Sorting block time: 00:00:00Returning block of 351 for bucket 51  bucket 50: 90%  bucket 50: 100%  Sorting block of length 275 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 276 for bucket 50Getting block 52 of 57  Reserving size (388) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 57  Entering block accumulator loop for bucket 52:  Reserving size (388) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 52: 10%  bucket 52: 20%  bucket 53: 10%  bucket 52: 30%  bucket 53: 20%  bucket 52: 40%  bucket 53: 30%  bucket 52: 50%  bucket 53: 40%  bucket 53: 50%  bucket 52: 60%  bucket 53: 60%  bucket 52: 70%  bucket 53: 70%  bucket 52: 80%  bucket 53: 80%  bucket 52: 90%  bucket 53: 90%  bucket 52: 100%  Sorting block of length 378 for bucket 52  (Using difference cover)  bucket 53: 100%  Sorting block of length 370 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 379 for bucket 52  Sorting block time: 00:00:00Returning block of 371 for bucket 53Getting block 54 of 57  Reserving size (388) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 237 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 238 for bucket 54Getting block 55 of 57  Reserving size (388) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 57  Entering block accumulator loop for bucket 55:  Reserving size (388) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 55: 10%  bucket 56: 10%  bucket 55: 20%  bucket 56: 20%  bucket 55: 30%  bucket 56: 30%  bucket 55: 40%  bucket 56: 40%  bucket 56: 50%  bucket 55: 50%  bucket 56: 60%  bucket 55: 60%  bucket 56: 70%  bucket 55: 70%  bucket 56: 80%  bucket 55: 80%  bucket 56: 90%  bucket 55: 90%  bucket 56: 100%  Sorting block of length 270 for bucket 56  (Using difference cover)  bucket 55: 100%  Sorting block of length 344 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 271 for bucket 56  Sorting block time: 00:00:00Returning block of 345 for bucket 55Getting block 57 of 57  Reserving size (388) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 132 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 133 for bucket 57Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmpWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmpRe-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL indexRenaming genome.3.bt2.tmp to genome.3.bt2Renaming genome.4.bt2.tmp to genome.4.bt2Renaming genome.1.bt2.tmp to genome.1.bt2Renaming genome.2.bt2.tmp to genome.2.bt2Renaming genome.rev.1.bt2.tmp to genome.rev.1.bt2Renaming genome.rev.2.bt2.tmp to genome.rev.2.bt2100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #9)" name="8" time="22.930687427520752">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 8, "time_seconds": 22.930687427520752, "tool_id": "bowtie2", "tool_version": "2.5.3+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #10)" name="9" time="40.602914333343506">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 32  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/9/2/b/dataset_92b0d2e3-e64d-4288-9d0e-2c3df079aa8c.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 517Using parameters --bmax 388 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 86 sample suffixesGenerating random suffixesQSorting 86 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 86 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 12, merged 41; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 6; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 5, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 284.672 (target: 387)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 58  Reserving size (388) for bucket 1Getting block 2 of 58Getting block 3 of 58Getting block 4 of 58  Calculating Z arrays for bucket 1  Reserving size (388) for bucket 2  Reserving size (388) for bucket 3Getting block 5 of 58  Reserving size (388) for bucket 4Getting block 6 of 58  Calculating Z arrays for bucket 2Getting block 7 of 58  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Reserving size (388) for bucket 5  Calculating Z arrays for bucket 4  Reserving size (388) for bucket 6  Entering block accumulator loop for bucket 2:  Reserving size (388) for bucket 7  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 4:  bucket 1: 10%  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 2: 10%  Entering block accumulator loop for bucket 7:  bucket 3: 10%  bucket 1: 20%  bucket 4: 10%  bucket 5: 10%  bucket 2: 20%  bucket 3: 20%  bucket 1: 30%  bucket 7: 10%  bucket 6: 10%  bucket 2: 30%  bucket 4: 20%  bucket 3: 30%  bucket 1: 40%  bucket 5: 20%  bucket 7: 20%  bucket 2: 40%  bucket 6: 20%  bucket 1: 50%  bucket 4: 30%  bucket 3: 40%  bucket 5: 30%  bucket 2: 50%  bucket 1: 60%  bucket 7: 30%  bucket 6: 30%  bucket 4: 40%  bucket 3: 50%  bucket 1: 70%  bucket 2: 60%  bucket 5: 40%  bucket 7: 40%  bucket 6: 40%  bucket 4: 50%  bucket 1: 80%  bucket 3: 60%  bucket 2: 70%  bucket 5: 50%  bucket 1: 90%  bucket 6: 50%  bucket 7: 50%  bucket 4: 60%  bucket 3: 70%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 355 for bucket 1  (Using difference cover)  bucket 6: 60%  bucket 5: 60%  bucket 3: 80%  bucket 4: 70%  bucket 2: 90%  bucket 7: 60%  bucket 6: 70%  bucket 5: 70%  bucket 2: 100%  bucket 4: 80%  bucket 3: 90%  Sorting block of length 165 for bucket 2  (Using difference cover)  bucket 7: 70%  bucket 6: 80%  bucket 5: 80%  bucket 3: 100%  bucket 4: 90%  Sorting block of length 370 for bucket 3  (Using difference cover)  bucket 6: 90%  bucket 7: 80%  bucket 4: 100%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 328 for bucket 4  (Using difference cover)  bucket 7: 90%  Sorting block of length 339 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 203 for bucket 5  (Using difference cover)  bucket 7: 100%  Sorting block of length 368 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 356 for bucket 1  Sorting block time: 00:00:00Returning block of 329 for bucket 4  Sorting block time: 00:00:00Returning block of 340 for bucket 6  Sorting block time: 00:00:00Returning block of 369 for bucket 7  Sorting block time: 00:00:00Returning block of 166 for bucket 2  Sorting block time: 00:00:00Returning block of 371 for bucket 3  Sorting block time: 00:00:00Returning block of 204 for bucket 5Getting block 8 of 58  Reserving size (388) for bucket 8Getting block 9 of 58  Calculating Z arrays for bucket 8  Reserving size (388) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 58  Entering block accumulator loop for bucket 8:  Reserving size (388) for bucket 10  bucket 9: 10%  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 8: 10%  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 8: 20%  bucket 9: 40%  bucket 10: 20%  bucket 8: 30%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 8: 40%  bucket 10: 50%  bucket 9: 60%  bucket 8: 50%  bucket 10: 60%  bucket 9: 70%  bucket 8: 60%  bucket 10: 70%  bucket 9: 80%  bucket 9: 90%  bucket 10: 80%  bucket 8: 70%  bucket 9: 100%  bucket 10: 90%  bucket 8: 80%  Sorting block of length 339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 357 for bucket 10  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 171 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 172 for bucket 8  Sorting block time: 00:00:00Returning block of 340 for bucket 9  Sorting block time: 00:00:00Returning block of 358 for bucket 10Getting block 11 of 58  Reserving size (388) for bucket 11Getting block 12 of 58  Calculating Z arrays for bucket 11  Reserving size (388) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 305 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 185 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 306 for bucket 11  Sorting block time: 00:00:00Returning block of 186 for bucket 12Getting block 13 of 58  Reserving size (388) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 58  Reserving size (388) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 40%  bucket 14: 10%  bucket 13: 50%  bucket 14: 20%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 14: 40%  bucket 13: 80%  bucket 14: 50%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  bucket 14: 70%  Sorting block of length 282 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 339 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 283 for bucket 13  Sorting block time: 00:00:00Returning block of 340 for bucket 14Getting block 15 of 58  Reserving size (388) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:Getting block 16 of 58  Reserving size (388) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 16: 20%  bucket 15: 50%  bucket 16: 30%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 16: 60%  bucket 15: 70%  bucket 16: 70%  bucket 15: 80%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 379 for bucket 16  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 241 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 380 for bucket 16  Sorting block time: 00:00:00Returning block of 242 for bucket 15Getting block 17 of 58  Reserving size (388) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 215 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 216 for bucket 17Getting block 18 of 58  Reserving size (388) for bucket 18Getting block 19 of 58  Calculating Z arrays for bucket 18  Reserving size (388) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 18: 10%  bucket 19: 20%  bucket 18: 20%  bucket 19: 30%  bucket 18: 30%  bucket 19: 40%  bucket 19: 50%  bucket 18: 40%  bucket 19: 60%  bucket 18: 50%  bucket 19: 70%  bucket 19: 80%  bucket 18: 60%  bucket 19: 90%  bucket 18: 70%  bucket 19: 100%  Sorting block of length 334 for bucket 19  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 378 for bucket 18  Sorting block time: 00:00:00  (Using difference cover)Returning block of 335 for bucket 19  Sorting block time: 00:00:00Returning block of 379 for bucket 18Getting block 20 of 58  Reserving size (388) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 313 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 20Getting block 21 of 58  Reserving size (388) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 210 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 211 for bucket 21Getting block 22 of 58  Reserving size (388) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 58  bucket 22: 10%  Reserving size (388) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 22: 40%  bucket 23: 20%  bucket 22: 50%  bucket 23: 30%  bucket 22: 60%  bucket 23: 40%  bucket 22: 70%  bucket 23: 50%  bucket 22: 80%  bucket 23: 60%  bucket 22: 90%  bucket 23: 70%  bucket 22: 100%  Sorting block of length 386 for bucket 22  (Using difference cover)  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 238 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 387 for bucket 22  Sorting block time: 00:00:00Returning block of 239 for bucket 23Getting block 24 of 58  Reserving size (388) for bucket 24Getting block 25 of 58  Calculating Z arrays for bucket 24  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 24: 10%  bucket 25: 20%  bucket 24: 20%  bucket 25: 30%  bucket 24: 30%  bucket 25: 40%  bucket 25: 50%  bucket 24: 40%  bucket 25: 60%  bucket 24: 50%  bucket 25: 70%  bucket 25: 80%  bucket 24: 60%  bucket 25: 90%  bucket 24: 70%  bucket 25: 100%  Sorting block of length 105 for bucket 25  (Using difference cover)  bucket 24: 80%  Sorting block time: 00:00:00Returning block of 106 for bucket 25  bucket 24: 90%  bucket 24: 100%  Sorting block of length 351 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 352 for bucket 24Getting block 26 of 58  Reserving size (388) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 354 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 355 for bucket 26Getting block 27 of 58  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:Getting block 28 of 58  bucket 27: 10%  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 28: 30%  bucket 27: 40%  bucket 28: 40%  bucket 28: 50%  bucket 27: 50%  bucket 28: 60%  bucket 27: 60%  bucket 28: 70%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  Sorting block of length 253 for bucket 28  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 254 for bucket 28  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 29 of 58  Reserving size (388) for bucket 29Getting block 30 of 58  Calculating Z arrays for bucket 29  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 30: 20%  bucket 29: 20%  bucket 30: 30%  bucket 29: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 30: 60%  bucket 29: 50%  bucket 30: 70%  bucket 29: 60%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 29: 80%  bucket 29: 90%  bucket 30: 100%  Sorting block of length 345 for bucket 30  (Using difference cover)  bucket 29: 100%  Sorting block of length 289 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 290 for bucket 29  Sorting block time: 00:00:00Returning block of 346 for bucket 30Getting block 31 of 58  Reserving size (388) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:Getting block 32 of 58  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 31: 20%  bucket 32: 10%  bucket 31: 30%  bucket 32: 20%  bucket 32: 30%  bucket 31: 40%  bucket 32: 40%  bucket 31: 50%  bucket 32: 50%  bucket 31: 60%  bucket 32: 60%  bucket 31: 70%  bucket 31: 80%  bucket 32: 70%  bucket 31: 90%  buc..0:00Returning block of 350 for bucket 23Getting block 24 of 57  Reserving size (388) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%Getting block 25 of 57  Reserving size (388) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 20%  Entering block accumulator loop for bucket 25:  bucket 24: 30%  bucket 25: 10%  bucket 24: 40%  bucket 25: 20%  bucket 24: 50%  bucket 25: 30%  bucket 24: 60%  bucket 25: 40%  bucket 24: 70%  bucket 25: 50%  bucket 24: 80%  bucket 25: 60%  bucket 24: 90%  bucket 25: 70%  bucket 24: 100%  Sorting block of length 245 for bucket 24  (Using difference cover)  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 286 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 246 for bucket 24  Sorting block time: 00:00:00Returning block of 287 for bucket 25Getting block 26 of 57  Reserving size (388) for bucket 26Getting block 27 of 57  Calculating Z arrays for bucket 26  Reserving size (388) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 26: 10%  bucket 27: 20%  bucket 26: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 26: 70%  bucket 27: 70%  bucket 27: 80%  bucket 26: 80%  bucket 27: 90%  bucket 26: 90%  bucket 27: 100%  Sorting block of length 359 for bucket 27  (Using difference cover)  bucket 26: 100%  Sorting block of length 384 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 360 for bucket 27  Sorting block time: 00:00:00Returning block of 385 for bucket 26Getting block 28 of 57  Reserving size (388) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%Getting block 29 of 57  bucket 28: 40%  Reserving size (388) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 28: 50%  bucket 29: 10%  bucket 28: 60%  bucket 29: 20%  bucket 28: 70%  bucket 29: 30%  bucket 29: 40%  bucket 28: 80%  bucket 29: 50%  bucket 28: 90%  bucket 29: 60%  bucket 28: 100%  bucket 29: 70%  Sorting block of length 387 for bucket 28  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 195 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 28  Sorting block time: 00:00:00Returning block of 196 for bucket 29Getting block 30 of 57  Reserving size (388) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 257 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 258 for bucket 30Getting block 31 of 57  Reserving size (388) for bucket 31Getting block 32 of 57  Calculating Z arrays for bucket 31  Reserving size (388) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 31: 10%  bucket 32: 20%  bucket 31: 20%  bucket 32: 30%  bucket 32: 40%  bucket 31: 30%  bucket 32: 50%  bucket 31: 40%  bucket 32: 60%  bucket 32: 70%  bucket 31: 50%  bucket 32: 80%  bucket 32: 90%  bucket 31: 60%  bucket 32: 100%  Sorting block of length 219 for bucket 32  (Using difference cover)  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  Sorting block time: 00:00:00Returning block of 220 for bucket 32  bucket 31: 100%  Sorting block of length 310 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 311 for bucket 31Getting block 33 of 57  Reserving size (388) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%Getting block 34 of 57  bucket 33: 30%  Reserving size (388) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 33: 40%  bucket 34: 10%  bucket 33: 50%  bucket 34: 20%  bucket 33: 60%  bucket 34: 30%  bucket 33: 70%  bucket 34: 40%  bucket 33: 80%  bucket 34: 50%  bucket 33: 90%  bucket 34: 60%  bucket 33: 100%  bucket 34: 70%  Sorting block of length 387 for bucket 33  (Using difference cover)  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 275 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 33  Sorting block time: 00:00:00Returning block of 276 for bucket 34Getting block 35 of 57Getting block 36 of 57  Reserving size (388) for bucket 35  Reserving size (388) for bucket 36  Calculating Z arrays for bucket 35  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 36: 20%  bucket 35: 20%  bucket 36: 30%  bucket 35: 30%  bucket 35: 40%  bucket 36: 40%  bucket 35: 50%  bucket 36: 50%  bucket 35: 60%  bucket 36: 60%  bucket 35: 70%  bucket 36: 70%  bucket 35: 80%  bucket 36: 80%  bucket 35: 90%  bucket 36: 90%  bucket 35: 100%  Sorting block of length 350 for bucket 35  (Using difference cover)  bucket 36: 100%  Sorting block of length 150 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 351 for bucket 35  Sorting block time: 00:00:00Returning block of 151 for bucket 36Getting block 37 of 57  Reserving size (388) for bucket 37Getting block 38 of 57  Calculating Z arrays for bucket 37  Reserving size (388) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 37: 10%  bucket 38: 20%  bucket 37: 20%  bucket 38: 30%  bucket 37: 30%  bucket 38: 40%  bucket 37: 40%  bucket 38: 50%  bucket 37: 50%  bucket 38: 60%  bucket 37: 60%  bucket 38: 70%  bucket 37: 70%  bucket 38: 80%  bucket 38: 90%  bucket 37: 80%  bucket 37: 90%  bucket 38: 100%  Sorting block of length 337 for bucket 38  (Using difference cover)  bucket 37: 100%  Sorting block of length 267 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 268 for bucket 37  Sorting block time: 00:00:00Returning block of 338 for bucket 38Getting block 39 of 57  Reserving size (388) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:Getting block 40 of 57  Reserving size (388) for bucket 40  bucket 39: 10%  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 40: 50%  bucket 39: 70%  bucket 40: 60%  bucket 39: 80%  bucket 40: 70%  bucket 39: 90%  bucket 40: 80%  bucket 40: 90%  bucket 39: 100%  Sorting block of length 387 for bucket 39  (Using difference cover)  bucket 40: 100%  Sorting block of length 379 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 388 for bucket 39  Sorting block time: 00:00:00Returning block of 380 for bucket 40Getting block 41 of 57  Reserving size (388) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 330 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 331 for bucket 41Getting block 42 of 57  Reserving size (388) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 57  Entering block accumulator loop for bucket 42:  Reserving size (388) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 42: 10%  bucket 43: 10%  bucket 42: 20%  bucket 43: 20%  bucket 42: 30%  bucket 43: 30%  bucket 42: 40%  bucket 43: 40%  bucket 42: 50%  bucket 42: 60%  bucket 43: 50%  bucket 42: 70%  bucket 43: 60%  bucket 42: 80%  bucket 43: 70%  bucket 42: 90%  bucket 43: 80%  bucket 42: 100%  Sorting block of length 188 for bucket 42  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 321 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 189 for bucket 42  Sorting block time: 00:00:00Returning block of 322 for bucket 43Getting block 44 of 57  Reserving size (388) for bucket 44Getting block 45 of 57  Calculating Z arrays for bucket 44  Reserving size (388) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  Entering block accumulator loop for bucket 45:  bucket 44: 10%  bucket 45: 10%  bucket 44: 20%  bucket 45: 20%  bucket 44: 30%  bucket 45: 30%  bucket 44: 40%  bucket 45: 40%  bucket 44: 50%  bucket 45: 50%  bucket 45: 60%  bucket 44: 60%  bucket 45: 70%  bucket 44: 70%  bucket 45: 80%  bucket 44: 80%  bucket 45: 90%  bucket 44: 90%  bucket 45: 100%  Sorting block of length 365 for bucket 45  (Using difference cover)  bucket 44: 100%  Sorting block of length 366 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 367 for bucket 44  Sorting block time: 00:00:00Returning block of 366 for bucket 45Getting block 46 of 57  Reserving size (388) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:Getting block 47 of 57  bucket 46: 10%  Reserving size (388) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 46: 20%  bucket 46: 30%  bucket 47: 10%  bucket 46: 40%  bucket 47: 20%  bucket 46: 50%  bucket 47: 30%  bucket 46: 60%  bucket 46: 70%  bucket 47: 40%  bucket 46: 80%  bucket 47: 50%  bucket 46: 90%  bucket 47: 60%  bucket 46: 100%  Sorting block of length 253 for bucket 46  (Using difference cover)  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  Sorting block time: 00:00:00Returning block of 254 for bucket 46  bucket 47: 100%  Sorting block of length 217 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 218 for bucket 47Getting block 48 of 57  Reserving size (388) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:Getting block 49 of 57  Reserving size (388) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 10%  Entering block accumulator loop for bucket 49:  bucket 48: 20%  bucket 49: 10%  bucket 48: 30%  bucket 49: 20%  bucket 48: 40%  bucket 49: 30%  bucket 48: 50%  bucket 49: 40%  bucket 48: 60%  bucket 49: 50%  bucket 48: 70%  bucket 49: 60%  bucket 48: 80%  bucket 49: 70%  bucket 48: 90%  bucket 49: 80%  bucket 48: 100%  Sorting block of length 384 for bucket 48  (Using difference cover)  bucket 49: 90%  bucket 49: 100%  Sorting block of length 112 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 385 for bucket 48  Sorting block time: 00:00:00Returning block of 113 for bucket 49Getting block 50 of 57  Reserving size (388) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 275 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 276 for bucket 50Getting block 51 of 57  Reserving size (388) for bucket 51Getting block 52 of 57  Calculating Z arrays for bucket 51  Reserving size (388) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 51: 10%  bucket 52: 10%  bucket 51: 20%  bucket 52: 20%  bucket 51: 30%  bucket 52: 30%  bucket 51: 40%  bucket 52: 40%  bucket 51: 50%  bucket 52: 50%  bucket 51: 60%  bucket 51: 70%  bucket 52: 60%  bucket 51: 80%  bucket 52: 70%  bucket 51: 90%  bucket 52: 80%  bucket 51: 100%  Sorting block of length 350 for bucket 51  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 378 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 351 for bucket 51  Sorting block time: 00:00:00Returning block of 379 for bucket 52Getting block 53 of 57  Reserving size (388) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 57  Reserving size (388) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 54: 10%  bucket 53: 30%  bucket 53: 40%  bucket 54: 20%  bucket 53: 50%  bucket 54: 30%  bucket 53: 60%  bucket 54: 40%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 54: 90%  bucket 53: 100%  Sorting block of length 370 for bucket 53  (Using difference cover)  bucket 54: 100%  Sorting block of length 237 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 371 for bucket 53  Sorting block time: 00:00:00Returning block of 238 for bucket 54Getting block 55 of 57  Reserving size (388) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:Getting block 56 of 57  Reserving size (388) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 56: 10%  bucket 55: 30%  bucket 56: 20%  bucket 55: 40%  bucket 56: 30%  bucket 56: 40%  bucket 55: 50%  bucket 55: 60%  bucket 56: 50%  bucket 55: 70%  bucket 56: 60%  bucket 55: 80%  bucket 56: 70%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  Sorting block of length 344 for bucket 55  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 270 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 271 for bucket 56  Sorting block time: 00:00:00Returning block of 345 for bucket 55Getting block 57 of 57  Reserving size (388) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 132 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 133 for bucket 57Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2.tmpWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2.tmpRe-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL indexRenaming genome.3.bt2.tmp to genome.3.bt2Renaming genome.4.bt2.tmp to genome.4.bt2Renaming genome.1.bt2.tmp to genome.1.bt2Renaming genome.2.bt2.tmp to genome.2.bt2Renaming genome.rev.1.bt2.tmp to genome.rev.1.bt2Renaming genome.rev.2.bt2.tmp to genome.rev.2.bt2100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="datamash_reverse (Test #1)" name="0" time="69.99027180671692">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_plot_enrichment (Test #1)" name="0" time="0.1432182788848877">
        
            <error type="error" message="Input staging problem: Test input file (bowtie2 test1.bam) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (bowtie2 test1.bam) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.1432182788848877, "tool_id": "deeptools_plot_enrichment", "tool_version": "3.5.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="ivar_filtervariants (Test #1)" name="0" time="42.50485897064209">
        
            
            <system-out><![CDATA[
            Header format of ./var_0.tsv did not match! Please use files generated using "ivar variants" command.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="lofreq_indelqual (Test #1)" name="0" time="46.18414258956909">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="lofreq_indelqual (Test #2)" name="1" time="39.290780544281006">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="lofreq_indelqual (Test #3)" name="2" time="12.629260063171387">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 12.629260063171387, "tool_id": "lofreq_indelqual", "tool_version": "2.1.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="medaka_consensus_pipeline (Test #1)" name="0" time="93.26192426681519">
        
            
            <system-out><![CDATA[
            Checking program versionsThis is medaka 1.7.2Program    Version    Required   Pass     bcftools   1.15.1     1.11       True     bgzip      1.16       1.11       True     minimap2   2.24       2.11       True     samtools   1.15.1     1.11       True     tabix      1.16       1.11       True     Aligning basecalls to draftCreating fai index file /galaxy/server/database/jobs_directory/000/77/working/input_assembly.fa.faiCreating mmi index file /galaxy/server/database/jobs_directory/000/77/working/input_assembly.fa.map-ont.mmi[M::mm_idx_gen::0.004*0.92] collected minimizers[M::mm_idx_gen::0.005*1.05] sorted minimizers[M::main::0.006*1.04] loaded/built the index for 1 target sequence(s)[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*1.04] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512; total length: 3792[M::main] Version: 2.24-r1122[M::main] CMD: minimap2 -I 16G -x map-ont -d /galaxy/server/database/jobs_directory/000/77/working/input_assembly.fa.map-ont.mmi /galaxy/server/database/jobs_directory/000/77/working/input_assembly.fa[M::main] Real time: 0.014 sec; CPU: 0.007 sec; Peak RSS: 0.003 GB[M::main::0.004*1.06] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*1.06] mid_occ = 10[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.004*1.06] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512; total length: 3792[M::worker_pipeline::0.033*3.69] mapped 125 sequences[M::main] Version: 2.24-r1122[M::main] CMD: minimap2 -x map-ont --secondary=no -L --MD -A 2 -B 4 -O 4,24 -E 2,1 -t 8 -a /galaxy/server/database/jobs_directory/000/77/working/input_assembly.fa.map-ont.mmi /galaxy/server/database/objects/b/3/5/dataset_b35fd596-f455-470d-9dbc-01bd730bfd70.dat[M::main] Real time: 0.035 sec; CPU: 0.122 sec; Peak RSS: 0.015 GBRunning medaka consensus[18:53:30 - Predict] Reducing threads to 2, anymore is a waste.[18:53:30 - Predict] It looks like you are running medaka without a GPU and attempted to set a high number of threads. We have scaled this down to an optimal number. If you wish to improve performance please see https://nanoporetech.github.io/medaka/installation.html#improving-parallelism.[18:53:30 - Predict] Setting tensorflow inter/intra-op threads to 2/1.[18:53:30 - Predict] Processing region(s): 4:0-3792[18:53:30 - Predict] Using model: /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_high_g360_model.hdf5.[18:53:30 - Predict] Processing 1 long region(s) with batching.[18:53:30 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_high_g360_model.hdf5[18:53:30 - BAMFile] Creating pool of 16 BAM file sets.[18:53:30 - Sampler] Initializing sampler for consensus of region 4:0-3792.[18:53:30 - PWorker] Running inference for 0.0M draft bases.[18:53:30 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)[18:53:30 - Sampler] Took 0.19s to make features.[18:53:30 - Sampler] Region 4:0.0-3791.0 (7485 positions) is smaller than inference chunk length 10000, quarantining.[18:53:30 - PWorker] Processed 0 batches[18:53:30 - PWorker] All done, 1 remainder regions.[18:53:30 - Predict] Processing 1 short region(s).[18:53:30 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_high_g360_model.hdf5[18:53:31 - Sampler] Initializing sampler for consensus of region 4:0-3792.[18:53:31 - PWorker] Running inference for 0.0M draft bases.[18:53:32 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)[18:53:32 - Sampler] Took 0.68s to make features.[18:53:47 - PWorker] Batches in cache: 1.[18:53:47 - PWorker] 88.7% Done (0.0/0.0 Mbases) in 16.1s[18:53:47 - PWorker] Processed 1 batches[18:53:47 - PWorker] All done, 0 remainder regions.[18:53:47 - Predict] Finished processing all regions.[18:53:50 - DataIndx] Loaded 1/1 (100.00%) sample files.[18:53:50 - DataIndx] Loaded 1/1 (100.00%) sample files.Polished assembly written to results/consensus.fasta, have a nice day.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="medaka_consensus_pipeline (Test #2)" name="1" time="72.94029331207275">
        
            
            <system-out><![CDATA[
            Checking program versionsThis is medaka 1.7.2Program    Version    Required   Pass     bcftools   1.15.1     1.11       True     bgzip      1.16       1.11       True     minimap2   2.24       2.11       True     samtools   1.15.1     1.11       True     tabix      1.16       1.11       True     Aligning basecalls to draftCreating fai index file /galaxy/server/database/jobs_directory/000/80/working/input_assembly.fa.faiCreating mmi index file /galaxy/server/database/jobs_directory/000/80/working/input_assembly.fa.map-ont.mmi[M::mm_idx_gen::0.004*0.82] collected minimizers[M::mm_idx_gen::0.005*0.93] sorted minimizers[M::main::0.005*0.94] loaded/built the index for 1 target sequence(s)[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*0.94] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512; total length: 3792[M::main] Version: 2.24-r1122[M::main] CMD: minimap2 -I 16G -x map-ont -d /galaxy/server/database/jobs_directory/000/80/working/input_assembly.fa.map-ont.mmi /galaxy/server/database/jobs_directory/000/80/working/input_assembly.fa[M::main] Real time: 0.012 sec; CPU: 0.006 sec; Peak RSS: 0.003 GB[M::main::0.004*1.05] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.05] mid_occ = 10[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.05] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512; total length: 3792[M::worker_pipeline::0.038*3.57] mapped 125 sequences[M::main] Version: 2.24-r1122[M::main] CMD: minimap2 -x map-ont --secondary=no -L --MD -A 2 -B 4 -O 4,24 -E 2,1 -t 8 -a /galaxy/server/database/jobs_directory/000/80/working/input_assembly.fa.map-ont.mmi /galaxy/server/database/objects/d/e/2/dataset_de26c61b-4619-4c9c-a8a9-6c0650ca20e5.dat[M::main] Real time: 0.040 sec; CPU: 0.135 sec; Peak RSS: 0.015 GBRunning medaka consensus[18:54:42 - Predict] Reducing threads to 2, anymore is a waste.[18:54:42 - Predict] It looks like you are running medaka without a GPU and attempted to set a high number of threads. We have scaled this down to an optimal number. If you wish to improve performance please see https://nanoporetech.github.io/medaka/installation.html#improving-parallelism.[18:54:42 - Predict] Setting tensorflow inter/intra-op threads to 2/1.[18:54:42 - Predict] Processing region(s): 4:0-3792[18:54:42 - Predict] Using model: /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_fast_g303_model.hdf5.[18:54:42 - Predict] Processing 1 long region(s) with batching.[18:54:42 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_fast_g303_model.hdf5[18:54:43 - BAMFile] Creating pool of 16 BAM file sets.[18:54:43 - Sampler] Initializing sampler for consensus of region 4:0-3792.[18:54:43 - PWorker] Running inference for 0.0M draft bases.[18:54:43 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)[18:54:43 - Sampler] Took 0.17s to make features.[18:54:43 - Sampler] Region 4:0.0-3791.0 (7485 positions) is smaller than inference chunk length 10000, quarantining.[18:54:43 - PWorker] Processed 0 batches[18:54:43 - PWorker] All done, 1 remainder regions.[18:54:43 - Predict] Processing 1 short region(s).[18:54:43 - MdlStore] filepath /usr/local/lib/python3.8/site-packages/medaka/data/r941_min_fast_g303_model.hdf5[18:54:43 - Sampler] Initializing sampler for consensus of region 4:0-3792.[18:54:43 - PWorker] Running inference for 0.0M draft bases.[18:54:44 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)[18:54:44 - Sampler] Took 0.22s to make features.[18:54:59 - PWorker] Batches in cache: 1.[18:54:59 - PWorker] 88.7% Done (0.0/0.0 Mbases) in 15.2s[18:54:59 - PWorker] Processed 1 batches[18:54:59 - PWorker] All done, 0 remainder regions.[18:54:59 - Predict] Finished processing all regions.[18:55:01 - DataIndx] Loaded 1/1 (100.00%) sample files.[18:55:01 - DataIndx] Loaded 1/1 (100.00%) sample files.Polished assembly written to results/consensus.fasta, have a nice day.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_stats (Test #1)" name="0" time="70.88858389854431">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_stats (Test #2)" name="1" time="36.77974319458008">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_stats (Test #3)" name="2" time="36.15618395805359">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_stats (Test #4)" name="3" time="26.980530261993408">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "detailed": false,  "input": {   "id": "5a28e0a72f15b173",   "src": "hda"  },  "type": "best" }, "job": {  "command_line": "poretools stats --type best  \u0027/galaxy/server/database/objects/3/0/9/dataset_309f98ae-cc76-4d9e-8c1c-a7049bcc128e.dat\u0027 \u003e \u0027/galaxy/server/database/objects/b/b/2/dataset_bb2175f3-319b-4719-b9c6-6aabce97b924.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T18:58:02.550646",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-ch2p2",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "801600816814d832",  "inputs": {   "input": {    "id": "5a28e0a72f15b173",    "src": "hda",    "uuid": "309f98ae-cc76-4d9e-8c1c-a7049bcc128e"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "27905332e3e65387",    "src": "hda",    "uuid": "bb2175f3-319b-4719-b9c6-6aabce97b924"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "detailed": "false",   "type": "\"best\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T18:58:08.104044",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 26.980530261993408, "tool_id": "poretools_stats", "tool_version": "0.6.1a1.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_stats (Test #5)" name="4" time="36.758427143096924">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="salmonquantmerge (Test #1)" name="0" time="12.157761812210083">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 12.157761812210083, "tool_id": "salmonquantmerge", "tool_version": "1.5.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #1)" name="0" time="41.48002743721008">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "bamfile": {   "id": "3b404cbb43acb3e9",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam \u0027/galaxy/server/database/objects/0/a/3/dataset_0a325f6a-62b9-420a-b839-5d1088e9267d.dat\u0027 \u0026\u0026  samtools markdup  -@ $addthreads    coordsort.sam \u0027/galaxy/server/database/objects/2/8/e/dataset_28e498e5-2308-49d6-83da-9ccbd7f1c6cf.dat\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:05:25.899877",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-zrmsp",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "75d10b3cef65700d",  "inputs": {   "bamfile": {    "id": "3b404cbb43acb3e9",    "src": "hda",    "uuid": "0a325f6a-62b9-420a-b839-5d1088e9267d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350332.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:05:32"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350332.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:05:32"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "4ed1f972f47c124d",    "src": "hda",    "uuid": "28e498e5-2308-49d6-83da-9ccbd7f1c6cf"   }  },  "params": {   "__input_ext": "\"sam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "maxlen": "\"\"",   "remove": "false",   "stats": "false",   "supp": "false"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:05:45.602869",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output: Test output file (5_markdup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 0, "time_seconds": 41.48002743721008, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #1)" name="0" time="12.58330750465393">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 12.58330750465393, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #2)" name="1" time="37.80410718917847">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "bamfile": {   "id": "78bd41a1db0fe371",   "src": "hda"  },  "remove": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam \u0027/galaxy/server/database/objects/9/b/6/dataset_9b6fd955-9f23-4e13-9833-40ddfe7533ba.dat\u0027 \u0026\u0026  samtools markdup  -@ $addthreads -r   coordsort.sam \u0027/galaxy/server/database/objects/4/7/b/dataset_47b63aa1-7347-4c45-9cd5-ba2a490ac1af.dat\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:06:08.968394",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-tzzk4",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "0fcdd13664f22b83",  "inputs": {   "bamfile": {    "id": "78bd41a1db0fe371",    "src": "hda",    "uuid": "9b6fd955-9f23-4e13-9833-40ddfe7533ba"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350371.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:06:11"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350371.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:06:11"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "bb0231288e2cd2f5",    "src": "hda",    "uuid": "47b63aa1-7347-4c45-9cd5-ba2a490ac1af"   }  },  "params": {   "__input_ext": "\"sam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "maxlen": "\"\"",   "remove": "true",   "stats": "false",   "supp": "false"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:06:23.616537",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output: Test output file (6_remove_dups.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 1, "time_seconds": 37.80410718917847, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #2)" name="1" time="35.009878396987915">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "bamfile": {   "id": "ecdfc7eeca9a2137",   "src": "hda"  },  "remove": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam \u0027/galaxy/server/database/objects/e/2/3/dataset_e235333d-b408-4703-96f3-8560eed880b6.dat\u0027 \u0026\u0026  samtools markdup  -@ $addthreads -r   coordsort.sam \u0027/galaxy/server/database/objects/2/f/4/dataset_2f42fa2a-c07a-450e-8ee1-98e9b997d4fe.dat\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:08:02.116388",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-gdwkx",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "632b3b9610ac1981",  "inputs": {   "bamfile": {    "id": "ecdfc7eeca9a2137",    "src": "hda",    "uuid": "e235333d-b408-4703-96f3-8560eed880b6"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350484.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:08:04"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350484.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:08:04"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "e8e8dfff94e635bb",    "src": "hda",    "uuid": "2f42fa2a-c07a-450e-8ee1-98e9b997d4fe"   }  },  "params": {   "__input_ext": "\"sam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "maxlen": "\"\"",   "remove": "true",   "stats": "false",   "supp": "false"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:08:16.087184",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output: Test output file (6_remove_dups.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 1, "time_seconds": 35.009878396987915, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #3)" name="2" time="27.791016340255737">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "bamfile": {   "id": "81d4278106a6b44e",   "src": "hda"  },  "supp": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/2/8/5/dataset_2851e4ad-37f3-45d6-9b7c-4e7e5a2255ef.dat\u0027 coordsort.sam \u0026\u0026  samtools markdup  -@ $addthreads   -S coordsort.sam \u0027/galaxy/server/database/objects/c/4/4/dataset_c443eca6-2b62-4ecf-a54b-5f868f659391.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:06:46.522102",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-cwmj8",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "97818703b6864c55",  "inputs": {   "bamfile": {    "id": "81d4278106a6b44e",    "src": "hda",    "uuid": "2851e4ad-37f3-45d6-9b7c-4e7e5a2255ef"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "05c2f516830e6ba6",    "src": "hda",    "uuid": "c443eca6-2b62-4ecf-a54b-5f868f659391"   }  },  "params": {   "__input_ext": "\"bam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "maxlen": "\"\"",   "remove": "false",   "stats": "false",   "supp": "true"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:06:51.365408",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 27.791016340255737, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #3)" name="2" time="36.46659469604492">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "bamfile": {   "id": "7f3c210cef6eccd4",   "src": "hda"  },  "supp": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/9/5/5/dataset_955a4a84-dab1-4b48-a680-4ac185a585e0.dat\u0027 coordsort.sam \u0026\u0026  samtools markdup  -@ $addthreads   -S coordsort.sam \u0027/galaxy/server/database/objects/b/d/0/dataset_bd07b754-07fb-4297-ad4b-3b9f091d662d.dat\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:08:37.739046",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-fwjr2",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "0a8da276dcf41f07",  "inputs": {   "bamfile": {    "id": "7f3c210cef6eccd4",    "src": "hda",    "uuid": "955a4a84-dab1-4b48-a680-4ac185a585e0"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350520.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:08:40"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350520.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:08:40"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "3126e794f0150e32",    "src": "hda",    "uuid": "bd07b754-07fb-4297-ad4b-3b9f091d662d"   }  },  "params": {   "__input_ext": "\"bam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "maxlen": "\"\"",   "remove": "false",   "stats": "false",   "supp": "true"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:08:52.664811",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output: Test output file (7_mark_supp_dup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 2, "time_seconds": 36.46659469604492, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #4)" name="3" time="35.99129843711853">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "bamfile": {   "id": "286f0ce4b06cc46b",   "src": "hda"  },  "stats": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam \u0027/galaxy/server/database/objects/a/a/e/dataset_aaede8d7-4896-4f0b-9127-9f400d902980.dat\u0027 \u0026\u0026  samtools markdup  -@ $addthreads  -s  coordsort.sam \u0027/galaxy/server/database/objects/9/1/7/dataset_917b8c27-e4ec-4053-8634-f5454985f6f2.dat\u0027 2\u003e \u0027/galaxy/server/database/objects/3/5/1/dataset_351c897c-b5c6-438d-b762-6e7e866d29ed.dat\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2025-01-31T19:07:12.443950",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-tdq75",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "42ec531131d90bdc",  "inputs": {   "bamfile": {    "id": "286f0ce4b06cc46b",    "src": "hda",    "uuid": "aaede8d7-4896-4f0b-9127-9f400d902980"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1738350435.0000000",    "title": "Job End Time",    "value": "2025-01-31 19:07:15"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1738350434.0000000",    "title": "Job Start Time",    "value": "2025-01-31 19:07:14"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "663161f031f1f7e9",    "src": "hda",    "uuid": "917b8c27-e4ec-4053-8634-f5454985f6f2"   },   "stats_output": {    "id": "a056b659177d05e3",    "src": "hda",    "uuid": "351c897c-b5c6-438d-b762-6e7e866d29ed"   }  },  "params": {   "__input_ext": "\"sam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "maxlen": "\"\"",   "remove": "false",   "stats": "true",   "supp": "false"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:07:27.359496",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output: Test output file (5_markdup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it.",  "Output stats_output:  different than expected, difference (using diff):\n( /tmp/tmpwpgoz456stats.txt v. /tmp/tmp1gk8_1_0stats.txt )\n--- local_file\n+++ history_data\n@@ -1,17 +1,5 @@\n-COMMAND: samtools markdup -@ 0 -m t -s -f /tmp/tmpo1hsz7dc/job_working_directory/000/8/outputs/dataset_9e69bd59-3165-4ede-92bf-2f438627a6a1.dat -O BAM coordsort.sam /tmp/tmpo1hsz7dc/job_working_directory/000/8/outputs/dataset_ccf59cfe-ffbd-41d5-9412-d7a7ac6e65d9.dat\n-READ: 16\n-WRITTEN: 16\n-EXCLUDED: 3\n-EXAMINED: 13\n-PAIRED: 10\n-SINGLE: 3\n-DUPLICATE PAIR: 4\n-DUPLICATE SINGLE: 2\n-DUPLICATE PAIR OPTICAL: 0\n-DUPLICATE SINGLE OPTICAL: 0\n-DUPLICATE NON PRIMARY: 0\n-DUPLICATE NON PRIMARY OPTICAL: 0\n-DUPLICATE PRIMARY TOTAL: 6\n-DUPLICATE TOTAL: 6\n-ESTIMATED_LIBRARY_SIZE: 4\n-\n+READ 16 WRITTEN 16 \n+EXCLUDED 3 EXAMINED 13\n+PAIRED 10 SINGLE 3\n+DULPICATE PAIR 4 DUPLICATE SINGLE 2\n+DUPLICATE TOTAL 6\n" ], "status": "failure", "test_index": 3, "time_seconds": 35.99129843711853, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_markdup (Test #4)" name="3" time="11.68194580078125">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 11.68194580078125, "tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_compute_graph (Test #1)" name="0" time="0.1397082805633545">
        
            <error type="error" message="Input staging problem: Test input file (run_pca.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.1397082805633545, "tool_id": "scanpy_compute_graph", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_compute_graph (Test #1)" name="0" time="0.16245174407958984">
        
            <error type="error" message="Input staging problem: Test input file (run_pca.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.16245174407958984, "tool_id": "scanpy_compute_graph", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_compute_graph (Test #2)" name="1" time="0.07258772850036621">
        
            <error type="error" message="Input staging problem: Test input file (run_pca.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error", "test_index": 1, "time_seconds": 0.07258772850036621, "tool_id": "scanpy_compute_graph", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_compute_graph (Test #2)" name="1" time="0.07377338409423828">
        
            <error type="error" message="Input staging problem: Test input file (run_pca.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error", "test_index": 1, "time_seconds": 0.07377338409423828, "tool_id": "scanpy_compute_graph", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_remove_confounders (Test #1)" name="0" time="83.70254325866699">
        
            
            <system-out><![CDATA[
            [n_obs × n_vars]-    640 × 11[obs]-    cell_type[uns]-    cell_type_colors-    highlights-    iroot
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_remove_confounders (Test #2)" name="1" time="37.30558371543884">
        
            
            <system-out><![CDATA[
            [n_obs × n_vars]-    640 × 11[obs]-    blobs
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #1)" name="0" time="42.690561294555664">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #2)" name="1" time="12.345582485198975">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 12.345582485198975, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="stringtie (Test #11)" name="10" time="23.280449390411377">
        
            <error type="error" message="parameter 'ref_builtin': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_builtin\u0027: an invalid option (None) was selected, please verify", "inputs": {  "adv|fraction": "0.15",  "guide|guide_source|guide_gff_select": "cached",  "guide|use_guide": "yes",  "input_options|error_splice": "30",  "input_options|input_bam": {   "id": "b2cc70d1a26a6eb1",   "src": "hda"  },  "input_options|input_mode": "long_reads" }, "status": "error", "test_index": 10, "time_seconds": 23.280449390411377, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="stringtie (Test #12)" name="11" time="23.373244285583496">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 11, "time_seconds": 23.373244285583496, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="stringtie (Test #13)" name="12" time="34.913264751434326">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #3)" name="2" time="36.591320276260376">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #4)" name="3" time="27.40072989463806">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adv|fraction": "0.17",  "guide|guide_source|guide_gff_select": "history",  "guide|guide_source|ref_hist": {   "id": "c8010cc4748b6f16",   "src": "hda"  },  "guide|use_guide": "yes",  "input_options|input_bam": {   "id": "df1a880681fcc866",   "src": "hda"  },  "input_options|input_mode": "short_reads" }, "job": {  "command_line": "mkdir -p ./special_de_output/sample1/ \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/5/3/7/dataset_537c878b-eedc-4306-91b1-05f1de269f5e.dat\u0027 guide.gff \u0026\u0026  stringtie \u0027/galaxy/server/database/objects/1/7/0/dataset_1705dd4d-b6b3-4b98-8148-5636c39a343c.dat\u0027  -o \u0027/galaxy/server/database/objects/1/9/c/dataset_19c03b3b-6530-41c6-b19f-14bdcd6ed88d.dat\u0027 -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f \u00270.17\u0027 -m \u0027200\u0027 -a \u002710\u0027 -j \u00271\u0027 -c \u00271\u0027 -g \u002750\u0027 -M \u00271.0\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T19:00:39.627305",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-m9gd6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "bd06feb60ade1713",  "inputs": {   "guide|guide_source|ref_hist": {    "id": "c8010cc4748b6f16",    "src": "hda",    "uuid": "537c878b-eedc-4306-91b1-05f1de269f5e"   },   "input_options|input_bam": {    "id": "df1a880681fcc866",    "src": "hda",    "uuid": "1705dd4d-b6b3-4b98-8148-5636c39a343c"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_gtf": {    "id": "8756a2c6560c163e",    "src": "hda",    "uuid": "19c03b3b-6530-41c6-b19f-14bdcd6ed88d"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"1.0\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"1\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\", \"point_features\": null}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 104, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}",   "input_options": "{\"__current_case__\": 0, \"input_bam\": {\"values\": [{\"id\": 103, \"src\": \"hda\"}]}, \"input_mode\": \"short_reads\"}",   "rna_strandness": "\"\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.2.3+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-31T19:00:45.088077",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.2.3+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.2.3+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 27.40072989463806, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #5)" name="4" time="42.36209440231323">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #6)" name="5" time="40.019875288009644">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #7)" name="6" time="13.188333988189697">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 6, "time_seconds": 13.188333988189697, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="stringtie (Test #8)" name="7" time="37.9821081161499">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="stringtie (Test #9)" name="8" time="20.71819019317627">
        
            <error type="error" message="parameter 'ref_builtin': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_builtin\u0027: an invalid option (None) was selected, please verify", "inputs": {  "adv|fraction": "0.15",  "guide|guide_source|guide_gff_select": "cached",  "guide|use_guide": "yes",  "input_options|input_bam": {   "id": "94bf10b2adc7de7d",   "src": "hda"  },  "input_options|input_mode": "short_reads" }, "status": "error", "test_index": 8, "time_seconds": 20.71819019317627, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="stringtie (Test #10)" name="9" time="21.52207851409912">
        
            <error type="error" message="parameter 'ref_builtin': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_builtin\u0027: an invalid option (None) was selected, please verify", "inputs": {  "adv|fraction": "0.15",  "guide|guide_source|guide_gff_select": "cached",  "guide|use_guide": "yes",  "input_options|input_bam": {   "id": "632b3b9610ac1981",   "src": "hda"  },  "input_options|input_mode": "long_reads" }, "status": "error", "test_index": 9, "time_seconds": 21.52207851409912, "tool_id": "stringtie", "tool_version": "2.2.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #1)" name="0" time="56.21733546257019">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/a/f/4/dataset_af44c52b-4b8c-4cfe-8771-89f3b963721e.dat --log2stderr# job started at Fri Jan 31 18:36:21 2025 on gxy-hb5k7-c9h22 -- bba7db82-6e0e-4d41-ab8b-7273a77c03e4# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : False# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/f/4/dataset_af44c52b-4b8c-4cfe-8771-89f3b963721e.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:36:21,702 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/a/f/4/dataset_af44c52b-4b8c-4cfe-8771-89f3b963721e.dat --log2stderr2025-01-31 18:36:21,734 INFO Input Reads: 12032025-01-31 18:36:21,734 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:36:21,734 INFO Number of (post deduplication) reads counted: 141# job finished in 0 seconds at Fri Jan 31 18:36:21 2025 --  1.11  0.16  0.00  0.00 -- bba7db82-6e0e-4d41-ab8b-7273a77c03e4
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #1)" name="0" time="37.9241943359375">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/f/f/dataset_9ffca672-b3d6-4a6b-a896-2ad21c490173.dat --log2stderr# job started at Fri Jan 31 18:39:52 2025 on gxy-x98lj-rfll4 -- c07e4a8a-5fb2-44ae-b892-17ebef9124ae# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : False# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/f/f/dataset_9ffca672-b3d6-4a6b-a896-2ad21c490173.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:39:52,321 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/f/f/dataset_9ffca672-b3d6-4a6b-a896-2ad21c490173.dat --log2stderr2025-01-31 18:39:52,360 INFO Input Reads: 12032025-01-31 18:39:52,361 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:39:52,361 INFO Number of (post deduplication) reads counted: 141# job finished in 0 seconds at Fri Jan 31 18:39:52 2025 --  1.10  0.14  0.00  0.00 -- c07e4a8a-5fb2-44ae-b892-17ebef9124ae
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #1)" name="0" time="38.08864784240723">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/0/3/e/dataset_03e9e462-0321-4fec-816e-e8cd24ba028b.dat --log2stderr# job started at Fri Jan 31 18:44:04 2025 on gxy-w4zbn-prcbj -- ba7e6fda-47f3-4eeb-b144-bce1abd21e2d# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : False# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/0/3/e/dataset_03e9e462-0321-4fec-816e-e8cd24ba028b.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:44:04,316 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/0/3/e/dataset_03e9e462-0321-4fec-816e-e8cd24ba028b.dat --log2stderr2025-01-31 18:44:04,347 INFO Input Reads: 12032025-01-31 18:44:04,347 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:44:04,348 INFO Number of (post deduplication) reads counted: 141# job finished in 0 seconds at Fri Jan 31 18:44:04 2025 --  1.13  0.14  0.00  0.00 -- ba7e6fda-47f3-4eeb-b144-bce1abd21e2d
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #2)" name="1" time="40.25986886024475">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/1/3/5/dataset_1352f15d-efa6-4690-9154-21c2ad0cc1bc.dat --log2stderr# job started at Fri Jan 31 18:37:05 2025 on gxy-frz5h-4l52p -- f0f16479-c5a2-479a-bdfa-8a69204df37a# pid: 26, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : False# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/1/3/5/dataset_1352f15d-efa6-4690-9154-21c2ad0cc1bc.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:37:05,042 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/1/3/5/dataset_1352f15d-efa6-4690-9154-21c2ad0cc1bc.dat --log2stderr2025-01-31 18:37:05,076 INFO Input Reads: 12032025-01-31 18:37:05,076 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:37:05,076 INFO Number of (post deduplication) reads counted: 141# job finished in 0 seconds at Fri Jan 31 18:37:05 2025 --  1.39  0.16  0.00  0.00 -- f0f16479-c5a2-479a-bdfa-8a69204df37a
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #2)" name="1" time="39.41497802734375">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/a/b/8/dataset_ab899c12-d761-479d-a86c-08882a62ce83.dat --log2stderr# job started at Fri Jan 31 18:40:32 2025 on gxy-924fr-dnml8 -- e59c6be6-30dc-43bc-a03b-1db284489420# pid: 26, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : False# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/b/8/dataset_ab899c12-d761-479d-a86c-08882a62ce83.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:40:32,192 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/a/b/8/dataset_ab899c12-d761-479d-a86c-08882a62ce83.dat --log2stderr2025-01-31 18:40:32,222 INFO Input Reads: 12032025-01-31 18:40:32,222 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:40:32,222 INFO Number of (post deduplication) reads counted: 141# job finished in 0 seconds at Fri Jan 31 18:40:32 2025 --  1.05  0.13  0.00  0.00 -- e59c6be6-30dc-43bc-a03b-1db284489420
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #2)" name="1" time="13.9776930809021">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 13.9776930809021, "tool_id": "umi_tools_count", "tool_version": "1.1.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #3)" name="2" time="38.83866882324219">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/e/6/4/dataset_e642be34-4ca6-43a8-9fc0-15ceb0bde34a.dat --log2stderr# job started at Fri Jan 31 18:37:44 2025 on gxy-5sdq8-jrgk4 -- d3d549a3-c4a5-4d61-8a5d-d597696e288f# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/e/6/4/dataset_e642be34-4ca6-43a8-9fc0-15ceb0bde34a.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:37:44,412 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/e/6/4/dataset_e642be34-4ca6-43a8-9fc0-15ceb0bde34a.dat --log2stderr2025-01-31 18:37:44,447 INFO Input Reads: 12032025-01-31 18:37:44,447 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:37:44,447 INFO Number of (post deduplication) reads counted: 145# job finished in 0 seconds at Fri Jan 31 18:37:44 2025 --  1.18  0.14  0.00  0.00 -- d3d549a3-c4a5-4d61-8a5d-d597696e288f
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #3)" name="2" time="36.14890909194946">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/d/f/b/dataset_dfbfc3e2-aae5-4040-99fd-241e0c277516.dat --log2stderr# job started at Fri Jan 31 18:41:09 2025 on gxy-vh42z-79ws2 -- e42e17da-9abf-4022-a443-b6d0e35182ee# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/d/f/b/dataset_dfbfc3e2-aae5-4040-99fd-241e0c277516.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : False2025-01-31 18:41:09,069 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/d/f/b/dataset_dfbfc3e2-aae5-4040-99fd-241e0c277516.dat --log2stderr2025-01-31 18:41:09,102 INFO Input Reads: 12032025-01-31 18:41:09,102 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:41:09,102 INFO Number of (post deduplication) reads counted: 145# job finished in 0 seconds at Fri Jan 31 18:41:09 2025 --  1.10  0.14  0.00  0.00 -- e42e17da-9abf-4022-a443-b6d0e35182ee
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #3)" name="2" time="13.59235143661499">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 13.59235143661499, "tool_id": "umi_tools_count", "tool_version": "1.1.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #4)" name="3" time="13.605623006820679">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 13.605623006820679, "tool_id": "umi_tools_count", "tool_version": "1.1.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #4)" name="3" time="35.44361162185669">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/0/f/a/dataset_0fa4da00-462a-4b9e-bdd4-6369952d360f.dat --log2stderr# job started at Fri Jan 31 18:41:44 2025 on gxy-zp596-6rrmh -- 1be7748e-d1c4-44bf-bdf7-66691151e879# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/0/f/a/dataset_0fa4da00-462a-4b9e-bdd4-6369952d360f.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:41:44,829 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/0/f/a/dataset_0fa4da00-462a-4b9e-bdd4-6369952d360f.dat --log2stderr2025-01-31 18:41:44,863 INFO Input Reads: 12032025-01-31 18:41:44,863 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:41:44,863 INFO Number of (post deduplication) reads counted: 145# job finished in 0 seconds at Fri Jan 31 18:41:44 2025 --  1.07  0.14  0.00  0.00 -- 1be7748e-d1c4-44bf-bdf7-66691151e879
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #4)" name="3" time="42.93951654434204">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/2/9/dataset_929178a4-b619-48d2-ac9c-774d4f417bde.dat --log2stderr# job started at Fri Jan 31 18:45:15 2025 on gxy-j66cb-qbwlh -- 17a8ff71-af3a-4b37-b98c-86ef07cc8699# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XF# gene_transcript_map                     : None# get_umi_method                          : umis# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : directional# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 123456789# read_length                             : False# short_help                              : None# skip_regex                              : ^[__Unassigned]# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/2/9/dataset_929178a4-b619-48d2-ac9c-774d4f417bde.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:45:15,253 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/2/9/dataset_929178a4-b619-48d2-ac9c-774d4f417bde.dat --log2stderr2025-01-31 18:45:15,284 INFO Input Reads: 12032025-01-31 18:45:15,284 INFO Read skipped - assigned tag matches skip_regex: 1202025-01-31 18:45:15,284 INFO Number of (post deduplication) reads counted: 145# job finished in 0 seconds at Fri Jan 31 18:45:15 2025 --  1.18  0.14  0.00  0.00 -- 17a8ff71-af3a-4b37-b98c-86ef07cc8699
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #5)" name="4" time="35.02992033958435">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/2/3/9/dataset_2393ad22-8323-468d-84ee-f98c8c0d8ad0.dat --log2stderr# job started at Fri Jan 31 18:38:34 2025 on gxy-5bnt9-zqnn5 -- 9b201b9d-edfe-4c83-81d9-69cf43689415# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/2/3/9/dataset_2393ad22-8323-468d-84ee-f98c8c0d8ad0.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:38:34,367 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/2/3/9/dataset_2393ad22-8323-468d-84ee-f98c8c0d8ad0.dat --log2stderr2025-01-31 18:38:34,390 INFO Input Reads: 392025-01-31 18:38:34,390 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:38:34 2025 --  1.11  0.13  0.00  0.00 -- 9b201b9d-edfe-4c83-81d9-69cf43689415
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #5)" name="4" time="36.62474226951599">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/f/9/dataset_5f9371ba-bcb3-45c6-9d3c-64897807db98.dat --log2stderr# job started at Fri Jan 31 18:42:20 2025 on gxy-przbt-f6mmf -- 2bd17531-9cc5-4555-84be-d86886c5227a# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/5/f/9/dataset_5f9371ba-bcb3-45c6-9d3c-64897807db98.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:42:20,932 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/f/9/dataset_5f9371ba-bcb3-45c6-9d3c-64897807db98.dat --log2stderr2025-01-31 18:42:20,954 INFO Input Reads: 392025-01-31 18:42:20,954 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:42:20 2025 --  1.06  0.13  0.00  0.00 -- 2bd17531-9cc5-4555-84be-d86886c5227a
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #5)" name="4" time="36.400229692459106">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/f/d/f/dataset_fdf8e3d4-6761-4377-a930-4af0bc4afc20.dat --log2stderr# job started at Fri Jan 31 18:45:51 2025 on gxy-5tqlx-j48x4 -- 675a065e-0fae-4453-a257-2a48789f6d86# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/d/f/dataset_fdf8e3d4-6761-4377-a930-4af0bc4afc20.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:45:51,993 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/f/d/f/dataset_fdf8e3d4-6761-4377-a930-4af0bc4afc20.dat --log2stderr2025-01-31 18:45:52,018 INFO Input Reads: 392025-01-31 18:45:52,018 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:45:52 2025 --  1.06  0.15  0.00  0.00 -- 675a065e-0fae-4453-a257-2a48789f6d86
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #6)" name="5" time="28.064189195632935">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "advanced|random_seed": "0",  "cond_extra|custom_label": "test",  "cond_extra|prepender": "string",  "input": {   "id": "464211a12529457e",   "src": "hda"  },  "sc|gene_tag": "XT",  "sc|per_cell": true,  "umi|method": "unique" }, "job": {  "command_line": "ln -sf \u0027/galaxy/server/database/objects/c/2/6/dataset_c26a43e1-d85e-4320-ae76-f96e744eec3b.dat\u0027 \u0027input.bam\u0027 \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/_metadata_files/a/1/5/metadata_a156c3c4-63d7-4c64-97f2-09e3c1b7e431.dat\u0027 \u0027input.bam.bai\u0027 \u0026\u0026   umi_tools count \u0027--wide-format-cell-counts\u0027  --extract-umi-method read_id --umi-separator \u0027_\u0027   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag \u0027XT\u0027  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed=\u00270\u0027  -I \u0027input.bam\u0027 -S \u0027/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat\u0027  --log2stderr  \u0026\u0026 sed -i -r \u00271s|\\b([ACGT]+)\\b|\u0027\"test\"\u0027_\\1|g\u0027 \u0027/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T18:39:07.262625",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-6jkn5",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "84a864c9546b4e3f",  "inputs": {   "input": {    "id": "464211a12529457e",    "src": "hda",    "uuid": "c26a43e1-d85e-4320-ae76-f96e744eec3b"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out_counts": {    "id": "84a864c9546b4e3f",    "src": "hda",    "uuid": "6edb39dd-d309-48ea-825e-0a8369c29a01"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced": "{\"random_seed\": \"0\"}",   "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "cond_extra": "{\"__current_case__\": 2, \"custom_label\": \"test\", \"prepender\": \"string\"}",   "dbkey": "\"?\"",   "log": "false",   "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}",   "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}",   "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}",   "wide_format_cell_counts": "true"  },  "state": "error",  "stderr": "# UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n# job started at Fri Jan 31 18:39:10 2025 on gxy-6jkn5-5t2v9 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:39:10,453 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n2025-01-31 18:39:10,476 INFO Input Reads: 39\n2025-01-31 18:39:10,476 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:39:10 2025 --  1.06  0.15  0.00  0.00 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.5+galaxy1",  "tool_stderr": "# UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n# job started at Fri Jan 31 18:39:10 2025 on gxy-6jkn5-5t2v9 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:39:10,453 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n2025-01-31 18:39:10,476 INFO Input Reads: 39\n2025-01-31 18:39:10,476 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:39:10 2025 --  1.06  0.15  0.00  0.00 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n",  "tool_stdout": "",  "update_time": "2025-01-31T18:39:14.151346",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.5+galaxy1, exit_code: None, stderr: # UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n# job started at Fri Jan 31 18:39:10 2025 on gxy-6jkn5-5t2v9 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:39:10,453 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n2025-01-31 18:39:10,476 INFO Input Reads: 39\n2025-01-31 18:39:10,476 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:39:10 2025 --  1.06  0.15  0.00  0.00 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.5+galaxy1, exit_code: None, stderr: # UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n# job started at Fri Jan 31 18:39:10 2025 on gxy-6jkn5-5t2v9 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:39:10,453 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr\n2025-01-31 18:39:10,476 INFO Input Reads: 39\n2025-01-31 18:39:10,476 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:39:10 2025 --  1.06  0.15  0.00  0.00 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7\n." ], "status": "failure", "test_index": 5, "time_seconds": 28.064189195632935, "tool_id": "umi_tools_count", "tool_version": "1.1.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr# job started at Fri Jan 31 18:39:10 2025 on gxy-6jkn5-5t2v9 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:39:10,453 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/6/e/d/dataset_6edb39dd-d309-48ea-825e-0a8369c29a01.dat --log2stderr2025-01-31 18:39:10,476 INFO Input Reads: 392025-01-31 18:39:10,476 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:39:10 2025 --  1.06  0.15  0.00  0.00 -- 7e4deb16-f743-4e38-ab9b-f8ce918e48a7
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #6)" name="5" time="36.46914458274841">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/4/f/e/dataset_4feb0562-78d7-48e3-94e3-9aef3fad5396.dat --log2stderr# job started at Fri Jan 31 18:42:57 2025 on gxy-tlrfj-648d4 -- 91c19027-179c-4b72-82c9-b44c0a27beca# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/4/f/e/dataset_4feb0562-78d7-48e3-94e3-9aef3fad5396.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:42:57,570 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/4/f/e/dataset_4feb0562-78d7-48e3-94e3-9aef3fad5396.dat --log2stderr2025-01-31 18:42:57,596 INFO Input Reads: 392025-01-31 18:42:57,596 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:42:57 2025 --  1.04  0.16  0.00  0.00 -- 91c19027-179c-4b72-82c9-b44c0a27beca
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #6)" name="5" time="38.765350341796875">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/a/1/dataset_5a14f5f6-6ba0-4997-b9d3-d89deb13d61c.dat --log2stderr# job started at Fri Jan 31 18:46:29 2025 on gxy-bzwld-6m8v7 -- 5c56f375-dcdf-440f-adc1-7c786d0ff0a9# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/5/a/1/dataset_5a14f5f6-6ba0-4997-b9d3-d89deb13d61c.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:46:29,920 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/a/1/dataset_5a14f5f6-6ba0-4997-b9d3-d89deb13d61c.dat --log2stderr2025-01-31 18:46:29,941 INFO Input Reads: 392025-01-31 18:46:29,941 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:46:29 2025 --  1.10  0.13  0.00  0.00 -- 5c56f375-dcdf-440f-adc1-7c786d0ff0a9
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #7)" name="6" time="12.114465475082397">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 6, "time_seconds": 12.114465475082397, "tool_id": "umi_tools_count", "tool_version": "1.1.5+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #7)" name="6" time="27.747289419174194">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "advanced|random_seed": "0",  "cond_extra|prepender": "dataset name",  "input": {   "id": "78d95a85fee64a96",   "src": "hda"  },  "sc|gene_tag": "XT",  "sc|per_cell": true,  "umi|method": "unique" }, "job": {  "command_line": "ln -sf \u0027/galaxy/server/database/objects/d/7/1/dataset_d71eceeb-79ec-4042-ad15-0080a14f6839.dat\u0027 \u0027input.bam\u0027 \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/_metadata_files/9/8/7/metadata_987a516c-0209-455a-a45b-66f3b9f0bf39.dat\u0027 \u0027input.bam.bai\u0027 \u0026\u0026   umi_tools count \u0027--wide-format-cell-counts\u0027  --extract-umi-method read_id --umi-separator \u0027_\u0027   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag \u0027XT\u0027  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed=\u00270\u0027  -I \u0027input.bam\u0027 -S \u0027/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat\u0027  --log2stderr  \u0026\u0026 sed -i -r \u00271s|\\b([ACGT]+)\\b|\u0027\"fc_ENSDARG00000019692\"\u0027_\\1|g\u0027 \u0027/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-31T18:43:30.995067",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-f4rgv",  "galaxy_version": "24.1",  "handler": null,  "history_id": "b8a87750286f8e5b",  "id": "c1d4daf40f840e78",  "inputs": {   "input": {    "id": "78d95a85fee64a96",    "src": "hda",    "uuid": "d71eceeb-79ec-4042-ad15-0080a14f6839"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out_counts": {    "id": "c1d4daf40f840e78",    "src": "hda",    "uuid": "99bf1b5b-c08f-46e6-8709-a5635b272cbd"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced": "{\"random_seed\": \"0\"}",   "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "cond_extra": "{\"__current_case__\": 1, \"prepender\": \"dataset name\"}",   "dbkey": "\"?\"",   "log": "false",   "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}",   "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}",   "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}",   "wide_format_cell_counts": "true"  },  "state": "error",  "stderr": "# UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n# job started at Fri Jan 31 18:43:34 2025 on gxy-f4rgv-xvhqn -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:43:34,581 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n2025-01-31 18:43:34,606 INFO Input Reads: 39\n2025-01-31 18:43:34,606 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:43:34 2025 --  1.16  0.14  0.00  0.00 -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.5+galaxy1",  "tool_stderr": "# UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n# job started at Fri Jan 31 18:43:34 2025 on gxy-f4rgv-xvhqn -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:43:34,581 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n2025-01-31 18:43:34,606 INFO Input Reads: 39\n2025-01-31 18:43:34,606 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:43:34 2025 --  1.16  0.14  0.00  0.00 -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n",  "tool_stdout": "",  "update_time": "2025-01-31T18:43:37.602930",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.5+galaxy1, exit_code: None, stderr: # UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n# job started at Fri Jan 31 18:43:34 2025 on gxy-f4rgv-xvhqn -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:43:34,581 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n2025-01-31 18:43:34,606 INFO Input Reads: 39\n2025-01-31 18:43:34,606 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:43:34 2025 --  1.16  0.14  0.00  0.00 -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.5+galaxy1, exit_code: None, stderr: # UMI-tools version: 1.1.5\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n# job started at Fri Jan 31 18:43:34 2025 on gxy-f4rgv-xvhqn -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdin                                   : \u003c_io.TextIOWrapper name=\u0027input.bam\u0027 mode=\u0027r\u0027 encoding=\u0027UTF-8\u0027\u003e\n# stdlog                                  : \u003c_io.TextIOWrapper name=\u0027\u003cstderr\u003e\u0027 mode=\u0027w\u0027 encoding=\u0027utf-8\u0027\u003e\n# stdout                                  : \u003c_io.TextIOWrapper name=\u0027/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat\u0027 mode=\u0027w\u0027 encoding=\u0027UTF-8\u0027\u003e\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2025-01-31 18:43:34,581 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr\n2025-01-31 18:43:34,606 INFO Input Reads: 39\n2025-01-31 18:43:34,606 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Jan 31 18:43:34 2025 --  1.16  0.14  0.00  0.00 -- 78fe5c78-f2e8-4dc8-a805-dcf541293423\n." ], "status": "failure", "test_index": 6, "time_seconds": 27.747289419174194, "tool_id": "umi_tools_count", "tool_version": "1.1.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr# job started at Fri Jan 31 18:43:34 2025 on gxy-f4rgv-xvhqn -- 78fe5c78-f2e8-4dc8-a805-dcf541293423# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:43:34,581 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/9/b/dataset_99bf1b5b-c08f-46e6-8709-a5635b272cbd.dat --log2stderr2025-01-31 18:43:34,606 INFO Input Reads: 392025-01-31 18:43:34,606 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:43:34 2025 --  1.16  0.14  0.00  0.00 -- 78fe5c78-f2e8-4dc8-a805-dcf541293423
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="umi_tools_count (Test #7)" name="6" time="35.64033913612366">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            # UMI-tools version: 1.1.5# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/1/a/1/dataset_1a1342a7-5972-478e-8302-de851e6110f2.dat --log2stderr# job started at Fri Jan 31 18:47:05 2025 on gxy-jfzkl-8wg4r -- efb66b2b-1b80-45e4-b3a4-93d9f6196591# pid: 25, system: Linux 6.1.112+ #1 SMP PREEMPT_DYNAMIC Sat Dec  7 17:13:19 UTC 2024 x86_64# assigned_tag                            : None# cell_tag                                : None# cell_tag_delim                          : None# cell_tag_split                          : -# chimeric_pairs                          : use# chrom                                   : None# compresslevel                           : 6# filter_umi                              : None# gene_tag                                : XT# gene_transcript_map                     : None# get_umi_method                          : read_id# ignore_tlen                             : False# ignore_umi                              : False# in_sam                                  : False# log2stderr                              : True# loglevel                                : 1# mapping_quality                         : 0# method                                  : unique# no_sort_output                          : False# out_sam                                 : False# output_unmapped                         : False# paired                                  : False# per_cell                                : True# per_contig                              : False# per_gene                                : False# random_seed                             : 0# read_length                             : False# short_help                              : None# skip_regex                              : ^(__|Unassigned)# soft_clip_threshold                     : 4.0# spliced                                 : False# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'># stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'># stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/1/a/1/dataset_1a1342a7-5972-478e-8302-de851e6110f2.dat' mode='w' encoding='UTF-8'># subset                                  : 1.0# threshold                               : 1# timeit_file                             : None# timeit_header                           : None# timeit_name                             : all# tmpdir                                  : None# umi_sep                                 : _# umi_tag                                 : RX# umi_tag_delim                           : None# umi_tag_split                           : None# umi_whitelist                           : None# umi_whitelist_paired                    : None# unmapped_reads                          : discard# unpaired_reads                          : use# wide_format_cell_counts                 : True2025-01-31 18:47:05,611 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/1/a/1/dataset_1a1342a7-5972-478e-8302-de851e6110f2.dat --log2stderr2025-01-31 18:47:05,634 INFO Input Reads: 392025-01-31 18:47:05,634 INFO Number of (post deduplication) reads counted: 12# job finished in 0 seconds at Fri Jan 31 18:47:05 2025 --  1.14  0.15  0.00  0.00 -- efb66b2b-1b80-45e4-b3a4-93d9f6196591
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfallelicprimitives (Test #1)" name="0" time="43.731995582580566">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfprimers (Test #1)" name="0" time="34.63848567008972">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            index file localref.fa.fai not found, generating...
            ]]></system-err>
        
    </testcase>
    
</testsuite>